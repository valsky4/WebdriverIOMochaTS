/**
 * @extends {BaseDriver<CDConstraints>}
 * @implements {ExternalDriver<CDConstraints>}
 */
export class ChromiumDriver extends BaseDriver<{
    readonly chromedriverPort: {
        readonly isNumber: true;
    };
    readonly useSystemExecutable: {
        readonly isBoolean: true;
    };
    readonly executable: {
        readonly isString: true;
    };
    readonly executableDir: {
        readonly isString: true;
    };
    readonly verbose: {
        readonly isBoolean: true;
    };
    readonly logPath: {
        readonly isString: true;
    };
    readonly autodownloadEnabled: {
        readonly isBoolean: true;
    };
    readonly disableBuildCheck: {
        readonly isBoolean: true;
    };
}> implements ExternalDriver<CDConstraints> {
    constructor(...arguments_: any[]);
    desiredCapConstraints: {
        readonly chromedriverPort: {
            readonly isNumber: true;
        };
        readonly useSystemExecutable: {
            readonly isBoolean: true;
        };
        readonly executable: {
            readonly isString: true;
        };
        readonly executableDir: {
            readonly isString: true;
        };
        readonly verbose: {
            readonly isBoolean: true;
        };
        readonly logPath: {
            readonly isString: true;
        };
        readonly autodownloadEnabled: {
            readonly isBoolean: true;
        };
        readonly disableBuildCheck: {
            readonly isBoolean: true;
        };
    };
    _proxyActive: boolean;
    /** @type {Chromedriver} */
    cd: Chromedriver;
    /** @type {DriverOpts<CDConstraints>} */
    opts: DriverOpts<CDConstraints>;
    proxyReqRes: any;
    proxyCommand: any;
    proxyActive(): boolean;
    canProxy(): boolean;
    /**
     *
     * @param {W3CChromiumDriverCaps} jsonwpDesiredCapabilities
     * @param {W3CChromiumDriverCaps} [jsonwpRequiredCaps]
     * @param {W3CChromiumDriverCaps} [w3cCapabilities]
     * @returns {Promise<[string,ChromiumDriverCaps]>}
     */
    createSession(jsonwpDesiredCapabilities: W3CChromiumDriverCaps, jsonwpRequiredCaps?: import("./types").W3CChromiumDriverCaps | undefined, w3cCapabilities?: import("./types").W3CChromiumDriverCaps | undefined): Promise<[string, Partial<import("@appium/types").ConstraintsToCaps<typeof import("@appium/types").BASE_DESIRED_CAP_CONSTRAINTS & {
        readonly chromedriverPort: {
            readonly isNumber: true;
        };
        readonly useSystemExecutable: {
            readonly isBoolean: true;
        };
        readonly executable: {
            readonly isString: true;
        };
        readonly executableDir: {
            readonly isString: true;
        };
        readonly verbose: {
            readonly isBoolean: true;
        };
        readonly logPath: {
            readonly isString: true;
        };
        readonly autodownloadEnabled: {
            readonly isBoolean: true;
        };
        readonly disableBuildCheck: {
            readonly isBoolean: true;
        };
    }> & void>]>;
    getSessionCaps(): {};
    startChromedriverSession(): Promise<void>;
}
export default ChromiumDriver;
export type CDConstraints = typeof CD_CONSTRAINTS;
export type W3CChromiumDriverCaps = import('./types').W3CChromiumDriverCaps;
export type ChromiumDriverCaps = import('./types').ChromiumDriverCaps;
export type DriverData = import('@appium/types').DriverData;
export type ExternalDriver<C extends Readonly<Record<string, import("@appium/types").Constraint>>> = import('@appium/types').ExternalDriver<C>;
export type DriverOpts<C extends Readonly<Record<string, import("@appium/types").Constraint>>> = import('@appium/types').DriverOpts<C>;
import { BaseDriver } from "@appium/base-driver";
declare namespace CD_CONSTRAINTS {
    namespace chromedriverPort {
        const isNumber: true;
    }
    namespace useSystemExecutable {
        const isBoolean: true;
    }
    namespace executable {
        const isString: true;
    }
    namespace executableDir {
        const isString_1: true;
        export { isString_1 as isString };
    }
    namespace verbose {
        const isBoolean_1: true;
        export { isBoolean_1 as isBoolean };
    }
    namespace logPath {
        const isString_2: true;
        export { isString_2 as isString };
    }
    namespace autodownloadEnabled {
        const isBoolean_2: true;
        export { isBoolean_2 as isBoolean };
    }
    namespace disableBuildCheck {
        const isBoolean_3: true;
        export { isBoolean_3 as isBoolean };
    }
}
//# sourceMappingURL=driver.d.ts.map