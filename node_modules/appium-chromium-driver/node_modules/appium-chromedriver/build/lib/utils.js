"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.X86 = exports.X64 = exports.OS = exports.CHROMEDRIVER_CHROME_MAPPING = exports.CD_VER = exports.CD_CDN = exports.CD_BASE_DIR = exports.APPLE_ARM_SUFFIXES = void 0;
exports.generateLogPrefix = generateLogPrefix;
exports.getChromeVersion = getChromeVersion;
exports.getChromedriverBinaryPath = getChromedriverBinaryPath;
exports.getChromedriverDir = getChromedriverDir;
exports.getMostRecentChromedriver = getMostRecentChromedriver;
exports.getOsName = exports.getOsInfo = void 0;
exports.retrieveData = retrieveData;
require("source-map-support/register");
var _lodash = _interopRequireDefault(require("lodash"));
var _support = require("@appium/support");
var _baseDriver = require("@appium/base-driver");
var _path = _interopRequireDefault(require("path"));
var _compareVersions = require("compare-versions");
var _axios = _interopRequireDefault(require("axios"));
const CD_CDN = process.env.npm_config_chromedriver_cdnurl || process.env.CHROMEDRIVER_CDNURL || 'https://chromedriver.storage.googleapis.com';
exports.CD_CDN = CD_CDN;
const OS = {
  linux: 'linux',
  windows: 'win',
  mac: 'mac'
};
exports.OS = OS;
const X64 = '64';
exports.X64 = X64;
const X86 = '32';
exports.X86 = X86;
const APPLE_ARM_SUFFIXES = ['64_m1', '_arm64'];
exports.APPLE_ARM_SUFFIXES = APPLE_ARM_SUFFIXES;
const CD_EXECUTABLE_PREFIX = 'chromedriver';
const MODULE_NAME = 'appium-chromedriver';
const getModuleRoot = _lodash.default.memoize(function getModuleRoot() {
  const root = _support.node.getModuleRootSync(MODULE_NAME, __filename);
  if (!root) {
    throw new Error(`Cannot find the root folder of the ${MODULE_NAME} Node.js module`);
  }
  return root;
});
const CHROMEDRIVER_CHROME_MAPPING = require(_path.default.join(getModuleRoot(), 'config', 'mapping.json'));
exports.CHROMEDRIVER_CHROME_MAPPING = CHROMEDRIVER_CHROME_MAPPING;
const CD_BASE_DIR = _path.default.join(getModuleRoot(), 'chromedriver');
exports.CD_BASE_DIR = CD_BASE_DIR;
function getMostRecentChromedriver(mapping = CHROMEDRIVER_CHROME_MAPPING) {
  if (_lodash.default.isEmpty(mapping)) {
    throw new Error('Unable to get most recent Chromedriver version from empty mapping');
  }
  return _lodash.default.last(_lodash.default.keys(mapping).sort(_compareVersions.compareVersions));
}
const CD_VER = process.env.npm_config_chromedriver_version || process.env.CHROMEDRIVER_VERSION || getMostRecentChromedriver();
exports.CD_VER = CD_VER;
async function getChromeVersion(adb, bundleId) {
  const {
    versionName
  } = await adb.getPackageInfo(bundleId);
  return versionName;
}
function getChromedriverDir(osName = getOsName()) {
  return _path.default.resolve(CD_BASE_DIR, osName);
}
async function getChromedriverBinaryPath(osName = getOsName()) {
  const rootDir = getChromedriverDir(osName);
  const pathSuffix = osName === OS.windows ? '.exe' : '';
  const paths = await _support.fs.glob(`${CD_EXECUTABLE_PREFIX}*${pathSuffix}`, {
    cwd: rootDir,
    absolute: true,
    nocase: true,
    nodir: true,
    strict: false
  });
  return _lodash.default.isEmpty(paths) ? _path.default.resolve(rootDir, `${CD_EXECUTABLE_PREFIX}${pathSuffix}`) : _lodash.default.first(paths);
}
async function retrieveData(url, headers, opts = {}) {
  const {
    timeout = 5000,
    responseType = 'text'
  } = opts;
  return (await (0, _axios.default)({
    url,
    headers,
    timeout,
    responseType
  })).data;
}
const getOsName = _lodash.default.memoize(function getOsName() {
  if (_support.system.isWindows()) {
    return OS.windows;
  }
  if (_support.system.isMac()) {
    return OS.mac;
  }
  return OS.linux;
});
exports.getOsName = getOsName;
const getOsInfo = _lodash.default.memoize(async function getOsInfo() {
  return {
    name: getOsName(),
    arch: await _support.system.arch()
  };
});
exports.getOsInfo = getOsInfo;
const getBaseDriverInstance = _lodash.default.memoize(() => new _baseDriver.BaseDriver({}, false));
function generateLogPrefix(obj, sessionId = null) {
  return getBaseDriverInstance().helpers.generateDriverLogPrefix(obj, sessionId);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJDRF9DRE4iLCJwcm9jZXNzIiwiZW52IiwibnBtX2NvbmZpZ19jaHJvbWVkcml2ZXJfY2RudXJsIiwiQ0hST01FRFJJVkVSX0NETlVSTCIsIk9TIiwibGludXgiLCJ3aW5kb3dzIiwibWFjIiwiWDY0IiwiWDg2IiwiQVBQTEVfQVJNX1NVRkZJWEVTIiwiQ0RfRVhFQ1VUQUJMRV9QUkVGSVgiLCJNT0RVTEVfTkFNRSIsImdldE1vZHVsZVJvb3QiLCJfIiwibWVtb2l6ZSIsInJvb3QiLCJub2RlIiwiZ2V0TW9kdWxlUm9vdFN5bmMiLCJfX2ZpbGVuYW1lIiwiRXJyb3IiLCJDSFJPTUVEUklWRVJfQ0hST01FX01BUFBJTkciLCJyZXF1aXJlIiwicGF0aCIsImpvaW4iLCJDRF9CQVNFX0RJUiIsImdldE1vc3RSZWNlbnRDaHJvbWVkcml2ZXIiLCJtYXBwaW5nIiwiaXNFbXB0eSIsImxhc3QiLCJrZXlzIiwic29ydCIsImNvbXBhcmVWZXJzaW9ucyIsIkNEX1ZFUiIsIm5wbV9jb25maWdfY2hyb21lZHJpdmVyX3ZlcnNpb24iLCJDSFJPTUVEUklWRVJfVkVSU0lPTiIsImdldENocm9tZVZlcnNpb24iLCJhZGIiLCJidW5kbGVJZCIsInZlcnNpb25OYW1lIiwiZ2V0UGFja2FnZUluZm8iLCJnZXRDaHJvbWVkcml2ZXJEaXIiLCJvc05hbWUiLCJnZXRPc05hbWUiLCJyZXNvbHZlIiwiZ2V0Q2hyb21lZHJpdmVyQmluYXJ5UGF0aCIsInJvb3REaXIiLCJwYXRoU3VmZml4IiwicGF0aHMiLCJmcyIsImdsb2IiLCJjd2QiLCJhYnNvbHV0ZSIsIm5vY2FzZSIsIm5vZGlyIiwic3RyaWN0IiwiZmlyc3QiLCJyZXRyaWV2ZURhdGEiLCJ1cmwiLCJoZWFkZXJzIiwib3B0cyIsInRpbWVvdXQiLCJyZXNwb25zZVR5cGUiLCJheGlvcyIsImRhdGEiLCJzeXN0ZW0iLCJpc1dpbmRvd3MiLCJpc01hYyIsImdldE9zSW5mbyIsIm5hbWUiLCJhcmNoIiwiZ2V0QmFzZURyaXZlckluc3RhbmNlIiwiQmFzZURyaXZlciIsImdlbmVyYXRlTG9nUHJlZml4Iiwib2JqIiwic2Vzc2lvbklkIiwiaGVscGVycyIsImdlbmVyYXRlRHJpdmVyTG9nUHJlZml4Il0sInNvdXJjZXMiOlsiLi4vLi4vbGliL3V0aWxzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyBzeXN0ZW0sIGZzLCBub2RlIH0gZnJvbSAnQGFwcGl1bS9zdXBwb3J0JztcbmltcG9ydCB7IEJhc2VEcml2ZXIgfSBmcm9tICdAYXBwaXVtL2Jhc2UtZHJpdmVyJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHsgY29tcGFyZVZlcnNpb25zIH0gZnJvbSAnY29tcGFyZS12ZXJzaW9ucyc7XG5pbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xuXG5jb25zdCBDRF9DRE4gPSBwcm9jZXNzLmVudi5ucG1fY29uZmlnX2Nocm9tZWRyaXZlcl9jZG51cmxcbiAgfHwgcHJvY2Vzcy5lbnYuQ0hST01FRFJJVkVSX0NETlVSTFxuICB8fCAnaHR0cHM6Ly9jaHJvbWVkcml2ZXIuc3RvcmFnZS5nb29nbGVhcGlzLmNvbSc7XG5jb25zdCBPUyA9IHtcbiAgbGludXg6ICdsaW51eCcsXG4gIHdpbmRvd3M6ICd3aW4nLFxuICBtYWM6ICdtYWMnXG59O1xuY29uc3QgWDY0ID0gJzY0JztcbmNvbnN0IFg4NiA9ICczMic7XG5jb25zdCBBUFBMRV9BUk1fU1VGRklYRVMgPSBbJzY0X20xJywgJ19hcm02NCddO1xuY29uc3QgQ0RfRVhFQ1VUQUJMRV9QUkVGSVggPSAnY2hyb21lZHJpdmVyJztcbmNvbnN0IE1PRFVMRV9OQU1FID0gJ2FwcGl1bS1jaHJvbWVkcml2ZXInO1xuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIHBhdGggdG8gdGhlIGN1cnJlbnQgbW9kdWxlJ3Mgcm9vdCBmb2xkZXJcbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgZnVsbCBwYXRoIHRvIG1vZHVsZSByb290XG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIGN1cnJlbnQgbW9kdWxlIHJvb3QgZm9sZGVyIGNhbm5vdCBiZSBkZXRlcm1pbmVkXG4gKi9cbmNvbnN0IGdldE1vZHVsZVJvb3QgPSBfLm1lbW9pemUoZnVuY3Rpb24gZ2V0TW9kdWxlUm9vdCAoKSB7XG4gIGNvbnN0IHJvb3QgPSBub2RlLmdldE1vZHVsZVJvb3RTeW5jKE1PRFVMRV9OQU1FLCBfX2ZpbGVuYW1lKTtcbiAgaWYgKCFyb290KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBDYW5ub3QgZmluZCB0aGUgcm9vdCBmb2xkZXIgb2YgdGhlICR7TU9EVUxFX05BTUV9IE5vZGUuanMgbW9kdWxlYCk7XG4gIH1cbiAgcmV0dXJuIHJvb3Q7XG59KTtcblxuLy8gQ2hyb21lZHJpdmVyIHZlcnNpb246IG1pbmltdW0gQ2hyb21lIHZlcnNpb25cbmNvbnN0IENIUk9NRURSSVZFUl9DSFJPTUVfTUFQUElORyA9IHJlcXVpcmUocGF0aC5qb2luKGdldE1vZHVsZVJvb3QoKSwgJ2NvbmZpZycsICdtYXBwaW5nLmpzb24nKSk7XG5jb25zdCBDRF9CQVNFX0RJUiA9IHBhdGguam9pbihnZXRNb2R1bGVSb290KCksICdjaHJvbWVkcml2ZXInKTtcblxuZnVuY3Rpb24gZ2V0TW9zdFJlY2VudENocm9tZWRyaXZlciAobWFwcGluZyA9IENIUk9NRURSSVZFUl9DSFJPTUVfTUFQUElORykge1xuICBpZiAoXy5pc0VtcHR5KG1hcHBpbmcpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdVbmFibGUgdG8gZ2V0IG1vc3QgcmVjZW50IENocm9tZWRyaXZlciB2ZXJzaW9uIGZyb20gZW1wdHkgbWFwcGluZycpO1xuICB9XG4gIHJldHVybiBfLmxhc3QoXy5rZXlzKG1hcHBpbmcpLnNvcnQoY29tcGFyZVZlcnNpb25zKSk7XG59XG5cbmNvbnN0IENEX1ZFUiA9IHByb2Nlc3MuZW52Lm5wbV9jb25maWdfY2hyb21lZHJpdmVyX3ZlcnNpb25cbiAgfHwgcHJvY2Vzcy5lbnYuQ0hST01FRFJJVkVSX1ZFUlNJT05cbiAgfHwgZ2V0TW9zdFJlY2VudENocm9tZWRyaXZlcigpO1xuXG5hc3luYyBmdW5jdGlvbiBnZXRDaHJvbWVWZXJzaW9uIChhZGIsIGJ1bmRsZUlkKSB7XG4gIGNvbnN0IHt2ZXJzaW9uTmFtZX0gPSBhd2FpdCBhZGIuZ2V0UGFja2FnZUluZm8oYnVuZGxlSWQpO1xuICByZXR1cm4gdmVyc2lvbk5hbWU7XG59XG5cbmZ1bmN0aW9uIGdldENocm9tZWRyaXZlckRpciAob3NOYW1lID0gZ2V0T3NOYW1lKCkpIHtcbiAgcmV0dXJuIHBhdGgucmVzb2x2ZShDRF9CQVNFX0RJUiwgb3NOYW1lKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0Q2hyb21lZHJpdmVyQmluYXJ5UGF0aCAob3NOYW1lID0gZ2V0T3NOYW1lKCkpIHtcbiAgY29uc3Qgcm9vdERpciA9IGdldENocm9tZWRyaXZlckRpcihvc05hbWUpO1xuICBjb25zdCBwYXRoU3VmZml4ID0gb3NOYW1lID09PSBPUy53aW5kb3dzID8gJy5leGUnIDogJyc7XG4gIGNvbnN0IHBhdGhzID0gYXdhaXQgZnMuZ2xvYihgJHtDRF9FWEVDVVRBQkxFX1BSRUZJWH0qJHtwYXRoU3VmZml4fWAsIHtcbiAgICBjd2Q6IHJvb3REaXIsXG4gICAgYWJzb2x1dGU6IHRydWUsXG4gICAgbm9jYXNlOiB0cnVlLFxuICAgIG5vZGlyOiB0cnVlLFxuICAgIHN0cmljdDogZmFsc2UsXG4gIH0pO1xuICByZXR1cm4gXy5pc0VtcHR5KHBhdGhzKVxuICAgID8gcGF0aC5yZXNvbHZlKHJvb3REaXIsIGAke0NEX0VYRUNVVEFCTEVfUFJFRklYfSR7cGF0aFN1ZmZpeH1gKVxuICAgIDogXy5maXJzdChwYXRocyk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHJldHJpZXZlRGF0YSAodXJsLCBoZWFkZXJzLCBvcHRzID0ge30pIHtcbiAgY29uc3Qge1xuICAgIHRpbWVvdXQgPSA1MDAwLFxuICAgIHJlc3BvbnNlVHlwZSA9ICd0ZXh0JyxcbiAgfSA9IG9wdHM7XG4gIHJldHVybiAoYXdhaXQgYXhpb3Moe1xuICAgIHVybCxcbiAgICBoZWFkZXJzLFxuICAgIHRpbWVvdXQsXG4gICAgcmVzcG9uc2VUeXBlLFxuICB9KSkuZGF0YTtcbn1cblxuY29uc3QgZ2V0T3NOYW1lID0gXy5tZW1vaXplKGZ1bmN0aW9uIGdldE9zTmFtZSAoKSB7XG4gIGlmIChzeXN0ZW0uaXNXaW5kb3dzKCkpIHtcbiAgICByZXR1cm4gT1Mud2luZG93cztcbiAgfVxuICBpZiAoc3lzdGVtLmlzTWFjKCkpIHtcbiAgICByZXR1cm4gT1MubWFjO1xuICB9XG4gIHJldHVybiBPUy5saW51eDtcbn0pO1xuXG5jb25zdCBnZXRPc0luZm8gPSBfLm1lbW9pemUoYXN5bmMgZnVuY3Rpb24gZ2V0T3NJbmZvICgpIHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBnZXRPc05hbWUoKSxcbiAgICBhcmNoOiBhd2FpdCBzeXN0ZW0uYXJjaCgpLFxuICB9O1xufSk7XG5cbmNvbnN0IGdldEJhc2VEcml2ZXJJbnN0YW5jZSA9IF8ubWVtb2l6ZSgoKSA9PiBuZXcgQmFzZURyaXZlcih7fSwgZmFsc2UpKTtcblxuLyoqXG4gKiBHZW5lcmF0ZXMgbG9nIHByZWZpeCBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gb2JqIGxvZyBvd25lciBpbnN0YW5jZVxuICogQHBhcmFtIHtzdHJpbmc/fSBzZXNzaW9uSWQgT3B0aW9uYWwgc2Vzc2lvbiBpZGVudGlmaWVyXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBnZW5lcmF0ZUxvZ1ByZWZpeCAob2JqLCBzZXNzaW9uSWQgPSBudWxsKSB7XG4gIHJldHVybiBnZXRCYXNlRHJpdmVySW5zdGFuY2UoKS5oZWxwZXJzLmdlbmVyYXRlRHJpdmVyTG9nUHJlZml4KG9iaiwgc2Vzc2lvbklkKTtcbn1cblxuXG5leHBvcnQge1xuICBnZXRDaHJvbWVWZXJzaW9uLCBnZXRDaHJvbWVkcml2ZXJEaXIsIGdldENocm9tZWRyaXZlckJpbmFyeVBhdGgsIGdldE9zTmFtZSxcbiAgQ0RfQkFTRV9ESVIsIENEX0NETiwgQ0RfVkVSLCBDSFJPTUVEUklWRVJfQ0hST01FX01BUFBJTkcsIGdldE1vc3RSZWNlbnRDaHJvbWVkcml2ZXIsXG4gIHJldHJpZXZlRGF0YSwgZ2V0T3NJbmZvLCBPUywgWDY0LCBYODYsIEFQUExFX0FSTV9TVUZGSVhFUywgZ2VuZXJhdGVMb2dQcmVmaXgsXG59O1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQSxNQUFNQSxNQUFNLEdBQUdDLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDQyw4QkFBOEIsSUFDcERGLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDRSxtQkFBbUIsSUFDL0IsNkNBQTZDO0FBQUM7QUFDbkQsTUFBTUMsRUFBRSxHQUFHO0VBQ1RDLEtBQUssRUFBRSxPQUFPO0VBQ2RDLE9BQU8sRUFBRSxLQUFLO0VBQ2RDLEdBQUcsRUFBRTtBQUNQLENBQUM7QUFBQztBQUNGLE1BQU1DLEdBQUcsR0FBRyxJQUFJO0FBQUM7QUFDakIsTUFBTUMsR0FBRyxHQUFHLElBQUk7QUFBQztBQUNqQixNQUFNQyxrQkFBa0IsR0FBRyxDQUFDLE9BQU8sRUFBRSxRQUFRLENBQUM7QUFBQztBQUMvQyxNQUFNQyxvQkFBb0IsR0FBRyxjQUFjO0FBQzNDLE1BQU1DLFdBQVcsR0FBRyxxQkFBcUI7QUFRekMsTUFBTUMsYUFBYSxHQUFHQyxlQUFDLENBQUNDLE9BQU8sQ0FBQyxTQUFTRixhQUFhLEdBQUk7RUFDeEQsTUFBTUcsSUFBSSxHQUFHQyxhQUFJLENBQUNDLGlCQUFpQixDQUFDTixXQUFXLEVBQUVPLFVBQVUsQ0FBQztFQUM1RCxJQUFJLENBQUNILElBQUksRUFBRTtJQUNULE1BQU0sSUFBSUksS0FBSyxDQUFFLHNDQUFxQ1IsV0FBWSxpQkFBZ0IsQ0FBQztFQUNyRjtFQUNBLE9BQU9JLElBQUk7QUFDYixDQUFDLENBQUM7QUFHRixNQUFNSywyQkFBMkIsR0FBR0MsT0FBTyxDQUFDQyxhQUFJLENBQUNDLElBQUksQ0FBQ1gsYUFBYSxFQUFFLEVBQUUsUUFBUSxFQUFFLGNBQWMsQ0FBQyxDQUFDO0FBQUM7QUFDbEcsTUFBTVksV0FBVyxHQUFHRixhQUFJLENBQUNDLElBQUksQ0FBQ1gsYUFBYSxFQUFFLEVBQUUsY0FBYyxDQUFDO0FBQUM7QUFFL0QsU0FBU2EseUJBQXlCLENBQUVDLE9BQU8sR0FBR04sMkJBQTJCLEVBQUU7RUFDekUsSUFBSVAsZUFBQyxDQUFDYyxPQUFPLENBQUNELE9BQU8sQ0FBQyxFQUFFO0lBQ3RCLE1BQU0sSUFBSVAsS0FBSyxDQUFDLG1FQUFtRSxDQUFDO0VBQ3RGO0VBQ0EsT0FBT04sZUFBQyxDQUFDZSxJQUFJLENBQUNmLGVBQUMsQ0FBQ2dCLElBQUksQ0FBQ0gsT0FBTyxDQUFDLENBQUNJLElBQUksQ0FBQ0MsZ0NBQWUsQ0FBQyxDQUFDO0FBQ3REO0FBRUEsTUFBTUMsTUFBTSxHQUFHakMsT0FBTyxDQUFDQyxHQUFHLENBQUNpQywrQkFBK0IsSUFDckRsQyxPQUFPLENBQUNDLEdBQUcsQ0FBQ2tDLG9CQUFvQixJQUNoQ1QseUJBQXlCLEVBQUU7QUFBQztBQUVqQyxlQUFlVSxnQkFBZ0IsQ0FBRUMsR0FBRyxFQUFFQyxRQUFRLEVBQUU7RUFDOUMsTUFBTTtJQUFDQztFQUFXLENBQUMsR0FBRyxNQUFNRixHQUFHLENBQUNHLGNBQWMsQ0FBQ0YsUUFBUSxDQUFDO0VBQ3hELE9BQU9DLFdBQVc7QUFDcEI7QUFFQSxTQUFTRSxrQkFBa0IsQ0FBRUMsTUFBTSxHQUFHQyxTQUFTLEVBQUUsRUFBRTtFQUNqRCxPQUFPcEIsYUFBSSxDQUFDcUIsT0FBTyxDQUFDbkIsV0FBVyxFQUFFaUIsTUFBTSxDQUFDO0FBQzFDO0FBRUEsZUFBZUcseUJBQXlCLENBQUVILE1BQU0sR0FBR0MsU0FBUyxFQUFFLEVBQUU7RUFDOUQsTUFBTUcsT0FBTyxHQUFHTCxrQkFBa0IsQ0FBQ0MsTUFBTSxDQUFDO0VBQzFDLE1BQU1LLFVBQVUsR0FBR0wsTUFBTSxLQUFLdEMsRUFBRSxDQUFDRSxPQUFPLEdBQUcsTUFBTSxHQUFHLEVBQUU7RUFDdEQsTUFBTTBDLEtBQUssR0FBRyxNQUFNQyxXQUFFLENBQUNDLElBQUksQ0FBRSxHQUFFdkMsb0JBQXFCLElBQUdvQyxVQUFXLEVBQUMsRUFBRTtJQUNuRUksR0FBRyxFQUFFTCxPQUFPO0lBQ1pNLFFBQVEsRUFBRSxJQUFJO0lBQ2RDLE1BQU0sRUFBRSxJQUFJO0lBQ1pDLEtBQUssRUFBRSxJQUFJO0lBQ1hDLE1BQU0sRUFBRTtFQUNWLENBQUMsQ0FBQztFQUNGLE9BQU96QyxlQUFDLENBQUNjLE9BQU8sQ0FBQ29CLEtBQUssQ0FBQyxHQUNuQnpCLGFBQUksQ0FBQ3FCLE9BQU8sQ0FBQ0UsT0FBTyxFQUFHLEdBQUVuQyxvQkFBcUIsR0FBRW9DLFVBQVcsRUFBQyxDQUFDLEdBQzdEakMsZUFBQyxDQUFDMEMsS0FBSyxDQUFDUixLQUFLLENBQUM7QUFDcEI7QUFFQSxlQUFlUyxZQUFZLENBQUVDLEdBQUcsRUFBRUMsT0FBTyxFQUFFQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLEVBQUU7RUFDcEQsTUFBTTtJQUNKQyxPQUFPLEdBQUcsSUFBSTtJQUNkQyxZQUFZLEdBQUc7RUFDakIsQ0FBQyxHQUFHRixJQUFJO0VBQ1IsT0FBTyxDQUFDLE1BQU0sSUFBQUcsY0FBSyxFQUFDO0lBQ2xCTCxHQUFHO0lBQ0hDLE9BQU87SUFDUEUsT0FBTztJQUNQQztFQUNGLENBQUMsQ0FBQyxFQUFFRSxJQUFJO0FBQ1Y7QUFFQSxNQUFNckIsU0FBUyxHQUFHN0IsZUFBQyxDQUFDQyxPQUFPLENBQUMsU0FBUzRCLFNBQVMsR0FBSTtFQUNoRCxJQUFJc0IsZUFBTSxDQUFDQyxTQUFTLEVBQUUsRUFBRTtJQUN0QixPQUFPOUQsRUFBRSxDQUFDRSxPQUFPO0VBQ25CO0VBQ0EsSUFBSTJELGVBQU0sQ0FBQ0UsS0FBSyxFQUFFLEVBQUU7SUFDbEIsT0FBTy9ELEVBQUUsQ0FBQ0csR0FBRztFQUNmO0VBQ0EsT0FBT0gsRUFBRSxDQUFDQyxLQUFLO0FBQ2pCLENBQUMsQ0FBQztBQUFDO0FBRUgsTUFBTStELFNBQVMsR0FBR3RELGVBQUMsQ0FBQ0MsT0FBTyxDQUFDLGVBQWVxRCxTQUFTLEdBQUk7RUFDdEQsT0FBTztJQUNMQyxJQUFJLEVBQUUxQixTQUFTLEVBQUU7SUFDakIyQixJQUFJLEVBQUUsTUFBTUwsZUFBTSxDQUFDSyxJQUFJO0VBQ3pCLENBQUM7QUFDSCxDQUFDLENBQUM7QUFBQztBQUVILE1BQU1DLHFCQUFxQixHQUFHekQsZUFBQyxDQUFDQyxPQUFPLENBQUMsTUFBTSxJQUFJeUQsc0JBQVUsQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztBQVN4RSxTQUFTQyxpQkFBaUIsQ0FBRUMsR0FBRyxFQUFFQyxTQUFTLEdBQUcsSUFBSSxFQUFFO0VBQ2pELE9BQU9KLHFCQUFxQixFQUFFLENBQUNLLE9BQU8sQ0FBQ0MsdUJBQXVCLENBQUNILEdBQUcsRUFBRUMsU0FBUyxDQUFDO0FBQ2hGIn0=