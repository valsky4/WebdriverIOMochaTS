"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = __importDefault(require("lodash"));
const extension_command_1 = __importDefault(require("./extension-command"));
const constants_1 = require("../constants");
const REQ_PLUGIN_FIELDS = ['pluginName', 'mainClass'];
/**
 * @extends {ExtensionCommand<PluginType>}
 */
class PluginCommand extends extension_command_1.default {
    /**
     *
     * @param {import('./extension-command').ExtensionCommandOptions<PluginType>} opts
     */
    constructor({ config, json }) {
        super({ config, json });
        this.knownExtensions = constants_1.KNOWN_PLUGINS;
    }
    async install({ plugin, installType, packageName }) {
        return await super._install({
            installSpec: plugin,
            installType,
            packageName,
        });
    }
    async uninstall({ plugin }) {
        return await super._uninstall({ installSpec: plugin });
    }
    async update({ plugin, unsafe }) {
        return await super._update({ installSpec: plugin, unsafe });
    }
    async run({ plugin, scriptName, extraArgs }) {
        return await super._run({ installSpec: plugin, scriptName, extraArgs });
    }
    getPostInstallText({ extName, extData }) {
        return `Plugin ${extName}@${extData.version} successfully installed`.green;
    }
    /**
     * Validates fields in `appium` field of `driverMetadata`
     *
     * For any `package.json` fields which a driver requires, validate the type of
     * those fields on the `package.json` data, throwing an error if anything is
     * amiss.
     * @param {import('appium/types').ExtMetadata<PluginType>} pluginMetadata
     * @param {string} installSpec
     * @returns {void}
     */
    validateExtensionFields(pluginMetadata, installSpec) {
        const missingFields = REQ_PLUGIN_FIELDS.reduce((acc, field) => (pluginMetadata[field] ? acc : [...acc, field]), []);
        if (!lodash_1.default.isEmpty(missingFields)) {
            throw new Error(`Installed plugin "${installSpec}" did not expose correct fields for compability ` +
                `with Appium. Missing fields: ${JSON.stringify(missingFields)}`);
        }
    }
}
exports.default = PluginCommand;
/**
 * @typedef {import('@appium/types').PluginType} PluginType
 */
//# sourceMappingURL=plugin-command.js.map