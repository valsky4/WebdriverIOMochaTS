"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.helpers = exports.default = exports.commands = void 0;
require("source-map-support/register");
let commands = {},
  helpers = {},
  extensions = {};
exports.helpers = helpers;
exports.commands = commands;
commands.pressKeyCode = async function (keycode, metastate = null, flags = null) {
  return await this.uiautomator2.jwproxy.command('/appium/device/press_keycode', 'POST', {
    keycode,
    metastate,
    flags
  });
};
commands.longPressKeyCode = async function (keycode, metastate = null, flags = null) {
  return await this.uiautomator2.jwproxy.command('/appium/device/long_press_keycode', 'POST', {
    keycode,
    metastate,
    flags
  });
};
commands.doSwipe = async function (swipeOpts) {
  return await this.uiautomator2.jwproxy.command(`/touch/perform`, 'POST', swipeOpts);
};
commands.doDrag = async function (dragOpts) {
  return await this.uiautomator2.jwproxy.command(`/touch/drag`, 'POST', dragOpts);
};
commands.getOrientation = async function () {
  return await this.uiautomator2.jwproxy.command(`/orientation`, 'GET', {});
};
commands.setOrientation = async function (orientation) {
  orientation = orientation.toUpperCase();
  return await this.uiautomator2.jwproxy.command(`/orientation`, 'POST', {
    orientation
  });
};
Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb21tYW5kcyIsImhlbHBlcnMiLCJleHRlbnNpb25zIiwiZXhwb3J0cyIsInByZXNzS2V5Q29kZSIsImtleWNvZGUiLCJtZXRhc3RhdGUiLCJmbGFncyIsInVpYXV0b21hdG9yMiIsImp3cHJveHkiLCJjb21tYW5kIiwibG9uZ1ByZXNzS2V5Q29kZSIsImRvU3dpcGUiLCJzd2lwZU9wdHMiLCJkb0RyYWciLCJkcmFnT3B0cyIsImdldE9yaWVudGF0aW9uIiwic2V0T3JpZW50YXRpb24iLCJvcmllbnRhdGlvbiIsInRvVXBwZXJDYXNlIiwiT2JqZWN0IiwiYXNzaWduIiwiX2RlZmF1bHQiLCJkZWZhdWx0Il0sInNvdXJjZXMiOlsiLi4vLi4vLi4vbGliL2NvbW1hbmRzL2FjdGlvbnMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXG5cbmxldCBjb21tYW5kcyA9IHt9LCBoZWxwZXJzID0ge30sIGV4dGVuc2lvbnMgPSB7fTtcblxuY29tbWFuZHMucHJlc3NLZXlDb2RlID0gYXN5bmMgZnVuY3Rpb24gKGtleWNvZGUsIG1ldGFzdGF0ZSA9IG51bGwsIGZsYWdzID0gbnVsbCkge1xuICByZXR1cm4gYXdhaXQgdGhpcy51aWF1dG9tYXRvcjIuandwcm94eS5jb21tYW5kKCcvYXBwaXVtL2RldmljZS9wcmVzc19rZXljb2RlJywgJ1BPU1QnLCB7XG4gICAga2V5Y29kZSxcbiAgICBtZXRhc3RhdGUsXG4gICAgZmxhZ3MsXG4gIH0pO1xufTtcblxuY29tbWFuZHMubG9uZ1ByZXNzS2V5Q29kZSA9IGFzeW5jIGZ1bmN0aW9uIChrZXljb2RlLCBtZXRhc3RhdGUgPSBudWxsLCBmbGFncyA9IG51bGwpIHtcbiAgcmV0dXJuIGF3YWl0IHRoaXMudWlhdXRvbWF0b3IyLmp3cHJveHkuY29tbWFuZCgnL2FwcGl1bS9kZXZpY2UvbG9uZ19wcmVzc19rZXljb2RlJywgJ1BPU1QnLCB7XG4gICAga2V5Y29kZSxcbiAgICBtZXRhc3RhdGUsXG4gICAgZmxhZ3NcbiAgfSk7XG59O1xuXG5jb21tYW5kcy5kb1N3aXBlID0gYXN5bmMgZnVuY3Rpb24gKHN3aXBlT3B0cykge1xuICByZXR1cm4gYXdhaXQgdGhpcy51aWF1dG9tYXRvcjIuandwcm94eS5jb21tYW5kKGAvdG91Y2gvcGVyZm9ybWAsICdQT1NUJywgc3dpcGVPcHRzKTtcbn07XG5cbmNvbW1hbmRzLmRvRHJhZyA9IGFzeW5jIGZ1bmN0aW9uIChkcmFnT3B0cykge1xuICByZXR1cm4gYXdhaXQgdGhpcy51aWF1dG9tYXRvcjIuandwcm94eS5jb21tYW5kKGAvdG91Y2gvZHJhZ2AsICdQT1NUJywgZHJhZ09wdHMpO1xufTtcblxuY29tbWFuZHMuZ2V0T3JpZW50YXRpb24gPSBhc3luYyBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBhd2FpdCB0aGlzLnVpYXV0b21hdG9yMi5qd3Byb3h5LmNvbW1hbmQoYC9vcmllbnRhdGlvbmAsICdHRVQnLCB7fSk7XG59O1xuXG5jb21tYW5kcy5zZXRPcmllbnRhdGlvbiA9IGFzeW5jIGZ1bmN0aW9uIChvcmllbnRhdGlvbikge1xuICBvcmllbnRhdGlvbiA9IG9yaWVudGF0aW9uLnRvVXBwZXJDYXNlKCk7XG4gIHJldHVybiBhd2FpdCB0aGlzLnVpYXV0b21hdG9yMi5qd3Byb3h5LmNvbW1hbmQoYC9vcmllbnRhdGlvbmAsICdQT1NUJywge29yaWVudGF0aW9ufSk7XG59O1xuXG5PYmplY3QuYXNzaWduKGV4dGVuc2lvbnMsIGNvbW1hbmRzLCBoZWxwZXJzKTtcbmV4cG9ydCB7IGNvbW1hbmRzLCBoZWxwZXJzIH07XG5leHBvcnQgZGVmYXVsdCBleHRlbnNpb25zO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBRUEsSUFBSUEsUUFBUSxHQUFHLENBQUMsQ0FBQztFQUFFQyxPQUFPLEdBQUcsQ0FBQyxDQUFDO0VBQUVDLFVBQVUsR0FBRyxDQUFDLENBQUM7QUFBQ0MsT0FBQSxDQUFBRixPQUFBLEdBQUFBLE9BQUE7QUFBQUUsT0FBQSxDQUFBSCxRQUFBLEdBQUFBLFFBQUE7QUFFakRBLFFBQVEsQ0FBQ0ksWUFBWSxHQUFHLGdCQUFnQkMsT0FBTyxFQUFFQyxTQUFTLEdBQUcsSUFBSSxFQUFFQyxLQUFLLEdBQUcsSUFBSSxFQUFFO0VBQy9FLE9BQU8sTUFBTSxJQUFJLENBQUNDLFlBQVksQ0FBQ0MsT0FBTyxDQUFDQyxPQUFPLENBQUMsOEJBQThCLEVBQUUsTUFBTSxFQUFFO0lBQ3JGTCxPQUFPO0lBQ1BDLFNBQVM7SUFDVEM7RUFDRixDQUFDLENBQUM7QUFDSixDQUFDO0FBRURQLFFBQVEsQ0FBQ1csZ0JBQWdCLEdBQUcsZ0JBQWdCTixPQUFPLEVBQUVDLFNBQVMsR0FBRyxJQUFJLEVBQUVDLEtBQUssR0FBRyxJQUFJLEVBQUU7RUFDbkYsT0FBTyxNQUFNLElBQUksQ0FBQ0MsWUFBWSxDQUFDQyxPQUFPLENBQUNDLE9BQU8sQ0FBQyxtQ0FBbUMsRUFBRSxNQUFNLEVBQUU7SUFDMUZMLE9BQU87SUFDUEMsU0FBUztJQUNUQztFQUNGLENBQUMsQ0FBQztBQUNKLENBQUM7QUFFRFAsUUFBUSxDQUFDWSxPQUFPLEdBQUcsZ0JBQWdCQyxTQUFTLEVBQUU7RUFDNUMsT0FBTyxNQUFNLElBQUksQ0FBQ0wsWUFBWSxDQUFDQyxPQUFPLENBQUNDLE9BQU8sQ0FBRSxnQkFBZSxFQUFFLE1BQU0sRUFBRUcsU0FBUyxDQUFDO0FBQ3JGLENBQUM7QUFFRGIsUUFBUSxDQUFDYyxNQUFNLEdBQUcsZ0JBQWdCQyxRQUFRLEVBQUU7RUFDMUMsT0FBTyxNQUFNLElBQUksQ0FBQ1AsWUFBWSxDQUFDQyxPQUFPLENBQUNDLE9BQU8sQ0FBRSxhQUFZLEVBQUUsTUFBTSxFQUFFSyxRQUFRLENBQUM7QUFDakYsQ0FBQztBQUVEZixRQUFRLENBQUNnQixjQUFjLEdBQUcsa0JBQWtCO0VBQzFDLE9BQU8sTUFBTSxJQUFJLENBQUNSLFlBQVksQ0FBQ0MsT0FBTyxDQUFDQyxPQUFPLENBQUUsY0FBYSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQztBQUMzRSxDQUFDO0FBRURWLFFBQVEsQ0FBQ2lCLGNBQWMsR0FBRyxnQkFBZ0JDLFdBQVcsRUFBRTtFQUNyREEsV0FBVyxHQUFHQSxXQUFXLENBQUNDLFdBQVcsRUFBRTtFQUN2QyxPQUFPLE1BQU0sSUFBSSxDQUFDWCxZQUFZLENBQUNDLE9BQU8sQ0FBQ0MsT0FBTyxDQUFFLGNBQWEsRUFBRSxNQUFNLEVBQUU7SUFBQ1E7RUFBVyxDQUFDLENBQUM7QUFDdkYsQ0FBQztBQUVERSxNQUFNLENBQUNDLE1BQU0sQ0FBQ25CLFVBQVUsRUFBRUYsUUFBUSxFQUFFQyxPQUFPLENBQUM7QUFBQyxJQUFBcUIsUUFBQSxHQUU5QnBCLFVBQVU7QUFBQUMsT0FBQSxDQUFBb0IsT0FBQSxHQUFBRCxRQUFBIn0=