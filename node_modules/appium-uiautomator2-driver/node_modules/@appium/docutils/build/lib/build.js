"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildReference = exports.buildTypedoc = exports.runTypedoc = void 0;
const logger_1 = __importDefault(require("./logger"));
const support_1 = require("@appium/support");
const lodash_1 = __importDefault(require("lodash"));
const node_path_1 = __importDefault(require("node:path"));
const typedoc_1 = require("typedoc");
const error_1 = require("./error");
const util_1 = require("./util");
const glob_1 = __importDefault(require("glob"));
const constants_1 = require("./constants");
/**
 * Replaces TypeDoc's homebrew "glob" implementation with a real one
 *
 * This cannot be done via `require('typedoc')` or `import` due to the file being excluded
 * from the export map in its `package.json`.
 * @see https://github.com/TypeStrong/typedoc/issues/2151
 */
const monkeyPatchGlob = lodash_1.default.once((pkgRoot) => {
    const tdFs = require(node_path_1.default.join(pkgRoot, 'node_modules', 'typedoc', 'dist', 'lib', 'utils', 'fs.js'));
    tdFs.glob = glob_1.default.sync;
});
/**
 * Executes TypeDoc in the current process
 *
 * Monkeypatch's TypeDoc's homebrew "glob" implementation because it is broken
 * @param pkgRoot - Package root path
 * @param opts - TypeDoc options
 */
function runTypedoc(pkgRoot, opts) {
    monkeyPatchGlob(pkgRoot);
    const app = new typedoc_1.Application();
    app.options.addReader(new typedoc_1.TSConfigReader());
    app.bootstrap(opts);
    return app.convert();
}
exports.runTypedoc = runTypedoc;
async function buildTypedoc({ typedocJson: typeDocJsonPath, cwd = process.cwd(), packageJson: packageJsonPath, tsconfigJson: tsconfig, title, } = {}) {
    typeDocJsonPath = typeDocJsonPath ?? (await (0, util_1.getTypedocJsonPath)(cwd, packageJsonPath));
    const pkgRoot = support_1.fs.findRoot(cwd);
    const relativePath = (0, util_1.relative)(cwd);
    const relativeTypedocJsonPath = relativePath(typeDocJsonPath);
    logger_1.default.debug(`Using ${relativeTypedocJsonPath} as typedoc.json`);
    let typedocJson;
    try {
        typedocJson = await (0, util_1.readJson)(typeDocJsonPath);
    }
    catch (err) {
        throw new error_1.DocutilsError(`Could not read ${relativeTypedocJsonPath}; please execute "appium docutils init" to create it`);
    }
    const out = typedocJson.out ??
        node_path_1.default.relative(typeDocJsonPath, node_path_1.default.join(pkgRoot, constants_1.DEFAULT_REL_TYPEDOC_OUT_PATH));
    const finalTypedocJson = lodash_1.default.defaultsDeep(lodash_1.default.pickBy({ tsconfig, name: title, out }, (value, key) => value && key !== constants_1.NAME_SCHEMA));
    try {
        runTypedoc(pkgRoot, finalTypedocJson);
        logger_1.default.success(`API docs built at ${relativePath(out)}`);
    }
    catch (err) {
        logger_1.default.error(err);
    }
}
exports.buildTypedoc = buildTypedoc;
async function buildReference(opts = {}) {
    await buildTypedoc(opts);
}
exports.buildReference = buildReference;
//# sourceMappingURL=build.js.map