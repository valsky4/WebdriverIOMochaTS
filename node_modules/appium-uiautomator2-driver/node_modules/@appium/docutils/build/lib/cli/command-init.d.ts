import { CommandModule, InferredOptionTypes } from 'yargs';
declare const opts: {
    readonly copyright: {
        readonly description: "Copyright notice";
        readonly group: "MkDocs Config:";
        readonly nargs: 1;
        readonly requiresArg: true;
        readonly type: "string";
    };
    readonly dir: {
        readonly default: ".";
        readonly defaultDescription: "(current directory)";
        readonly description: "Directory of package";
        readonly group: "Paths:";
        readonly normalize: true;
        readonly type: "string";
    };
    readonly 'dry-run': {
        readonly describe: "Do not write any files; show what would be done";
        readonly group: "Initialization Behavior:";
        readonly type: "boolean";
    };
    readonly force: {
        readonly alias: "f";
        readonly describe: "Overwrite existing configurations";
        readonly group: "Initialization Behavior:";
        readonly type: "boolean";
    };
    readonly include: {
        readonly alias: "i";
        readonly array: true;
        readonly coerce: (value: string | string[]) => string[];
        readonly description: "Files to include in compilation (globs OK)";
        readonly nargs: 1;
        readonly requiresArg: true;
        readonly type: "string";
    };
    readonly mkdocs: {
        readonly default: true;
        readonly description: "Create mkdocs.yml if needed";
        readonly group: "Initialization Behavior:";
        readonly type: "boolean";
    };
    readonly 'mkdocs-yml': {
        readonly defaultDescription: "./mkdocs.yml";
        readonly description: "Path to mkdocs.yml";
        readonly group: "Paths:";
        readonly nargs: 1;
        readonly normalize: true;
        readonly requiresArg: true;
        readonly type: "string";
    };
    readonly 'package-json': {
        readonly defaultDescription: "./package.json";
        readonly describe: "Path to package.json";
        readonly group: "Paths:";
        readonly nargs: 1;
        readonly normalize: true;
        readonly requiresArg: true;
        readonly type: "string";
    };
    readonly python: {
        readonly default: true;
        readonly description: "Install Python dependencies if needed";
        readonly group: "Initialization Behavior:";
        readonly type: "boolean";
    };
    readonly 'python-path': {
        readonly defaultDescription: "(derived from shell)";
        readonly description: "Path to python 3 executable";
        readonly group: "Paths:";
        readonly nargs: 1;
        readonly normalize: true;
        readonly requiresArg: true;
        readonly type: "string";
    };
    readonly 'repo-name': {
        readonly defaultDescription: "(derived from --repo-url)";
        readonly description: "Name of extension repository";
        readonly group: "MkDocs Config:";
        readonly nargs: 1;
        readonly requiresArg: true;
        readonly type: "string";
    };
    readonly 'repo-url': {
        readonly defaultDescription: "(from package.json)";
        readonly description: "URL of extension repository";
        readonly group: "MkDocs Config:";
        readonly nargs: 1;
        readonly requiresArg: true;
        readonly type: "string";
    };
    readonly 'site-description': {
        readonly defaultDescription: "(from package.json)";
        readonly description: "Site description";
        readonly group: "MkDocs Config:";
        readonly nargs: 1;
        readonly requiresArg: true;
        readonly type: "string";
    };
    readonly 'site-name': {
        readonly defaultDescription: "(extension package name)";
        readonly description: "Name of site";
        readonly group: "MkDocs Config:";
        readonly nargs: 1;
        readonly requiresArg: true;
        readonly type: "string";
    };
    readonly 'tsconfig-json': {
        readonly defaultDescription: "./tsconfig.json";
        readonly describe: "Path to tsconfig.json";
        readonly group: "Paths:";
        readonly nargs: 1;
        readonly normalize: true;
        readonly requiresArg: true;
        readonly type: "string";
    };
    readonly typedoc: {
        readonly default: true;
        readonly description: "Create typedoc.json if needed";
        readonly group: "Initialization Behavior:";
        readonly type: "boolean";
    };
    readonly 'typedoc-json': {
        readonly defaultDescription: "./typedoc.json";
        readonly describe: "Path to typedoc.json";
        readonly group: "Paths:";
        readonly nargs: 1;
        readonly normalize: true;
        readonly requiresArg: true;
        readonly type: "string";
    };
    readonly typescript: {
        readonly default: true;
        readonly description: "Create tsconfig.json if needed";
        readonly group: "Initialization Behavior:";
        readonly type: "boolean";
    };
};
declare type InitOptions = InferredOptionTypes<typeof opts>;
declare const initCommand: CommandModule<{}, InitOptions>;
export default initCommand;
//# sourceMappingURL=command-init.d.ts.map