import { NormalizedPackageJson } from 'read-pkg';
import { JsonValue, JsonObject } from 'type-fest';
export declare type TaskSpecificOpts<Opts extends ScaffoldTaskOptions> = Omit<Opts, 'overwrite' | 'cwd' | 'packageJson' | 'dest' | 'dryRun'>;
export declare type ScaffoldTask<Opts extends ScaffoldTaskOptions, T extends JsonObject> = (opts: Opts) => Promise<ScaffoldTaskResult<T>>;
/**
 * Factory for a {@linkcode ScaffoldTask}.
 *
 * @param defaultFilename Default file to create
 * @param defaultContent Default content to use
 * @param description Description of task
 * @param opts Options
 * @returns A scaffold task
 */
export declare function createScaffoldTask<Opts extends ScaffoldTaskOptions, T extends JsonObject>(defaultFilename: string, defaultContent: T, description: string, { transform, deserialize, serialize, }?: CreateScaffoldTaskOptions<Opts, T>): ScaffoldTask<Opts, T>;
export declare type ScaffoldTaskTransformer<Opts extends ScaffoldTaskOptions, T extends JsonValue> = (content: Readonly<T>, opts: TaskSpecificOpts<Opts>, pkg: NormalizedPackageJson) => T;
export declare type ScaffoldTaskDeserializer<T extends JsonValue> = (content: string) => T;
export declare type ScaffoldTaskSerializer<T extends JsonValue> = (content: T) => string;
export interface CreateScaffoldTaskOptions<Opts extends ScaffoldTaskOptions, T extends JsonValue> {
    transform?: ScaffoldTaskTransformer<Opts, T>;
    deserialize?: ScaffoldTaskDeserializer<T>;
    serialize?: ScaffoldTaskSerializer<T>;
}
export interface ScaffoldTaskOptions {
    /**
     * Current working directory
     */
    cwd?: string;
    /**
     * Destination file
     */
    dest?: string;
    /**
     * If `true` will not write files
     */
    dryRun?: boolean;
    /**
     * If `true` will overwrite fields in `typedoc.json`
     */
    overwrite?: boolean;
    /**
     * Path to `package.json`
     */
    packageJson?: string;
}
export interface ScaffoldTaskResult<T> {
    content: T;
    path: string;
}
//# sourceMappingURL=init-task.d.ts.map