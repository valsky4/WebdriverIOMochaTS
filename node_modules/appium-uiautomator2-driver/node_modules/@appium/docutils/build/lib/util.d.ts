/**
 * Utilities
 * @module
 */
import _ from 'lodash';
import type { SubProcess } from 'teen_process';
/**
 * Computes a relative path, prepending `./`
 */
export declare const relative: _.CurriedFunction2<string, string, string>;
/**
 * A stopwatch-like thing
 *
 * Used for displaying elapsed time in milliseconds
 * @param id - Unique identifier
 * @returns Function that returns the elapsed time in milliseconds
 */
export declare function stopwatch(id: string): () => number;
export declare namespace stopwatch {
    var cache: Map<string, number>;
}
export declare type TupleToObject<T extends readonly any[], M extends Record<Exclude<keyof T, keyof any[]>, PropertyKey>> = {
    [K in Exclude<keyof T, keyof any[]> as M[K]]: T[K];
};
/**
 * Type guard to narrow an array to a string array
 * @param value any value
 * @returns `true` if the array is `string[]`
 */
export declare const isStringArray: (value: any) => value is string[];
/**
 * Converts an object of string values to an array of arguments for CLI
 *
 * Supports `boolean` and `number` values as well.  `boolean`s are assumed to be flags which default
 * to `false`, so they will only be added to the array if the value is `true`.
 */
export declare const argify: (obj: Record<string, string | number | boolean | undefined>) => string[];
/**
 * Conversion of the parameters of {@linkcode Subprocess.start} to an object.
 */
export declare type TeenProcessSubprocessStartOpts = Partial<TupleToObject<Parameters<SubProcess['start']>, ['startDetector', 'detach', 'timeoutMs']>>;
//# sourceMappingURL=util.d.ts.map