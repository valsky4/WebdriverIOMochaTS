"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MkDocsValidator = void 0;
const lodash_1 = __importDefault(require("lodash"));
const teen_process_1 = require("teen_process");
const constants_1 = require("../constants");
const error_1 = require("../error");
const fs_1 = require("../fs");
const validator_1 = require("./validator");
/**
 * Matches the MkDocs version string from `mkdocs --version`
 */
const MKDOCS_VERSION_REGEX = /mkdocs,\s+version\s+(\d+\.\d+\.\S+)/;
class MkDocsValidator extends validator_1.DocutilsValidator {
    async validateMkDocs() {
        let mkDocsPath;
        try {
            mkDocsPath = await (0, fs_1.whichMkDocs)();
        }
        catch {
            // _pretty sure_ the exception code is always ENOENT
            return this.fail(`Could not find ${constants_1.NAME_MKDOCS} executable in PATH. If it is installed, check your PATH environment variable.`);
        }
        let rawMkDocsVersion;
        try {
            ({ stdout: rawMkDocsVersion } = await (0, teen_process_1.exec)(mkDocsPath, ['--version']));
        }
        catch (err) {
            return this.fail(`${mkDocsPath} --version failed: ${err}`);
        }
        const match = rawMkDocsVersion.match(MKDOCS_VERSION_REGEX);
        if (match) {
            const version = match[1];
            const reqs = await this.parseRequirementsTxt();
            const mkDocsPipPkg = lodash_1.default.find(reqs, { name: constants_1.NAME_MKDOCS });
            if (!mkDocsPipPkg) {
                throw new error_1.DocutilsError(`No ${constants_1.NAME_MKDOCS} package in ${constants_1.REQUIREMENTS_TXT_PATH}. This is a bug.`);
            }
            const { version: mkDocsReqdVersion } = mkDocsPipPkg;
            if (version !== mkDocsReqdVersion) {
                return this.fail(`${constants_1.NAME_MKDOCS} at ${mkDocsPath} is v${version}, but ${constants_1.REQUIREMENTS_TXT_PATH} requires v${mkDocsReqdVersion}`);
            }
        }
        else {
            throw new error_1.DocutilsError(`Could not parse version from "${mkDocsPath} --version". This is a bug. Output was ${rawMkDocsVersion}`);
        }
        this.ok('MkDocs install OK');
    }
}
exports.MkDocsValidator = MkDocsValidator;
//# sourceMappingURL=mkdocs-validator.js.map