/**
 * Converts code parsed by TypeDoc into a data structure describing the commands and execute methods, which will later be used to create new {@linkcode DeclarationReflection} instances in the TypeDoc context.
 *
 * The logic in this module is highly dependent on Appium's extension API, and is further dependent on specific usages of TS types.  Anything that will be parsed successfully by this module must use a `const` type alias in TS parlance.  For example:
 *
 * ```ts
 * const METHOD_MAP = {
 *   '/status': {
 *     GET: {command: 'getStatus'}
 *   },
 *   // ...
 * } as const; // <-- required
 * ```
 * @module
 */
import { Context } from 'typedoc';
import { AppiumPluginLogger } from '../logger';
import { ModuleCommands } from '../model';
/**
 * Name of the static `newMethodMap` property in a Driver
 */
export declare const NAME_NEW_METHOD_MAP = "newMethodMap";
/**
 * Name of the static `executeMethodMap` property in a Driver
 */
export declare const NAME_EXECUTE_METHOD_MAP = "executeMethodMap";
/**
 * Name of the builtin method map in `@appium/base-driver`
 */
export declare const NAME_METHOD_MAP = "METHOD_MAP";
/**
 * Name of the field in a method map's parameters prop which contains required parameters
 */
export declare const NAME_REQUIRED = "required";
/**
 * Name of the field in a method map's parameters prop which contains optional parameters
 */
export declare const NAME_OPTIONAL = "optional";
/**
 * Name of the field in an _execute_ method map which contains parameters
 */
export declare const NAME_PARAMS = "params";
/**
 * Name of the command in a method map
 */
export declare const NAME_COMMAND = "command";
/**
 * Name of the field in a _regular_ method map which contains parameters
 */
export declare const NAME_PAYLOAD_PARAMS = "payloadParams";
/**
 * Name of the module which contains the builtin method map
 */
export declare const NAME_BUILTIN_COMMAND_MODULE = "@appium/base-driver";
/**
 * Converts declarations to information about Appium commands
 */
export declare class CommandConverter {
    #private;
    /**
     * Creates a child logger for this instance
     * @param ctx Typedoc Context
     * @param log Logger
     */
    constructor(ctx: Context, log: AppiumPluginLogger);
    /**
     * Converts declarations into command information
     *
     * @returns Command info for entire project
     */
    convert(): ModuleCommands;
}
/**
 * Converts declarations into information about the commands found within
 * @param ctx - Current TypeDoc context
 * @param log - Logger
 * @returns All commands found in the project
 */
export declare function convertCommands(ctx: Context, log: AppiumPluginLogger): ModuleCommands;
//# sourceMappingURL=converter.d.ts.map