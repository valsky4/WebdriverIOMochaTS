import { DeclarationReflection } from 'typedoc';
import { AppiumPluginLogger } from '../logger';
import { ExecMethodDataSet } from '../model';
import { ExecMethodDeclarationReflection, KnownMethods } from './types';
/**
 * Options for {@linkcode convertExecuteMethodMap}
 */
export interface ConvertExecuteMethodMapOpts {
    /**
     * Logger
     */
    log: AppiumPluginLogger;
    /**
     * Probably a class
     */
    parentRefl: DeclarationReflection;
    /**
     * The static `executeMethodMap` property of the class
     */
    execMethodMapRefl: ExecMethodDeclarationReflection;
    /**
     * Builtin methods from `@appium/types`
     */
    builtinMethods: KnownMethods;
    /**
     * If `true`, do not add a route if the method it references cannot be found
     */
    strict?: boolean;
    /**
     * If `true`, handle commands as `PluginCommand`s, which affects which parameters get used
     */
    isPluginCommand?: boolean;
}
/**
 * Gathers info about an `executeMethodMap` prop in a driver
 * @param opts Options (mostly non-optional)
 * @returns List of "execute commands", if any
 */
export declare function convertExecuteMethodMap({ log, parentRefl, execMethodMapRefl, builtinMethods, strict, isPluginCommand, }: ConvertExecuteMethodMapOpts): ExecMethodDataSet;
//# sourceMappingURL=exec-method-map.d.ts.map