import _ from 'lodash';
import { Comment, DeclarationReflection, ParameterReflection, SignatureReflection } from 'typedoc';
import { CommandMethodDeclarationReflection, CommentSourceType } from '../converter';
import { AppiumPluginLogger } from '../logger';
import { AllowedHttpMethod, Command, Route } from './types';
/**
 * Abstract representation of metadata for some sort of Appium command
 */
export declare abstract class BaseCommandData {
    /**
     * Loggher
     */
    protected readonly log: AppiumPluginLogger;
    /**
     * The method name of the command handler.
     */
    readonly command: string;
    /**
     * The comment to display for the command, if any exists
     */
    readonly comment?: Comment;
    /**
     * Code to describe how and where {@linkcode comment} came from.
     *
     * For debugging purposes mainly
     */
    readonly commentSource?: CommentSourceType;
    /**
     * If `true`, this command is from a Plugin (not a Driver)
     */
    readonly isPluginCommand: boolean;
    /**
     * Actual method reflection.
     *
     * @todo Determine if this should be required
     */
    readonly methodRefl?: CommandMethodDeclarationReflection;
    /**
     * List of optional parameter names derived from a method map
     */
    readonly optionalParams?: string[];
    /**
     * List of required parameter names derived from a method map
     */
    readonly requiredParams?: string[];
    /**
     * Loops through signatures of the command's method declaration and returns the first that is a
     * `CallSignatureReflection` (if any).  This is what we think of when we think "function signature"
     */
    static findCallSignature: ((cmd: BaseCommandData) => import("../converter").CallSignatureReflection | undefined) & _.MemoizedFunction;
    /**
     * Returns a list of `ParameterReflection` objects in the command's method declaration;
     * rewrites them to prefer the method map parameter list (and the param names)
     **/
    static rewriteParameters: ((cmd: BaseCommandData) => ParameterReflection[]) & _.MemoizedFunction;
    /**
     * Rewrites a method's return value for documentation.
     *
     * Given a command having a method declaration, creates a clone of its call signature wherein the
     * return type is unwrapped from `Promise`.  In other words, if a method returns `Promise<T>`,
     * this changes the return type in the signature to `T`.
     *
     * Note that the return type of a command's method declaration should always be a `ReferenceType` having
     * name `Promise`.
     */
    static unwrapSignatureType: ((cmd: BaseCommandData) => SignatureReflection | undefined) & _.MemoizedFunction;
    /**
     * The thing which the method is a member of for documentation purposes
     */
    parentRefl?: DeclarationReflection;
    constructor(log: AppiumPluginLogger, command: Command, opts?: CommandDataOpts);
    /**
     * Returns `true` if the method or execute map defined parameters for this command
     */
    get hasCommandParams(): boolean;
    /**
     * Gets a list of function parameters (for use in rendering)
     */
    get parameters(): ParameterReflection[];
    /**
     * Gets the call signature (for use in rendering)
     */
    get signature(): SignatureReflection | undefined;
    /**
     * Should create a shallow clone of the implementing instance
     * @param opts New options to pass to the new instance
     */
    abstract clone(opts: CommandDataOpts): BaseCommandData;
}
/**
 * Options for {@linkcode CommandData} and {@linkcode ExecMethodData} constructors
 */
export interface CommandDataOpts {
    /**
     * The comment to display for the command, if any exists
     */
    comment?: Comment;
    /**
     * Name of the reference which the comment is derived from.
     *
     * For debugging purposes mainly
     */
    commentSource?: CommentSourceType;
    /**
     * If `true`, `refl` represents a `PluginCommand`, wherein we will ignore
     * the first two parameters altogether.
     */
    isPluginCommand?: boolean;
    /**
     * List of optional parameter names derived from a method map
     */
    optionalParams?: string[];
    /**
     * The thing which the method is a member of for documentation purposes
     */
    parentRefl?: DeclarationReflection;
    /**
     * Actual method reflection.
     *
     * @todo Determine if this should be required
     */
    refl?: CommandMethodDeclarationReflection;
    /**
     * List of required parameter names derived from a method map
     */
    requiredParams?: string[];
}
/**
 * Represents a generic WD or Appium-specific endpoint
 */
export declare class CommandData extends BaseCommandData {
    /**
     * The HTTP method of the route
     */
    readonly httpMethod: AllowedHttpMethod;
    /**
     * The route of the command
     */
    readonly route: Route;
    constructor(log: AppiumPluginLogger, command: Command, httpMethod: AllowedHttpMethod, route: Route, opts?: CommandDataOpts);
    /**
     * Creates a **shallow** clone of this instance.
     *
     * Keeps props {@linkcode BaseCommandData.command command},
     * {@linkcode CommandData.httpMethod httpMethod} and
     * {@linkcode CommandData.route route}, then applies any other options.
     * @param opts Options to apply. _Note:_ you probably want to provide a new `parentRefl`.
     * @returns Cloned instance
     */
    clone(opts?: CommandDataOpts): CommandData;
}
/**
 * Represents an "execute command" ("execute method")
 *
 * Each will have a unique `script` property which is provided as the script to run via the
 * `execute` WD endpoint.
 *
 * All of these share the same `execute` route, so it is omitted from this interface.
 */
export declare class ExecMethodData extends BaseCommandData {
    /**
     * The name/identifier of the execute script
     *
     * This is different than the method name.
     */
    readonly script: string;
    constructor(log: AppiumPluginLogger, command: Command, script: string, opts?: CommandDataOpts);
    /**
     * Creates a **shallow** clone of this instance.
     *
     * Keeps props {@linkcode BaseCommandData.command command}, {@linkcode ExecMethod.script script},
     * then applies any other options.
     * @param opts Options to apply
     * @returns Cloned instance
     */
    clone(opts: CommandDataOpts): ExecMethodData;
}
//# sourceMappingURL=command-data.d.ts.map