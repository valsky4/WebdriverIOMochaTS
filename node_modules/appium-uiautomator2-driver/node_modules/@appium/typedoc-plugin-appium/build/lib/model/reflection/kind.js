"use strict";
/**
 * Declares new "kinds" within TypeDoc.
 *
 * A "kind" is a way for TypeDoc to understand how to document something.  Mostly, these have a 1:1 relationship with some sort of TypeScript concept.  This is unsuitable for our purposes, since there's no notion of a "command" or "execute method" in TypeScript.  To that end, we must create new ones.
 *
 * Note that _creating new `ReflectionKind`s is a hack_ and is not supported by TypeDoc. This is the reason you will see `as any` wherever a {@linkcode AppiumPluginReflectionKind} is used.
 *
 * @module
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppiumPluginReflectionKind = void 0;
const utils_1 = require("./utils");
/**
 * Extends the TypeDoc's `ReflectionKind` to add namespaced kinds
 */
var AppiumPluginReflectionKind;
(function (AppiumPluginReflectionKind) {
    AppiumPluginReflectionKind[AppiumPluginReflectionKind["Driver"] = (0, utils_1.addReflectionKind)('Driver')] = "Driver";
    AppiumPluginReflectionKind[AppiumPluginReflectionKind["Plugin"] = (0, utils_1.addReflectionKind)('Plugin')] = "Plugin";
    AppiumPluginReflectionKind[AppiumPluginReflectionKind["Command"] = (0, utils_1.addReflectionKind)('Command')] = "Command";
    AppiumPluginReflectionKind[AppiumPluginReflectionKind["ExecuteMethod"] = (0, utils_1.addReflectionKind)('ExecuteMethod')] = "ExecuteMethod";
    AppiumPluginReflectionKind[AppiumPluginReflectionKind["Extension"] = (0, utils_1.addReflectionKind)('Extension', AppiumPluginReflectionKind.Driver | AppiumPluginReflectionKind.Plugin)] = "Extension";
    AppiumPluginReflectionKind[AppiumPluginReflectionKind["Any"] = (0, utils_1.addReflectionKind)('Any', AppiumPluginReflectionKind.Command | AppiumPluginReflectionKind.ExecuteMethod | AppiumPluginReflectionKind.Driver | AppiumPluginReflectionKind.Plugin)] = "Any";
})(AppiumPluginReflectionKind = exports.AppiumPluginReflectionKind || (exports.AppiumPluginReflectionKind = {}));
//# sourceMappingURL=kind.js.map