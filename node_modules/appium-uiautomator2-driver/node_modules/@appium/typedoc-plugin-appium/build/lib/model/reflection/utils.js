"use strict";
/**
 * Adapted from `@knodes/typedoc-pluginutils`
 * @see https://github.com/knodescommunity/typedoc-plugins
 * Copyright (c) 2022 KnodesCommunity
 * Licensed MIT
 * @see https://github.com/KnodesCommunity/typedoc-plugins/blob/05717565fae14357b1c4be8122f3156e1d46d332/LICENSE
 * @module
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.addReflectionKind = void 0;
const typedoc_1 = require("typedoc");
const getHigherBitMask = () => Math.max(...Object.values({ ...typedoc_1.ReflectionKind, All: -1 })
    .filter((value) => typeof value === 'number')
    .map((v) => v.toString(2))
    .filter((v) => v.match(/^0*10*$/))
    .map((v) => parseInt(v, 2)));
const addReflectionKind = (name, value) => {
    const kindAny = typedoc_1.ReflectionKind;
    const existingValue = kindAny[name];
    if (existingValue !== null && existingValue !== undefined) {
        return existingValue;
    }
    const defaultedValue = value ?? getHigherBitMask() * 2;
    kindAny[name] = defaultedValue;
    kindAny[defaultedValue] = name;
    return defaultedValue;
};
exports.addReflectionKind = addReflectionKind;
//# sourceMappingURL=utils.js.map