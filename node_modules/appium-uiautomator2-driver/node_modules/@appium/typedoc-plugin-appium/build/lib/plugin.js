"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.load = void 0;
const typedoc_1 = require("typedoc");
const converter_1 = require("./converter");
const logger_1 = require("./logger");
const theme_1 = require("./theme");
/**
 * Loads the Appium TypeDoc plugin
 * @param app - TypeDoc Application
 */
function load(app) {
    // register our custom theme.  the user still has to choose it
    app.renderer.defineTheme(theme_1.THEME_NAME, theme_1.AppiumTheme);
    app.converter.on(typedoc_1.Converter.EVENT_RESOLVE_BEGIN, (ctx) => {
        // we don't want to do this work if we're not using the custom theme!
        const log = new logger_1.AppiumPluginLogger(app.logger, 'appium');
        // note: THEME_NAME is flimsy, but we cannot use instanceof due to the AppiumTheme closure
        if (app.renderer.themeName === theme_1.THEME_NAME) {
            // this queries the declarations created by TypeDoc and extracts command information
            const moduleCommands = (0, converter_1.convertCommands)(ctx, log);
            // this creates new custom reflections from the data we gathered and registers them
            // with TypeDoc
            (0, converter_1.createReflections)(ctx, log, moduleCommands);
            log.info(`${converter_1.stats}`);
        }
        else {
            log.warn('Not using the Appium theme; skipping command reflection creation');
        }
    });
}
exports.load = load;
__exportStar(require("./theme"), exports);
//# sourceMappingURL=plugin.js.map