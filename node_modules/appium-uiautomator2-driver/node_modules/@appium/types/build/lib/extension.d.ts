import type { Express } from 'express';
import { ConditionalPick, MultidimensionalReadonlyArray } from 'type-fest';
import { ServerArgs } from './config';
import { DriverCommand } from './driver';
import { PluginCommand } from './plugin';
import { AppiumServer } from './server';
/**
 * The definition of an extension method, which will be provided via Appium's API.
 *
 */
export interface MethodDef<Ext> {
    /**
     * Name of the command.
     */
    readonly command?: keyof ConditionalPick<Required<Ext>, DriverCommand | PluginCommand>;
    /**
     * If true, this `Method` will never proxy.
     */
    readonly neverProxy?: boolean;
    /**
     * Specifies shape of payload
     */
    readonly payloadParams?: PayloadParams;
}
/**
 * Defines the shape of a payload for a {@linkcode MethodDef}.
 */
export interface PayloadParams {
    wrap?: string;
    unwrap?: string;
    required?: ReadonlyArray<string> | MultidimensionalReadonlyArray<string, 2>;
    optional?: ReadonlyArray<string> | MultidimensionalReadonlyArray<string, 2>;
    validate?: (obj: any, protocol: string) => boolean | string | undefined;
    makeArgs?: (obj: any) => any;
}
/**
 * A mapping of URL paths to HTTP methods to {@linkcode MethodDef}s.
 */
export declare type MethodMap<Ext = any> = Readonly<Record<string, {
    GET?: MethodDef<Ext>;
    POST?: MethodDef<Ext>;
    DELETE?: MethodDef<Ext>;
}>>;
/**
 * The string referring to a "driver"-type extension
 */
export declare type DriverType = 'driver';
/**
 * The string referring to a "plugin"-type extension
 *
 */
export declare type PluginType = 'plugin';
/**
 * The strings referring to all extension types.
 */
export declare type ExtensionType = DriverType | PluginType;
/**
 * Optionally updates an Appium express app and http server, by calling
 * methods that may mutate those objects. For example, you could call:
 *
 * `expressApp.get('/foo', handler)`
 *
 * In order to add a new route to Appium with this plugin. Or, you could add
 * new listeners to the httpServer object.
 *
 * @param expressApp - the Express 'app' object used by Appium for route handling
 * @param httpServer - the node HTTP server that hosts the app
 * @param cliArgs - Arguments from config files, CLI, etc.
 */
export declare type UpdateServerCallback = (expressApp: Express, httpServer: AppiumServer, cliArgs: Partial<ServerArgs>) => Promise<void>;
//# sourceMappingURL=extension.d.ts.map