"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("source-map-support/register");
var _lodash = _interopRequireDefault(require("lodash"));
var _fs2 = _interopRequireDefault(require("fs"));
var _teen_process = require("teen_process");
var _path = _interopRequireDefault(require("path"));
var _logger = _interopRequireDefault(require("../logger.js"));
var _support = require("@appium/support");
var _lruCache = _interopRequireDefault(require("lru-cache"));
var _helpers = require("../helpers.js");
const DEFAULT_PRIVATE_KEY = _path.default.join('keys', 'testkey.pk8');
const DEFAULT_CERTIFICATE = _path.default.join('keys', 'testkey.x509.pem');
const BUNDLETOOL_TUTORIAL = 'https://developer.android.com/studio/command-line/bundletool';
const APKSIGNER_VERIFY_FAIL = 'DOES NOT VERIFY';
const SHA1 = 'sha1';
const SHA256 = 'sha256';
const SHA512 = 'sha512';
const MD5 = 'md5';
const DEFAULT_CERT_HASH = {
  [SHA256]: 'a40da80a59d170caa950cf15c18c454d47a39b26989d8b640ecd745ba71bf5dc'
};
const JAVA_PROPS_INIT_ERROR = 'java.lang.Error: Properties init';
const SIGNED_APPS_CACHE = new _lruCache.default({
  max: 30
});
const apkSigningMethods = {};
apkSigningMethods.executeApksigner = async function executeApksigner(args = []) {
  const apkSignerJar = await (0, _helpers.getApksignerForOs)(this);
  const fullCmd = [await (0, _helpers.getJavaForOs)(), '-Xmx1024M', '-Xss1m', '-jar', apkSignerJar, ...args];
  _logger.default.debug(`Starting apksigner: ${_support.util.quote(fullCmd)}`);
  const {
    stdout,
    stderr
  } = await (0, _teen_process.exec)(fullCmd[0], fullCmd.slice(1), {
    cwd: _path.default.dirname(apkSignerJar),
    windowsVerbatimArguments: _support.system.isWindows()
  });
  for (let [name, stream] of [['stdout', stdout], ['stderr', stderr]]) {
    if (!_lodash.default.trim(stream)) {
      continue;
    }
    if (name === 'stdout') {
      stream = stream.split('\n').filter(line => !line.includes('WARNING:')).join('\n');
    }
    _logger.default.debug(`apksigner ${name}: ${stream}`);
  }
  return stdout;
};
apkSigningMethods.signWithDefaultCert = async function signWithDefaultCert(apk) {
  _logger.default.debug(`Signing '${apk}' with default cert`);
  if (!(await _support.fs.exists(apk))) {
    throw new Error(`${apk} file doesn't exist.`);
  }
  const args = ['sign', '--key', await (0, _helpers.getResourcePath)(DEFAULT_PRIVATE_KEY), '--cert', await (0, _helpers.getResourcePath)(DEFAULT_CERTIFICATE), apk];
  try {
    await this.executeApksigner(args);
  } catch (e) {
    throw new Error(`Could not sign '${apk}' with the default certificate. ` + `Original error: ${e.stderr || e.stdout || e.message}`);
  }
};
apkSigningMethods.signWithCustomCert = async function signWithCustomCert(apk) {
  _logger.default.debug(`Signing '${apk}' with custom cert`);
  if (!(await _support.fs.exists(this.keystorePath))) {
    throw new Error(`Keystore: ${this.keystorePath} doesn't exist.`);
  }
  if (!(await _support.fs.exists(apk))) {
    throw new Error(`'${apk}' doesn't exist.`);
  }
  try {
    await this.executeApksigner(['sign', '--ks', this.keystorePath, '--ks-key-alias', this.keyAlias, '--ks-pass', `pass:${this.keystorePassword}`, '--key-pass', `pass:${this.keyPassword}`, apk]);
  } catch (err) {
    _logger.default.warn(`Cannot use apksigner tool for signing. Defaulting to jarsigner. ` + `Original error: ${err.stderr || err.stdout || err.message}`);
    try {
      if (await (0, _helpers.unsignApk)(apk)) {
        _logger.default.debug(`'${apk}' has been successfully unsigned`);
      } else {
        _logger.default.debug(`'${apk}' does not need to be unsigned`);
      }
      const jarsigner = _path.default.resolve(await (0, _helpers.getJavaHome)(), 'bin', `jarsigner${_support.system.isWindows() ? '.exe' : ''}`);
      const fullCmd = [jarsigner, '-sigalg', 'MD5withRSA', '-digestalg', 'SHA1', '-keystore', this.keystorePath, '-storepass', this.keystorePassword, '-keypass', this.keyPassword, apk, this.keyAlias];
      _logger.default.debug(`Starting jarsigner: ${_support.util.quote(fullCmd)}`);
      await (0, _teen_process.exec)(fullCmd[0], fullCmd.slice(1), {
        windowsVerbatimArguments: _support.system.isWindows()
      });
    } catch (e) {
      throw new Error(`Could not sign with custom certificate. ` + `Original error: ${e.stderr || e.message}`);
    }
  }
};
apkSigningMethods.sign = async function sign(appPath) {
  if (appPath.endsWith(_helpers.APKS_EXTENSION)) {
    let message = 'Signing of .apks-files is not supported. ';
    if (this.useKeystore) {
      message += 'Consider manual application bundle signing with the custom keystore ' + `like it is described at ${BUNDLETOOL_TUTORIAL}`;
    } else {
      message += `Consider manual application bundle signing with the key at '${DEFAULT_PRIVATE_KEY}' ` + `and the certificate at '${DEFAULT_CERTIFICATE}'. Read ${BUNDLETOOL_TUTORIAL} for more details.`;
    }
    _logger.default.warn(message);
    return;
  }
  await this.zipAlignApk(appPath);
  if (this.useKeystore) {
    await this.signWithCustomCert(appPath);
  } else {
    await this.signWithDefaultCert(appPath);
  }
};
apkSigningMethods.zipAlignApk = async function zipAlignApk(apk) {
  await this.initZipAlign();
  try {
    await (0, _teen_process.exec)(this.binaries.zipalign, ['-c', '4', apk]);
    _logger.default.debug(`${apk}' is already zip-aligned. Doing nothing`);
    return false;
  } catch (e) {
    _logger.default.debug(`'${apk}' is not zip-aligned. Aligning`);
  }
  try {
    await _support.fs.access(apk, _fs2.default.W_OK);
  } catch (e) {
    throw new Error(`The file at '${apk}' is not writeable. ` + `Please grant write permissions to this file or to its parent folder '${_path.default.dirname(apk)}' ` + `for the Appium process, so it can zip-align the file`);
  }
  const alignedApk = await _support.tempDir.path({
    prefix: 'appium',
    suffix: '.tmp'
  });
  await (0, _support.mkdirp)(_path.default.dirname(alignedApk));
  try {
    await (0, _teen_process.exec)(this.binaries.zipalign, ['-f', '4', apk, alignedApk]);
    await _support.fs.mv(alignedApk, apk, {
      mkdirp: true
    });
    return true;
  } catch (e) {
    if (await _support.fs.exists(alignedApk)) {
      await _support.fs.unlink(alignedApk);
    }
    throw new Error(`zipAlignApk failed. Original error: ${e.stderr || e.message}`);
  }
};
apkSigningMethods.checkApkCert = async function checkApkCert(appPath, pkg, opts = {}) {
  _logger.default.debug(`Checking app cert for ${appPath}`);
  if (!(await _support.fs.exists(appPath))) {
    _logger.default.debug(`'${appPath}' does not exist`);
    return false;
  }
  if (_path.default.extname(appPath) === _helpers.APKS_EXTENSION) {
    appPath = await this.extractBaseApk(appPath);
  }
  const hashMatches = (apksignerOutput, expectedHashes) => {
    for (const [name, value] of _lodash.default.toPairs(expectedHashes)) {
      if (new RegExp(`digest:\\s+${value}\\b`, 'i').test(apksignerOutput)) {
        _logger.default.debug(`${name} hash did match for '${_path.default.basename(appPath)}'`);
        return true;
      }
    }
    return false;
  };
  const {
    requireDefaultCert = true
  } = opts;
  const appHash = await _support.fs.hash(appPath);
  if (SIGNED_APPS_CACHE.has(appHash)) {
    _logger.default.debug(`Using the previously cached signature entry for '${_path.default.basename(appPath)}'`);
    const {
      keystorePath,
      output,
      expected
    } = SIGNED_APPS_CACHE.get(appHash);
    if (this.useKeystore && this.keystorePath === keystorePath || !this.useKeystore) {
      return !this.useKeystore && !requireDefaultCert || hashMatches(output, expected);
    }
  }
  const expected = this.useKeystore ? await this.getKeystoreHash(appPath, pkg) : DEFAULT_CERT_HASH;
  try {
    await (0, _helpers.getApksignerForOs)(this);
    const output = await this.executeApksigner(['verify', '--print-certs', appPath]);
    const hasMatch = hashMatches(output, expected);
    if (hasMatch) {
      _logger.default.info(`'${appPath}' is signed with the ` + `${this.useKeystore ? 'keystore' : 'default'} certificate`);
    } else {
      _logger.default.info(`'${appPath}' is signed with a ` + `non-${this.useKeystore ? 'keystore' : 'default'} certificate`);
    }
    const isSigned = !this.useKeystore && !requireDefaultCert || hasMatch;
    if (isSigned) {
      SIGNED_APPS_CACHE.set(appHash, {
        output,
        expected,
        keystorePath: this.keystorePath
      });
    }
    return isSigned;
  } catch (err) {
    if (_lodash.default.includes(err.stderr, APKSIGNER_VERIFY_FAIL)) {
      _logger.default.info(`'${appPath}' is not signed`);
      return false;
    }
    const errMsg = err.stderr || err.stdout || err.message;
    if (_lodash.default.includes(errMsg, JAVA_PROPS_INIT_ERROR)) {
      _logger.default.warn(errMsg);
      _logger.default.warn(`Assuming '${appPath}' is already signed and continuing anyway`);
      return true;
    }
    throw new Error(`Cannot verify the signature of '${appPath}'. ` + `Original error: ${errMsg}`);
  }
};
apkSigningMethods.getKeystoreHash = async function getKeystoreHash() {
  _logger.default.debug(`Getting hash of the '${this.keystorePath}' keystore`);
  const keytool = _path.default.resolve(await (0, _helpers.getJavaHome)(), 'bin', `keytool${_support.system.isWindows() ? '.exe' : ''}`);
  if (!(await _support.fs.exists(keytool))) {
    throw new Error(`The keytool utility cannot be found at '${keytool}'`);
  }
  const args = ['-v', '-list', '-alias', this.keyAlias, '-keystore', this.keystorePath, '-storepass', this.keystorePassword];
  _logger.default.info(`Running '${keytool}' with arguments: ${_support.util.quote(args)}`);
  try {
    const {
      stdout
    } = await (0, _teen_process.exec)(keytool, args, {
      windowsVerbatimArguments: _support.system.isWindows()
    });
    const result = {};
    for (const hashName of [SHA512, SHA256, SHA1, MD5]) {
      const hashRe = new RegExp(`^\\s*${hashName}:\\s*([a-f0-9:]+)`, 'mi');
      const match = hashRe.exec(stdout);
      if (!match) {
        continue;
      }
      result[hashName] = match[1].replace(/:/g, '').toLowerCase();
    }
    if (_lodash.default.isEmpty(result)) {
      _logger.default.debug(stdout);
      throw new Error('Cannot parse the hash value from the keytool output');
    }
    _logger.default.debug(`Keystore hash: ${JSON.stringify(result)}`);
    return result;
  } catch (e) {
    throw new Error(`Cannot get the hash of '${this.keystorePath}' keystore. ` + `Original error: ${e.stderr || e.message}`);
  }
};
var _default = apkSigningMethods;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,