"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SAFARI_BUNDLE_ID = exports.IPA_EXT = exports.APP_EXT = void 0;
exports.extractBundleId = extractBundleId;
exports.extractBundleVersion = extractBundleVersion;
exports.fetchSupportedAppPlatforms = fetchSupportedAppPlatforms;
exports.findApps = findApps;
exports.isAppBundle = isAppBundle;
exports.isolateAppBundle = isolateAppBundle;
exports.parseLocalizableStrings = parseLocalizableStrings;
exports.verifyApplicationPlatform = verifyApplicationPlatform;
require("source-map-support/register");
var _lodash = _interopRequireDefault(require("lodash"));
var _path = _interopRequireDefault(require("path"));
var _support = require("appium/support");
var _logger = _interopRequireDefault(require("./logger.js"));
const STRINGSDICT_RESOURCE = '.stringsdict';
const STRINGS_RESOURCE = '.strings';
const SAFARI_BUNDLE_ID = 'com.apple.mobilesafari';
exports.SAFARI_BUNDLE_ID = SAFARI_BUNDLE_ID;
const APP_EXT = '.app';
exports.APP_EXT = APP_EXT;
const IPA_EXT = '.ipa';
exports.IPA_EXT = IPA_EXT;
const PLIST_CACHE = new WeakMap();
async function extractPlistEntry(app, entryName) {
  const plistPath = _path.default.resolve(app, 'Info.plist');
  const parseFile = async () => {
    try {
      return await _support.plist.parsePlistFile(plistPath);
    } catch (err) {
      throw new Error(`Could not extract Info.plist from '${_path.default.basename(app)}': ${err.message}`);
    }
  };
  let plistObj;
  if (_lodash.default.isNil(this)) {
    plistObj = await parseFile();
  } else {
    var _PLIST_CACHE$get;
    plistObj = (_PLIST_CACHE$get = PLIST_CACHE.get(this)) === null || _PLIST_CACHE$get === void 0 ? void 0 : _PLIST_CACHE$get[app];
    if (!plistObj) {
      plistObj = await parseFile();
      PLIST_CACHE.set(this, {
        ...(PLIST_CACHE.get(this) || {}),
        [app]: plistObj
      });
    }
  }
  return plistObj[entryName];
}
async function extractBundleId(app) {
  const bundleId = await extractPlistEntry.bind(this)(app, 'CFBundleIdentifier');
  _logger.default.debug(`Getting bundle ID from app '${app}': '${bundleId}'`);
  return bundleId;
}
async function extractBundleVersion(app) {
  return await extractPlistEntry.bind(this)(app, 'CFBundleVersion');
}
async function fetchSupportedAppPlatforms(app) {
  try {
    const result = await extractPlistEntry.bind(this)(app, 'CFBundleSupportedPlatforms');
    if (!_lodash.default.isArray(result)) {
      _logger.default.warn(`${_path.default.basename(app)}': CFBundleSupportedPlatforms is not a valid list`);
      return [];
    }
    return result;
  } catch (err) {
    _logger.default.warn(`Cannot extract the list of supported platforms from '${_path.default.basename(app)}': ${err.message}`);
    return [];
  }
}
async function verifyApplicationPlatform(app, expectedPlatform) {
  _logger.default.debug('Verifying application platform');
  const supportedPlatforms = await fetchSupportedAppPlatforms.bind(this)(app);
  _logger.default.debug(`CFBundleSupportedPlatforms: ${JSON.stringify(supportedPlatforms)}`);
  const {
    isSimulator,
    isTvOS
  } = expectedPlatform;
  const prefix = isTvOS ? 'AppleTV' : 'iPhone';
  const suffix = isSimulator ? 'Simulator' : 'OS';
  const dstPlatform = `${prefix}${suffix}`;
  if (!supportedPlatforms.includes(dstPlatform)) {
    throw new Error(`${isSimulator ? 'Simulator' : 'Real device'} architecture is unsupported by the '${app}' application. ` + `Make sure the correct deployment target has been selected for its compilation in Xcode.`);
  }
}
async function readResource(resourcePath) {
  const data = await _support.plist.parsePlistFile(resourcePath);
  const result = {};
  for (const [key, value] of _lodash.default.toPairs(data)) {
    result[key] = _lodash.default.isString(value) ? value : JSON.stringify(value);
  }
  return result;
}
async function parseLocalizableStrings(opts) {
  const {
    app,
    language = 'en',
    localizableStringsDir,
    stringFile,
    strictMode
  } = opts;
  if (!app) {
    const message = `Strings extraction is not supported if 'app' capability is not set`;
    if (strictMode) {
      throw new Error(message);
    }
    _logger.default.info(message);
    return {};
  }
  let lprojRoot;
  for (const subfolder of [`${language}.lproj`, localizableStringsDir, '']) {
    lprojRoot = _path.default.resolve(app, subfolder);
    if (await _support.fs.exists(lprojRoot)) {
      break;
    }
    const message = `No '${lprojRoot}' resources folder has been found`;
    if (strictMode) {
      throw new Error(message);
    }
    _logger.default.debug(message);
  }
  _logger.default.info(`Will extract resource strings from '${lprojRoot}'`);
  const resourcePaths = [];
  if (stringFile) {
    const dstPath = _path.default.resolve(lprojRoot, stringFile);
    if (await _support.fs.exists(dstPath)) {
      resourcePaths.push(dstPath);
    } else {
      const message = `No '${dstPath}' resource file has been found for '${app}'`;
      if (strictMode) {
        throw new Error(message);
      }
      _logger.default.info(message);
      _logger.default.info(`Getting all the available strings from '${lprojRoot}'`);
    }
  }
  if (_lodash.default.isEmpty(resourcePaths) && (await _support.fs.exists(lprojRoot))) {
    const resourceFiles = (await _support.fs.readdir(lprojRoot)).filter(name => _lodash.default.some([STRINGS_RESOURCE, STRINGSDICT_RESOURCE], x => name.endsWith(x))).map(name => _path.default.resolve(lprojRoot, name));
    resourcePaths.push(...resourceFiles);
  }
  _logger.default.info(`Got ${resourcePaths.length} resource file(s) in '${lprojRoot}'`);
  if (_lodash.default.isEmpty(resourcePaths)) {
    return {};
  }
  const resultStrings = {};
  const toAbsolutePath = function (p) {
    return _path.default.isAbsolute(p) ? p : _path.default.resolve(process.cwd(), p);
  };
  for (const resourcePath of resourcePaths) {
    if (!_support.util.isSubPath(toAbsolutePath(resourcePath), toAbsolutePath(app))) {
      throw new Error(`'${resourcePath}' is expected to be located under '${app}'`);
    }
    try {
      const data = await readResource(resourcePath);
      _logger.default.debug(`Parsed ${_lodash.default.keys(data).length} string(s) from '${resourcePath}'`);
      _lodash.default.merge(resultStrings, data);
    } catch (e) {
      _logger.default.warn(`Cannot parse '${resourcePath}' resource. Original error: ${e.message}`);
    }
  }
  _logger.default.info(`Got ${_lodash.default.keys(resultStrings).length} string(s) from '${lprojRoot}'`);
  return resultStrings;
}
async function isAppBundle(appPath) {
  return _lodash.default.endsWith(_lodash.default.toLower(appPath), APP_EXT) && (await _support.fs.stat(appPath)).isDirectory() && (await _support.fs.exists(_path.default.join(appPath, 'Info.plist')));
}
async function findApps(archivePath, appExtensions) {
  const useSystemUnzipEnv = process.env.APPIUM_PREFER_SYSTEM_UNZIP;
  const useSystemUnzip = _lodash.default.isEmpty(useSystemUnzipEnv) || !['0', 'false'].includes(_lodash.default.toLower(useSystemUnzipEnv));
  const tmpRoot = await _support.tempDir.openDir();
  await _support.zip.extractAllTo(archivePath, tmpRoot, {
    useSystemUnzip
  });
  const globPattern = `**/*.+(${appExtensions.map(ext => ext.replace(/^\./, '')).join('|')})`;
  const sortedBundleItems = (await _support.fs.glob(globPattern, {
    cwd: tmpRoot,
    strict: false
  })).sort((a, b) => a.split(_path.default.sep).length - b.split(_path.default.sep).length);
  return [tmpRoot, sortedBundleItems];
}
async function isolateAppBundle(appRoot) {
  const tmpRoot = await _support.tempDir.openDir();
  const dstRoot = _path.default.join(tmpRoot, _path.default.basename(appRoot));
  await _support.fs.mv(appRoot, dstRoot, {
    mkdirp: true
  });
  return dstRoot;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,