{"version":3,"file":"app-utils.js","names":["_lodash","_interopRequireDefault","require","_path","_support","_logger","STRINGSDICT_RESOURCE","STRINGS_RESOURCE","SAFARI_BUNDLE_ID","exports","APP_EXT","IPA_EXT","PLIST_CACHE","WeakMap","extractPlistEntry","app","entryName","plistPath","path","resolve","parseFile","plist","parsePlistFile","err","Error","basename","message","plistObj","_","isNil","_PLIST_CACHE$get","get","set","extractBundleId","bundleId","bind","log","debug","extractBundleVersion","fetchSupportedAppPlatforms","result","isArray","warn","verifyApplicationPlatform","expectedPlatform","supportedPlatforms","JSON","stringify","isSimulator","isTvOS","prefix","suffix","dstPlatform","includes","readResource","resourcePath","data","key","value","toPairs","isString","parseLocalizableStrings","opts","language","localizableStringsDir","stringFile","strictMode","info","lprojRoot","subfolder","fs","exists","resourcePaths","dstPath","push","isEmpty","resourceFiles","readdir","filter","name","some","x","endsWith","map","length","resultStrings","toAbsolutePath","p","isAbsolute","process","cwd","util","isSubPath","keys","merge","e","isAppBundle","appPath","toLower","stat","isDirectory","join","findApps","archivePath","appExtensions","useSystemUnzipEnv","env","APPIUM_PREFER_SYSTEM_UNZIP","useSystemUnzip","tmpRoot","tempDir","openDir","zip","extractAllTo","globPattern","ext","replace","sortedBundleItems","glob","strict","sort","a","b","split","sep","isolateAppBundle","appRoot","dstRoot","mv","mkdirp"],"sources":["../../lib/app-utils.js"],"sourcesContent":["import _ from 'lodash';\nimport path from 'path';\nimport { plist, fs, util, tempDir, zip } from 'appium/support';\nimport log from './logger.js';\n\nconst STRINGSDICT_RESOURCE = '.stringsdict';\nconst STRINGS_RESOURCE = '.strings';\nconst SAFARI_BUNDLE_ID = 'com.apple.mobilesafari';\nconst APP_EXT = '.app';\nconst IPA_EXT = '.ipa';\nconst PLIST_CACHE = new WeakMap();\n\n/**\n * Retrieves the value of the given entry name from the application's Info.plist.\n *\n * @this {Object} Optinal instance used for caching. Ususally the driver instance.\n * @param {string} app Full path to the app bundle root.\n * @param {string} entryName Key name in the plist.\n * @returns {Promise<Any | undefined>} Either the extracted value or undefined if no such key has been found in the plist.\n * @throws {Error} If the application's Info.plist cannot be parsed.\n */\nasync function extractPlistEntry (app, entryName) {\n  const plistPath = path.resolve(app, 'Info.plist');\n\n  const parseFile = async () => {\n    try {\n      return await plist.parsePlistFile(plistPath);\n    } catch (err) {\n      throw new Error(`Could not extract Info.plist from '${path.basename(app)}': ${err.message}`);\n    }\n  };\n\n  let plistObj;\n  if (_.isNil(this)) {\n    plistObj = await parseFile();\n  } else {\n    plistObj = PLIST_CACHE.get(this)?.[app];\n    if (!plistObj) {\n      plistObj = await parseFile();\n      PLIST_CACHE.set(this, {\n        ...(PLIST_CACHE.get(this) || {}),\n        [app]: plistObj,\n      });\n    }\n  }\n\n  return plistObj[entryName];\n}\n\nasync function extractBundleId (app) {\n  const bundleId = await extractPlistEntry.bind(this)(app, 'CFBundleIdentifier');\n  log.debug(`Getting bundle ID from app '${app}': '${bundleId}'`);\n  return bundleId;\n}\n\nasync function extractBundleVersion (app) {\n  return await extractPlistEntry.bind(this)(app, 'CFBundleVersion');\n}\n\nasync function fetchSupportedAppPlatforms (app) {\n  try {\n    const result = await extractPlistEntry.bind(this)(app, 'CFBundleSupportedPlatforms');\n    if (!_.isArray(result)) {\n      log.warn(`${path.basename(app)}': CFBundleSupportedPlatforms is not a valid list`);\n      return [];\n    }\n    return result;\n  } catch (err) {\n    log.warn(\n      `Cannot extract the list of supported platforms from '${path.basename(app)}': ${err.message}`\n    );\n    return [];\n  }\n}\n\n/**\n * @typedef {Object} PlatformOpts\n *\n * @property {boolean} isSimulator - Whether the destination platform is a Simulator\n * @property {boolean} isTvOS - Whether the destination platform is a Simulator\n */\n\n/**\n * Verify whether the given application is compatible to the\n * platform where it is going to be installed and tested.\n *\n * @param {string} app - The actual path to the application bundle\n * @param {PlatformOpts} expectedPlatform\n * @throws {Error} If bundle architecture does not match the expected device architecture.\n */\nasync function verifyApplicationPlatform (app, expectedPlatform) {\n  log.debug('Verifying application platform');\n\n  const supportedPlatforms = await fetchSupportedAppPlatforms.bind(this)(app);\n  log.debug(`CFBundleSupportedPlatforms: ${JSON.stringify(supportedPlatforms)}`);\n\n  const {\n    isSimulator,\n    isTvOS,\n  } = expectedPlatform;\n  const prefix = isTvOS ? 'AppleTV' : 'iPhone';\n  const suffix = isSimulator ? 'Simulator' : 'OS';\n  const dstPlatform = `${prefix}${suffix}`;\n  if (!supportedPlatforms.includes(dstPlatform)) {\n    throw new Error(`${isSimulator ? 'Simulator' : 'Real device'} architecture is unsupported by the '${app}' application. ` +\n      `Make sure the correct deployment target has been selected for its compilation in Xcode.`);\n  }\n}\n\nasync function readResource (resourcePath) {\n  const data = await plist.parsePlistFile(resourcePath);\n  const result = {};\n  for (const [key, value] of _.toPairs(data)) {\n    result[key] = _.isString(value) ? value : JSON.stringify(value);\n  }\n  return result;\n}\n\nasync function parseLocalizableStrings (opts) {\n  const {\n    app,\n    language = 'en',\n    localizableStringsDir,\n    stringFile,\n    strictMode,\n  } = opts;\n\n  if (!app) {\n    const message = `Strings extraction is not supported if 'app' capability is not set`;\n    if (strictMode) {\n      throw new Error(message);\n    }\n    log.info(message);\n    return {};\n  }\n\n  let lprojRoot;\n  for (const subfolder of [`${language}.lproj`, localizableStringsDir, '']) {\n    lprojRoot = path.resolve(app, subfolder);\n    if (await fs.exists(lprojRoot)) {\n      break;\n    }\n    const message = `No '${lprojRoot}' resources folder has been found`;\n    if (strictMode) {\n      throw new Error(message);\n    }\n    log.debug(message);\n  }\n  log.info(`Will extract resource strings from '${lprojRoot}'`);\n\n  const resourcePaths = [];\n  if (stringFile) {\n    const dstPath = path.resolve(lprojRoot, stringFile);\n    if (await fs.exists(dstPath)) {\n      resourcePaths.push(dstPath);\n    } else {\n      const message = `No '${dstPath}' resource file has been found for '${app}'`;\n      if (strictMode) {\n        throw new Error(message);\n      }\n      log.info(message);\n      log.info(`Getting all the available strings from '${lprojRoot}'`);\n    }\n  }\n\n  if (_.isEmpty(resourcePaths) && await fs.exists(lprojRoot)) {\n    const resourceFiles = (await fs.readdir(lprojRoot))\n      .filter((name) => _.some([STRINGS_RESOURCE, STRINGSDICT_RESOURCE], (x) => name.endsWith(x)))\n      .map((name) => path.resolve(lprojRoot, name));\n    resourcePaths.push(...resourceFiles);\n  }\n  log.info(`Got ${resourcePaths.length} resource file(s) in '${lprojRoot}'`);\n\n  if (_.isEmpty(resourcePaths)) {\n    return {};\n  }\n\n  const resultStrings = {};\n  const toAbsolutePath = function (p) {\n    return path.isAbsolute(p) ? p : path.resolve(process.cwd(), p);\n  };\n  for (const resourcePath of resourcePaths) {\n    if (!util.isSubPath(toAbsolutePath(resourcePath), toAbsolutePath(app))) {\n      // security precaution\n      throw new Error(`'${resourcePath}' is expected to be located under '${app}'`);\n    }\n    try {\n      const data = await readResource(resourcePath);\n      log.debug(`Parsed ${_.keys(data).length} string(s) from '${resourcePath}'`);\n      _.merge(resultStrings, data);\n    } catch (e) {\n      log.warn(`Cannot parse '${resourcePath}' resource. Original error: ${e.message}`);\n    }\n  }\n\n  log.info(`Got ${_.keys(resultStrings).length} string(s) from '${lprojRoot}'`);\n  return resultStrings;\n}\n\n/**\n * Check whether the given path on the file system points to the .app bundle root\n *\n * @param {string} appPath Possible .app bundle root\n * @returns {boolean} Whether the given path points to an .app bundle\n */\nasync function isAppBundle (appPath) {\n  return _.endsWith(_.toLower(appPath), APP_EXT)\n    && (await fs.stat(appPath)).isDirectory()\n    && await fs.exists(path.join(appPath, 'Info.plist'));\n}\n\n/**\n * Extract the given archive and looks for items with given extensions in it\n *\n * @param {string} archivePath Full path to a .zip archive\n * @param {Array<string>} appExtensions List of matching item extensions\n * @returns {Promise<[string, string[]]>} Tuple, where the first element points to\n * a temporary folder root where the archive has been extracted and the second item\n * contains a list of relative paths to matched items\n */\nasync function findApps (archivePath, appExtensions) {\n  const useSystemUnzipEnv = process.env.APPIUM_PREFER_SYSTEM_UNZIP;\n  const useSystemUnzip = _.isEmpty(useSystemUnzipEnv)\n    || !['0', 'false'].includes(_.toLower(useSystemUnzipEnv));\n  const tmpRoot = await tempDir.openDir();\n  await zip.extractAllTo(archivePath, tmpRoot, {useSystemUnzip});\n  const globPattern = `**/*.+(${appExtensions.map((ext) => ext.replace(/^\\./, '')).join('|')})`;\n  const sortedBundleItems = (await fs.glob(globPattern, {\n    cwd: tmpRoot,\n    strict: false,\n  })).sort((a, b) => a.split(path.sep).length - b.split(path.sep).length);\n  return [tmpRoot, sortedBundleItems];\n}\n\n/**\n * Moves the application bundle to a newly created temporary folder\n *\n * @param {string} appRoot Full path to the .app bundle\n * @returns {Promise<string>} The new path to the app bundle.\n * The name of the app bundle remains though\n */\nasync function isolateAppBundle (appRoot) {\n  const tmpRoot = await tempDir.openDir();\n  const dstRoot = path.join(tmpRoot, path.basename(appRoot));\n  await fs.mv(appRoot, dstRoot, {mkdirp: true});\n  return dstRoot;\n}\n\nexport {\n  extractBundleId, verifyApplicationPlatform, parseLocalizableStrings,\n  SAFARI_BUNDLE_ID, fetchSupportedAppPlatforms, APP_EXT, IPA_EXT,\n  isAppBundle, findApps, isolateAppBundle, extractBundleVersion,\n};\n"],"mappings":";;;;;;;;;;;;;;;;AAAA,IAAAA,OAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,KAAA,GAAAF,sBAAA,CAAAC,OAAA;AACA,IAAAE,QAAA,GAAAF,OAAA;AACA,IAAAG,OAAA,GAAAJ,sBAAA,CAAAC,OAAA;AAEA,MAAMI,oBAAoB,GAAG,cAAc;AAC3C,MAAMC,gBAAgB,GAAG,UAAU;AACnC,MAAMC,gBAAgB,GAAG,wBAAwB;AAACC,OAAA,CAAAD,gBAAA,GAAAA,gBAAA;AAClD,MAAME,OAAO,GAAG,MAAM;AAACD,OAAA,CAAAC,OAAA,GAAAA,OAAA;AACvB,MAAMC,OAAO,GAAG,MAAM;AAACF,OAAA,CAAAE,OAAA,GAAAA,OAAA;AACvB,MAAMC,WAAW,GAAG,IAAIC,OAAO,EAAE;AAWjC,eAAeC,iBAAiBA,CAAEC,GAAG,EAAEC,SAAS,EAAE;EAChD,MAAMC,SAAS,GAAGC,aAAI,CAACC,OAAO,CAACJ,GAAG,EAAE,YAAY,CAAC;EAEjD,MAAMK,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC5B,IAAI;MACF,OAAO,MAAMC,cAAK,CAACC,cAAc,CAACL,SAAS,CAAC;IAC9C,CAAC,CAAC,OAAOM,GAAG,EAAE;MACZ,MAAM,IAAIC,KAAK,CAAE,sCAAqCN,aAAI,CAACO,QAAQ,CAACV,GAAG,CAAE,MAAKQ,GAAG,CAACG,OAAQ,EAAC,CAAC;IAC9F;EACF,CAAC;EAED,IAAIC,QAAQ;EACZ,IAAIC,eAAC,CAACC,KAAK,CAAC,IAAI,CAAC,EAAE;IACjBF,QAAQ,GAAG,MAAMP,SAAS,EAAE;EAC9B,CAAC,MAAM;IAAA,IAAAU,gBAAA;IACLH,QAAQ,IAAAG,gBAAA,GAAGlB,WAAW,CAACmB,GAAG,CAAC,IAAI,CAAC,cAAAD,gBAAA,uBAArBA,gBAAA,CAAwBf,GAAG,CAAC;IACvC,IAAI,CAACY,QAAQ,EAAE;MACbA,QAAQ,GAAG,MAAMP,SAAS,EAAE;MAC5BR,WAAW,CAACoB,GAAG,CAAC,IAAI,EAAE;QACpB,IAAIpB,WAAW,CAACmB,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAChC,CAAChB,GAAG,GAAGY;MACT,CAAC,CAAC;IACJ;EACF;EAEA,OAAOA,QAAQ,CAACX,SAAS,CAAC;AAC5B;AAEA,eAAeiB,eAAeA,CAAElB,GAAG,EAAE;EACnC,MAAMmB,QAAQ,GAAG,MAAMpB,iBAAiB,CAACqB,IAAI,CAAC,IAAI,CAAC,CAACpB,GAAG,EAAE,oBAAoB,CAAC;EAC9EqB,eAAG,CAACC,KAAK,CAAE,+BAA8BtB,GAAI,OAAMmB,QAAS,GAAE,CAAC;EAC/D,OAAOA,QAAQ;AACjB;AAEA,eAAeI,oBAAoBA,CAAEvB,GAAG,EAAE;EACxC,OAAO,MAAMD,iBAAiB,CAACqB,IAAI,CAAC,IAAI,CAAC,CAACpB,GAAG,EAAE,iBAAiB,CAAC;AACnE;AAEA,eAAewB,0BAA0BA,CAAExB,GAAG,EAAE;EAC9C,IAAI;IACF,MAAMyB,MAAM,GAAG,MAAM1B,iBAAiB,CAACqB,IAAI,CAAC,IAAI,CAAC,CAACpB,GAAG,EAAE,4BAA4B,CAAC;IACpF,IAAI,CAACa,eAAC,CAACa,OAAO,CAACD,MAAM,CAAC,EAAE;MACtBJ,eAAG,CAACM,IAAI,CAAE,GAAExB,aAAI,CAACO,QAAQ,CAACV,GAAG,CAAE,mDAAkD,CAAC;MAClF,OAAO,EAAE;IACX;IACA,OAAOyB,MAAM;EACf,CAAC,CAAC,OAAOjB,GAAG,EAAE;IACZa,eAAG,CAACM,IAAI,CACL,wDAAuDxB,aAAI,CAACO,QAAQ,CAACV,GAAG,CAAE,MAAKQ,GAAG,CAACG,OAAQ,EAAC,CAC9F;IACD,OAAO,EAAE;EACX;AACF;AAiBA,eAAeiB,yBAAyBA,CAAE5B,GAAG,EAAE6B,gBAAgB,EAAE;EAC/DR,eAAG,CAACC,KAAK,CAAC,gCAAgC,CAAC;EAE3C,MAAMQ,kBAAkB,GAAG,MAAMN,0BAA0B,CAACJ,IAAI,CAAC,IAAI,CAAC,CAACpB,GAAG,CAAC;EAC3EqB,eAAG,CAACC,KAAK,CAAE,+BAA8BS,IAAI,CAACC,SAAS,CAACF,kBAAkB,CAAE,EAAC,CAAC;EAE9E,MAAM;IACJG,WAAW;IACXC;EACF,CAAC,GAAGL,gBAAgB;EACpB,MAAMM,MAAM,GAAGD,MAAM,GAAG,SAAS,GAAG,QAAQ;EAC5C,MAAME,MAAM,GAAGH,WAAW,GAAG,WAAW,GAAG,IAAI;EAC/C,MAAMI,WAAW,GAAI,GAAEF,MAAO,GAAEC,MAAO,EAAC;EACxC,IAAI,CAACN,kBAAkB,CAACQ,QAAQ,CAACD,WAAW,CAAC,EAAE;IAC7C,MAAM,IAAI5B,KAAK,CAAE,GAAEwB,WAAW,GAAG,WAAW,GAAG,aAAc,wCAAuCjC,GAAI,iBAAgB,GACrH,yFAAwF,CAAC;EAC9F;AACF;AAEA,eAAeuC,YAAYA,CAAEC,YAAY,EAAE;EACzC,MAAMC,IAAI,GAAG,MAAMnC,cAAK,CAACC,cAAc,CAACiC,YAAY,CAAC;EACrD,MAAMf,MAAM,GAAG,CAAC,CAAC;EACjB,KAAK,MAAM,CAACiB,GAAG,EAAEC,KAAK,CAAC,IAAI9B,eAAC,CAAC+B,OAAO,CAACH,IAAI,CAAC,EAAE;IAC1ChB,MAAM,CAACiB,GAAG,CAAC,GAAG7B,eAAC,CAACgC,QAAQ,CAACF,KAAK,CAAC,GAAGA,KAAK,GAAGZ,IAAI,CAACC,SAAS,CAACW,KAAK,CAAC;EACjE;EACA,OAAOlB,MAAM;AACf;AAEA,eAAeqB,uBAAuBA,CAAEC,IAAI,EAAE;EAC5C,MAAM;IACJ/C,GAAG;IACHgD,QAAQ,GAAG,IAAI;IACfC,qBAAqB;IACrBC,UAAU;IACVC;EACF,CAAC,GAAGJ,IAAI;EAER,IAAI,CAAC/C,GAAG,EAAE;IACR,MAAMW,OAAO,GAAI,oEAAmE;IACpF,IAAIwC,UAAU,EAAE;MACd,MAAM,IAAI1C,KAAK,CAACE,OAAO,CAAC;IAC1B;IACAU,eAAG,CAAC+B,IAAI,CAACzC,OAAO,CAAC;IACjB,OAAO,CAAC,CAAC;EACX;EAEA,IAAI0C,SAAS;EACb,KAAK,MAAMC,SAAS,IAAI,CAAE,GAAEN,QAAS,QAAO,EAAEC,qBAAqB,EAAE,EAAE,CAAC,EAAE;IACxEI,SAAS,GAAGlD,aAAI,CAACC,OAAO,CAACJ,GAAG,EAAEsD,SAAS,CAAC;IACxC,IAAI,MAAMC,WAAE,CAACC,MAAM,CAACH,SAAS,CAAC,EAAE;MAC9B;IACF;IACA,MAAM1C,OAAO,GAAI,OAAM0C,SAAU,mCAAkC;IACnE,IAAIF,UAAU,EAAE;MACd,MAAM,IAAI1C,KAAK,CAACE,OAAO,CAAC;IAC1B;IACAU,eAAG,CAACC,KAAK,CAACX,OAAO,CAAC;EACpB;EACAU,eAAG,CAAC+B,IAAI,CAAE,uCAAsCC,SAAU,GAAE,CAAC;EAE7D,MAAMI,aAAa,GAAG,EAAE;EACxB,IAAIP,UAAU,EAAE;IACd,MAAMQ,OAAO,GAAGvD,aAAI,CAACC,OAAO,CAACiD,SAAS,EAAEH,UAAU,CAAC;IACnD,IAAI,MAAMK,WAAE,CAACC,MAAM,CAACE,OAAO,CAAC,EAAE;MAC5BD,aAAa,CAACE,IAAI,CAACD,OAAO,CAAC;IAC7B,CAAC,MAAM;MACL,MAAM/C,OAAO,GAAI,OAAM+C,OAAQ,uCAAsC1D,GAAI,GAAE;MAC3E,IAAImD,UAAU,EAAE;QACd,MAAM,IAAI1C,KAAK,CAACE,OAAO,CAAC;MAC1B;MACAU,eAAG,CAAC+B,IAAI,CAACzC,OAAO,CAAC;MACjBU,eAAG,CAAC+B,IAAI,CAAE,2CAA0CC,SAAU,GAAE,CAAC;IACnE;EACF;EAEA,IAAIxC,eAAC,CAAC+C,OAAO,CAACH,aAAa,CAAC,KAAI,MAAMF,WAAE,CAACC,MAAM,CAACH,SAAS,CAAC,GAAE;IAC1D,MAAMQ,aAAa,GAAG,CAAC,MAAMN,WAAE,CAACO,OAAO,CAACT,SAAS,CAAC,EAC/CU,MAAM,CAAEC,IAAI,IAAKnD,eAAC,CAACoD,IAAI,CAAC,CAACzE,gBAAgB,EAAED,oBAAoB,CAAC,EAAG2E,CAAC,IAAKF,IAAI,CAACG,QAAQ,CAACD,CAAC,CAAC,CAAC,CAAC,CAC3FE,GAAG,CAAEJ,IAAI,IAAK7D,aAAI,CAACC,OAAO,CAACiD,SAAS,EAAEW,IAAI,CAAC,CAAC;IAC/CP,aAAa,CAACE,IAAI,CAAC,GAAGE,aAAa,CAAC;EACtC;EACAxC,eAAG,CAAC+B,IAAI,CAAE,OAAMK,aAAa,CAACY,MAAO,yBAAwBhB,SAAU,GAAE,CAAC;EAE1E,IAAIxC,eAAC,CAAC+C,OAAO,CAACH,aAAa,CAAC,EAAE;IAC5B,OAAO,CAAC,CAAC;EACX;EAEA,MAAMa,aAAa,GAAG,CAAC,CAAC;EACxB,MAAMC,cAAc,GAAG,SAAAA,CAAUC,CAAC,EAAE;IAClC,OAAOrE,aAAI,CAACsE,UAAU,CAACD,CAAC,CAAC,GAAGA,CAAC,GAAGrE,aAAI,CAACC,OAAO,CAACsE,OAAO,CAACC,GAAG,EAAE,EAAEH,CAAC,CAAC;EAChE,CAAC;EACD,KAAK,MAAMhC,YAAY,IAAIiB,aAAa,EAAE;IACxC,IAAI,CAACmB,aAAI,CAACC,SAAS,CAACN,cAAc,CAAC/B,YAAY,CAAC,EAAE+B,cAAc,CAACvE,GAAG,CAAC,CAAC,EAAE;MAEtE,MAAM,IAAIS,KAAK,CAAE,IAAG+B,YAAa,sCAAqCxC,GAAI,GAAE,CAAC;IAC/E;IACA,IAAI;MACF,MAAMyC,IAAI,GAAG,MAAMF,YAAY,CAACC,YAAY,CAAC;MAC7CnB,eAAG,CAACC,KAAK,CAAE,UAAST,eAAC,CAACiE,IAAI,CAACrC,IAAI,CAAC,CAAC4B,MAAO,oBAAmB7B,YAAa,GAAE,CAAC;MAC3E3B,eAAC,CAACkE,KAAK,CAACT,aAAa,EAAE7B,IAAI,CAAC;IAC9B,CAAC,CAAC,OAAOuC,CAAC,EAAE;MACV3D,eAAG,CAACM,IAAI,CAAE,iBAAgBa,YAAa,+BAA8BwC,CAAC,CAACrE,OAAQ,EAAC,CAAC;IACnF;EACF;EAEAU,eAAG,CAAC+B,IAAI,CAAE,OAAMvC,eAAC,CAACiE,IAAI,CAACR,aAAa,CAAC,CAACD,MAAO,oBAAmBhB,SAAU,GAAE,CAAC;EAC7E,OAAOiB,aAAa;AACtB;AAQA,eAAeW,WAAWA,CAAEC,OAAO,EAAE;EACnC,OAAOrE,eAAC,CAACsD,QAAQ,CAACtD,eAAC,CAACsE,OAAO,CAACD,OAAO,CAAC,EAAEvF,OAAO,CAAC,IACzC,CAAC,MAAM4D,WAAE,CAAC6B,IAAI,CAACF,OAAO,CAAC,EAAEG,WAAW,EAAE,KACtC,MAAM9B,WAAE,CAACC,MAAM,CAACrD,aAAI,CAACmF,IAAI,CAACJ,OAAO,EAAE,YAAY,CAAC,CAAC;AACxD;AAWA,eAAeK,QAAQA,CAAEC,WAAW,EAAEC,aAAa,EAAE;EACnD,MAAMC,iBAAiB,GAAGhB,OAAO,CAACiB,GAAG,CAACC,0BAA0B;EAChE,MAAMC,cAAc,GAAGhF,eAAC,CAAC+C,OAAO,CAAC8B,iBAAiB,CAAC,IAC9C,CAAC,CAAC,GAAG,EAAE,OAAO,CAAC,CAACpD,QAAQ,CAACzB,eAAC,CAACsE,OAAO,CAACO,iBAAiB,CAAC,CAAC;EAC3D,MAAMI,OAAO,GAAG,MAAMC,gBAAO,CAACC,OAAO,EAAE;EACvC,MAAMC,YAAG,CAACC,YAAY,CAACV,WAAW,EAAEM,OAAO,EAAE;IAACD;EAAc,CAAC,CAAC;EAC9D,MAAMM,WAAW,GAAI,UAASV,aAAa,CAACrB,GAAG,CAAEgC,GAAG,IAAKA,GAAG,CAACC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,CAACf,IAAI,CAAC,GAAG,CAAE,GAAE;EAC7F,MAAMgB,iBAAiB,GAAG,CAAC,MAAM/C,WAAE,CAACgD,IAAI,CAACJ,WAAW,EAAE;IACpDxB,GAAG,EAAEmB,OAAO;IACZU,MAAM,EAAE;EACV,CAAC,CAAC,EAAEC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACE,KAAK,CAACzG,aAAI,CAAC0G,GAAG,CAAC,CAACxC,MAAM,GAAGsC,CAAC,CAACC,KAAK,CAACzG,aAAI,CAAC0G,GAAG,CAAC,CAACxC,MAAM,CAAC;EACvE,OAAO,CAACyB,OAAO,EAAEQ,iBAAiB,CAAC;AACrC;AASA,eAAeQ,gBAAgBA,CAAEC,OAAO,EAAE;EACxC,MAAMjB,OAAO,GAAG,MAAMC,gBAAO,CAACC,OAAO,EAAE;EACvC,MAAMgB,OAAO,GAAG7G,aAAI,CAACmF,IAAI,CAACQ,OAAO,EAAE3F,aAAI,CAACO,QAAQ,CAACqG,OAAO,CAAC,CAAC;EAC1D,MAAMxD,WAAE,CAAC0D,EAAE,CAACF,OAAO,EAAEC,OAAO,EAAE;IAACE,MAAM,EAAE;EAAI,CAAC,CAAC;EAC7C,OAAOF,OAAO;AAChB"}