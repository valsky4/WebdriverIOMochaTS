"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.commands = void 0;
require("source-map-support/register");
var _lodash = _interopRequireDefault(require("lodash"));
var _support = require("appium/support");
const commands = {};
exports.commands = commands;
commands.mobileSetAppearance = async function mobileSetAppearance(opts = {}) {
  const {
    style
  } = opts;
  if (!['light', 'dark'].includes(_lodash.default.toLower(style))) {
    throw new Error(`The 'style' value is expected to equal either 'light' or 'dark'`);
  }
  if (_support.util.compareVersions(this.opts.platformVersion, '<', '12.0')) {
    throw new Error('Changing appearance is only supported since iOS 12');
  }
  if (this.isSimulator()) {
    try {
      return void (await this.opts.device.setAppearance(style));
    } catch (e) {
      this.log.debug(e.stack);
    }
  }
  try {
    return void (await this.proxyCommand('/wda/device/appearance', 'POST', {
      name: style
    }, false));
  } catch (e) {
    this.log.debug(e.stack);
  }
  await this.mobileSiriCommand({
    text: `Turn ${_lodash.default.toLower(style) === 'dark' ? 'on' : 'off'} dark mode`
  });
};
commands.mobileGetAppearance = async function mobileGetAppearance() {
  if (_support.util.compareVersions(this.opts.platformVersion, '<', '12.0')) {
    return 'unsupported';
  }
  let style;
  if (this.isSimulator()) {
    try {
      style = await this.opts.device.getAppearance();
    } catch (ign) {}
  }
  if (!style) {
    style = (await this.proxyCommand('/wda/device/info', 'GET')).userInterfaceStyle || 'unknown';
  }
  return {
    style
  };
};
var _default = commands;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfbG9kYXNoIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfc3VwcG9ydCIsImNvbW1hbmRzIiwiZXhwb3J0cyIsIm1vYmlsZVNldEFwcGVhcmFuY2UiLCJvcHRzIiwic3R5bGUiLCJpbmNsdWRlcyIsIl8iLCJ0b0xvd2VyIiwiRXJyb3IiLCJ1dGlsIiwiY29tcGFyZVZlcnNpb25zIiwicGxhdGZvcm1WZXJzaW9uIiwiaXNTaW11bGF0b3IiLCJkZXZpY2UiLCJzZXRBcHBlYXJhbmNlIiwiZSIsImxvZyIsImRlYnVnIiwic3RhY2siLCJwcm94eUNvbW1hbmQiLCJuYW1lIiwibW9iaWxlU2lyaUNvbW1hbmQiLCJ0ZXh0IiwibW9iaWxlR2V0QXBwZWFyYW5jZSIsImdldEFwcGVhcmFuY2UiLCJpZ24iLCJ1c2VySW50ZXJmYWNlU3R5bGUiLCJfZGVmYXVsdCIsImRlZmF1bHQiXSwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvY29tbWFuZHMvYXBwZWFyYW5jZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgdXRpbCB9IGZyb20gJ2FwcGl1bS9zdXBwb3J0JztcblxuXG5jb25zdCBjb21tYW5kcyA9IHt9O1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IFNldEFwcGVhcmFuY2VPcHRpb25zXG4gKlxuICogQHByb3BlcnR5IHtzdHJpbmd9IHN0eWxlIC0gQ3VycmVudGx5IHR3byBzdHlsZXMgYXJlIHN1cHBvcnRlZDpcbiAqIC0gZGFya1xuICogLSBsaWdodFxuICovXG5cbi8qKlxuICogU2V0IHRoZSBkZXZpY2UncyBVSSBhcHBlYXJhbmNlIHN0eWxlXG4gKlxuICogQHNpbmNlIGlPUyAxMi4wXG4gKiBAcGFyYW0ge1NldEFwcGVhcmFuY2VPcHRpb25zfSBvcHRzXG4gKiBAdGhyb3dzIHtFcnJvcn0gaWYgdGhlIGN1cnJlbnQgcGxhdGZvcm0gZG9lcyBub3Qgc3VwcG9ydCBVSVxuICogYXBwZWFyYW5jZSBjaGFuZ2VzXG4gKi9cbmNvbW1hbmRzLm1vYmlsZVNldEFwcGVhcmFuY2UgPSBhc3luYyBmdW5jdGlvbiBtb2JpbGVTZXRBcHBlYXJhbmNlIChvcHRzID0ge30pIHtcbiAgY29uc3Qge1xuICAgIHN0eWxlLFxuICB9ID0gb3B0cztcbiAgaWYgKCFbJ2xpZ2h0JywgJ2RhcmsnXS5pbmNsdWRlcyhfLnRvTG93ZXIoc3R5bGUpKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgVGhlICdzdHlsZScgdmFsdWUgaXMgZXhwZWN0ZWQgdG8gZXF1YWwgZWl0aGVyICdsaWdodCcgb3IgJ2RhcmsnYCk7XG4gIH1cbiAgaWYgKHV0aWwuY29tcGFyZVZlcnNpb25zKHRoaXMub3B0cy5wbGF0Zm9ybVZlcnNpb24sICc8JywgJzEyLjAnKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignQ2hhbmdpbmcgYXBwZWFyYW5jZSBpcyBvbmx5IHN1cHBvcnRlZCBzaW5jZSBpT1MgMTInKTtcbiAgfVxuXG4gIGlmICh0aGlzLmlzU2ltdWxhdG9yKCkpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHZvaWQgKGF3YWl0IHRoaXMub3B0cy5kZXZpY2Uuc2V0QXBwZWFyYW5jZShzdHlsZSkpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHRoaXMubG9nLmRlYnVnKGUuc3RhY2spO1xuICAgIH1cbiAgfVxuICB0cnkge1xuICAgIHJldHVybiB2b2lkIChhd2FpdCB0aGlzLnByb3h5Q29tbWFuZCgnL3dkYS9kZXZpY2UvYXBwZWFyYW5jZScsICdQT1NUJywge25hbWU6IHN0eWxlfSwgZmFsc2UpKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRoaXMubG9nLmRlYnVnKGUuc3RhY2spO1xuICB9XG4gIC8vIEZhbGwgYmFjayB0byB0aGUgdWdseSBTaXJpIHdvcmthcm91bmQgaWYgdGhlIGN1cnJlbnQgU0RLIGlzIHRvbyBvbGRcbiAgYXdhaXQgdGhpcy5tb2JpbGVTaXJpQ29tbWFuZCh7XG4gICAgdGV4dDogYFR1cm4gJHtfLnRvTG93ZXIoc3R5bGUpID09PSAnZGFyaycgPyAnb24nIDogJ29mZid9IGRhcmsgbW9kZWAsXG4gIH0pO1xufTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBBcHBlYXJhbmNlXG4gKiBAcHJvcGVydHkge3N0cmluZ30gc3R5bGUgLSBUaGUgZGV2aWNlJ3MgVUkgYXBwZWFyYW5jZSB2YWx1ZS5cbiAqIFRoaXMgY291bGQgYmUgb25lIG9mOlxuICogLSBgbGlnaHRgXG4gKiAtIGBkYXJrYFxuICogLSBgdW5rbm93bmBcbiAqIC0gYHVuc3VwcG9ydGVkYFxuICovXG5cbi8qKlxuICogR2V0IHRoZSBkZXZpY2UncyBVSSBhcHBlYXJhbmNlIHN0eWxlLlxuICpcbiAqIEBzaW5jZSBYY29kZSBTREsgMTFcbiAqIEByZXR1cm5zIHtBcHBlYXJhbmNlfVxuICovXG5jb21tYW5kcy5tb2JpbGVHZXRBcHBlYXJhbmNlID0gYXN5bmMgZnVuY3Rpb24gbW9iaWxlR2V0QXBwZWFyYW5jZSAoKSB7XG4gIGlmICh1dGlsLmNvbXBhcmVWZXJzaW9ucyh0aGlzLm9wdHMucGxhdGZvcm1WZXJzaW9uLCAnPCcsICcxMi4wJykpIHtcbiAgICByZXR1cm4gJ3Vuc3VwcG9ydGVkJztcbiAgfVxuXG4gIGxldCBzdHlsZTtcbiAgaWYgKHRoaXMuaXNTaW11bGF0b3IoKSkge1xuICAgIHRyeSB7XG4gICAgICBzdHlsZSA9IGF3YWl0IHRoaXMub3B0cy5kZXZpY2UuZ2V0QXBwZWFyYW5jZSgpO1xuICAgIH0gY2F0Y2ggKGlnbikge31cbiAgfVxuICBpZiAoIXN0eWxlKSB7XG4gICAgc3R5bGUgPSAoYXdhaXQgdGhpcy5wcm94eUNvbW1hbmQoJy93ZGEvZGV2aWNlL2luZm8nLCAnR0VUJykpLnVzZXJJbnRlcmZhY2VTdHlsZSB8fCAndW5rbm93bic7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBzdHlsZSxcbiAgfTtcbn07XG5cblxuZXhwb3J0IHsgY29tbWFuZHMgfTtcbmV4cG9ydCBkZWZhdWx0IGNvbW1hbmRzO1xuIl0s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