"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.helpers = exports.default = exports.commands = void 0;
require("source-map-support/register");
let commands = {},
  helpers = {},
  extensions = {};
exports.helpers = helpers;
exports.commands = commands;
function assertIsSimulator(driver) {
  if (!driver.isSimulator()) {
    throw new Error('Biometric enrollment can only be performed on Simulator');
  }
}
commands.mobileEnrollBiometric = async function mobileEnrollBiometric(opts = {}) {
  const {
    isEnabled = true
  } = opts;
  assertIsSimulator(this);
  await this.opts.device.enrollBiometric(isEnabled);
};
commands.mobileSendBiometricMatch = async function mobileSendBiometricMatch(opts = {}) {
  const {
    match = true,
    type = 'touchId'
  } = opts;
  assertIsSimulator(this);
  await this.opts.device.sendBiometricMatch(match, type);
};
commands.mobileIsBiometricEnrolled = async function mobileIsBiometricEnrolled() {
  assertIsSimulator(this);
  return await this.opts.device.isBiometricEnrolled();
};
Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb21tYW5kcyIsImhlbHBlcnMiLCJleHRlbnNpb25zIiwiZXhwb3J0cyIsImFzc2VydElzU2ltdWxhdG9yIiwiZHJpdmVyIiwiaXNTaW11bGF0b3IiLCJFcnJvciIsIm1vYmlsZUVucm9sbEJpb21ldHJpYyIsIm9wdHMiLCJpc0VuYWJsZWQiLCJkZXZpY2UiLCJlbnJvbGxCaW9tZXRyaWMiLCJtb2JpbGVTZW5kQmlvbWV0cmljTWF0Y2giLCJtYXRjaCIsInR5cGUiLCJzZW5kQmlvbWV0cmljTWF0Y2giLCJtb2JpbGVJc0Jpb21ldHJpY0Vucm9sbGVkIiwiaXNCaW9tZXRyaWNFbnJvbGxlZCIsIk9iamVjdCIsImFzc2lnbiIsIl9kZWZhdWx0IiwiZGVmYXVsdCJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9jb21tYW5kcy9iaW9tZXRyaWMuanMiXSwic291cmNlc0NvbnRlbnQiOlsibGV0IGNvbW1hbmRzID0ge30sIGhlbHBlcnMgPSB7fSwgZXh0ZW5zaW9ucyA9IHt9O1xuXG5mdW5jdGlvbiBhc3NlcnRJc1NpbXVsYXRvciAoZHJpdmVyKSB7XG4gIGlmICghZHJpdmVyLmlzU2ltdWxhdG9yKCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0Jpb21ldHJpYyBlbnJvbGxtZW50IGNhbiBvbmx5IGJlIHBlcmZvcm1lZCBvbiBTaW11bGF0b3InKTtcbiAgfVxufVxuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IEVucm9sbE9wdGlvbnNcbiAqXG4gKiBAcHJvcGVydHkgez9ib29sZWFufSBpc0VuYWJsZWQgW3RydWVdIC0gV2hldGhlciB0byBlbmFibGUvZGlzYWJsZSBiaW9tZXRyaWMgZW5yb2xsbWVudC5cbiAqL1xuXG4vKipcbiAqIEVucm9sbHMgYmlvbWV0cmljIGF1dGhlbnRpY2F0aW9uIG9uIFNpbXVsYXRvci5cbiAqXG4gKiBAcGFyYW0ge0Vucm9sbE9wdGlvbnN9IG9wdHMgLSBFbnJvbGxtZW50IG9wdGlvbnMuXG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgZW5yb2xsbWVudCBmYWlscyBvciB0aGUgZGV2aWNlIGlzIG5vdCBhIFNpbXVsYXRvci5cbiAqL1xuY29tbWFuZHMubW9iaWxlRW5yb2xsQmlvbWV0cmljID0gYXN5bmMgZnVuY3Rpb24gbW9iaWxlRW5yb2xsQmlvbWV0cmljIChvcHRzID0ge30pIHtcbiAgY29uc3Qge1xuICAgIGlzRW5hYmxlZCA9IHRydWUsXG4gIH0gPSBvcHRzO1xuXG4gIGFzc2VydElzU2ltdWxhdG9yKHRoaXMpO1xuXG4gIGF3YWl0IHRoaXMub3B0cy5kZXZpY2UuZW5yb2xsQmlvbWV0cmljKGlzRW5hYmxlZCk7XG59O1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IEJpb21ldHJpY01hdGNoT3B0aW9uc1xuICpcbiAqIEBwcm9wZXJ0eSB7P3N0cmluZ30gdHlwZSBbdG91Y2hJZF0gLSBUaGUgYmlvbWV0cmljIGZlYXR1cmUgbmFtZS5cbiAqIEBwcm9wZXJ0eSB7P2Jvb2xlYW59IG1hdGNoIFt0cnVlXSAtIFdoZXRoZXIgdG8gc2ltdWxhdGUgYmlvbWV0cmljIG1hdGNoIG9yIG5vbi1tYXRjaC5cbiAqL1xuXG4vKipcbiAqIEVtdWxhdGVzIGJpb21ldHJpYyBtYXRjaC9ub24tbWF0Y2ggZXZlbnQgb24gU2ltdWxhdG9yLlxuICogVGhlIGJpb21ldHJpYyBmZWF0dXJlIGlzIGV4cGVjdGVkIHRvIGJlIGFscmVhZHkgZW5yb2xsZWQgYmVmb3JlIGV4ZWN1dGluZyB0aGF0LlxuICpcbiAqIEBwYXJhbSB7QmlvbWV0cmljTWF0Y2hPcHRpb25zfSBvcHRzIC0gTWF0Y2hpbmcgb3B0aW9ucy5cbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiBtYXRjaGluZyBmYWlscyBvciB0aGUgZGV2aWNlIGlzIG5vdCBhIFNpbXVsYXRvci5cbiAqL1xuY29tbWFuZHMubW9iaWxlU2VuZEJpb21ldHJpY01hdGNoID0gYXN5bmMgZnVuY3Rpb24gbW9iaWxlU2VuZEJpb21ldHJpY01hdGNoIChvcHRzID0ge30pIHtcbiAgY29uc3Qge1xuICAgIG1hdGNoID0gdHJ1ZSxcbiAgICB0eXBlID0gJ3RvdWNoSWQnLFxuICB9ID0gb3B0cztcblxuICBhc3NlcnRJc1NpbXVsYXRvcih0aGlzKTtcblxuICBhd2FpdCB0aGlzLm9wdHMuZGV2aWNlLnNlbmRCaW9tZXRyaWNNYXRjaChtYXRjaCwgdHlwZSk7XG59O1xuXG4vKipcbiAqIENoZWNrcyB3aGV0aGVyIGJpb21ldHJpYyBpcyBjdXJyZW50bHkgZW5yb2xsZWQgb3Igbm90LlxuICpcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgYmlvbWV0cmljIGlzIGVucm9sbGVkLlxuICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBkZXRlY3Rpb24gZmFpbHMgb3IgdGhlIGRldmljZSBpcyBub3QgYSBTaW11bGF0b3IuXG4gKi9cbmNvbW1hbmRzLm1vYmlsZUlzQmlvbWV0cmljRW5yb2xsZWQgPSBhc3luYyBmdW5jdGlvbiBtb2JpbGVJc0Jpb21ldHJpY0Vucm9sbGVkICgpIHtcbiAgYXNzZXJ0SXNTaW11bGF0b3IodGhpcyk7XG5cbiAgcmV0dXJuIGF3YWl0IHRoaXMub3B0cy5kZXZpY2UuaXNCaW9tZXRyaWNFbnJvbGxlZCgpO1xufTtcblxuT2JqZWN0LmFzc2lnbihleHRlbnNpb25zLCBjb21tYW5kcywgaGVscGVycyk7XG5leHBvcnQgeyBjb21tYW5kcywgaGVscGVycyB9O1xuZXhwb3J0IGRlZmF1bHQgZXh0ZW5zaW9ucztcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLElBQUlBLFFBQVEsR0FBRyxDQUFDLENBQUM7RUFBRUMsT0FBTyxHQUFHLENBQUMsQ0FBQztFQUFFQyxVQUFVLEdBQUcsQ0FBQyxDQUFDO0FBQUNDLE9BQUEsQ0FBQUYsT0FBQSxHQUFBQSxPQUFBO0FBQUFFLE9BQUEsQ0FBQUgsUUFBQSxHQUFBQSxRQUFBO0FBRWpELFNBQVNJLGlCQUFpQkEsQ0FBRUMsTUFBTSxFQUFFO0VBQ2xDLElBQUksQ0FBQ0EsTUFBTSxDQUFDQyxXQUFXLEVBQUUsRUFBRTtJQUN6QixNQUFNLElBQUlDLEtBQUssQ0FBQyx5REFBeUQsQ0FBQztFQUM1RTtBQUNGO0FBY0FQLFFBQVEsQ0FBQ1EscUJBQXFCLEdBQUcsZUFBZUEscUJBQXFCQSxDQUFFQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLEVBQUU7RUFDaEYsTUFBTTtJQUNKQyxTQUFTLEdBQUc7RUFDZCxDQUFDLEdBQUdELElBQUk7RUFFUkwsaUJBQWlCLENBQUMsSUFBSSxDQUFDO0VBRXZCLE1BQU0sSUFBSSxDQUFDSyxJQUFJLENBQUNFLE1BQU0sQ0FBQ0MsZUFBZSxDQUFDRixTQUFTLENBQUM7QUFDbkQsQ0FBQztBQWdCRFYsUUFBUSxDQUFDYSx3QkFBd0IsR0FBRyxlQUFlQSx3QkFBd0JBLENBQUVKLElBQUksR0FBRyxDQUFDLENBQUMsRUFBRTtFQUN0RixNQUFNO0lBQ0pLLEtBQUssR0FBRyxJQUFJO0lBQ1pDLElBQUksR0FBRztFQUNULENBQUMsR0FBR04sSUFBSTtFQUVSTCxpQkFBaUIsQ0FBQyxJQUFJLENBQUM7RUFFdkIsTUFBTSxJQUFJLENBQUNLLElBQUksQ0FBQ0UsTUFBTSxDQUFDSyxrQkFBa0IsQ0FBQ0YsS0FBSyxFQUFFQyxJQUFJLENBQUM7QUFDeEQsQ0FBQztBQVFEZixRQUFRLENBQUNpQix5QkFBeUIsR0FBRyxlQUFlQSx5QkFBeUJBLENBQUEsRUFBSTtFQUMvRWIsaUJBQWlCLENBQUMsSUFBSSxDQUFDO0VBRXZCLE9BQU8sTUFBTSxJQUFJLENBQUNLLElBQUksQ0FBQ0UsTUFBTSxDQUFDTyxtQkFBbUIsRUFBRTtBQUNyRCxDQUFDO0FBRURDLE1BQU0sQ0FBQ0MsTUFBTSxDQUFDbEIsVUFBVSxFQUFFRixRQUFRLEVBQUVDLE9BQU8sQ0FBQztBQUFDLElBQUFvQixRQUFBLEdBRTlCbkIsVUFBVTtBQUFBQyxPQUFBLENBQUFtQixPQUFBLEdBQUFELFFBQUEifQ==