{"version":3,"file":"biometric.js","names":["commands","helpers","extensions","exports","assertIsSimulator","driver","isSimulator","Error","mobileEnrollBiometric","opts","isEnabled","device","enrollBiometric","mobileSendBiometricMatch","match","type","sendBiometricMatch","mobileIsBiometricEnrolled","isBiometricEnrolled","Object","assign","_default","default"],"sources":["../../../lib/commands/biometric.js"],"sourcesContent":["let commands = {}, helpers = {}, extensions = {};\n\nfunction assertIsSimulator (driver) {\n  if (!driver.isSimulator()) {\n    throw new Error('Biometric enrollment can only be performed on Simulator');\n  }\n}\n\n/**\n * @typedef {Object} EnrollOptions\n *\n * @property {?boolean} isEnabled [true] - Whether to enable/disable biometric enrollment.\n */\n\n/**\n * Enrolls biometric authentication on Simulator.\n *\n * @param {EnrollOptions} opts - Enrollment options.\n * @throws {Error} If enrollment fails or the device is not a Simulator.\n */\ncommands.mobileEnrollBiometric = async function mobileEnrollBiometric (opts = {}) {\n  const {\n    isEnabled = true,\n  } = opts;\n\n  assertIsSimulator(this);\n\n  await this.opts.device.enrollBiometric(isEnabled);\n};\n\n/**\n * @typedef {Object} BiometricMatchOptions\n *\n * @property {?string} type [touchId] - The biometric feature name.\n * @property {?boolean} match [true] - Whether to simulate biometric match or non-match.\n */\n\n/**\n * Emulates biometric match/non-match event on Simulator.\n * The biometric feature is expected to be already enrolled before executing that.\n *\n * @param {BiometricMatchOptions} opts - Matching options.\n * @throws {Error} If matching fails or the device is not a Simulator.\n */\ncommands.mobileSendBiometricMatch = async function mobileSendBiometricMatch (opts = {}) {\n  const {\n    match = true,\n    type = 'touchId',\n  } = opts;\n\n  assertIsSimulator(this);\n\n  await this.opts.device.sendBiometricMatch(match, type);\n};\n\n/**\n * Checks whether biometric is currently enrolled or not.\n *\n * @return {boolean} True if biometric is enrolled.\n * @throws {Error} If the detection fails or the device is not a Simulator.\n */\ncommands.mobileIsBiometricEnrolled = async function mobileIsBiometricEnrolled () {\n  assertIsSimulator(this);\n\n  return await this.opts.device.isBiometricEnrolled();\n};\n\nObject.assign(extensions, commands, helpers);\nexport { commands, helpers };\nexport default extensions;\n"],"mappings":";;;;;;;AAAA,IAAIA,QAAQ,GAAG,CAAC,CAAC;EAAEC,OAAO,GAAG,CAAC,CAAC;EAAEC,UAAU,GAAG,CAAC,CAAC;AAACC,OAAA,CAAAF,OAAA,GAAAA,OAAA;AAAAE,OAAA,CAAAH,QAAA,GAAAA,QAAA;AAEjD,SAASI,iBAAiBA,CAAEC,MAAM,EAAE;EAClC,IAAI,CAACA,MAAM,CAACC,WAAW,EAAE,EAAE;IACzB,MAAM,IAAIC,KAAK,CAAC,yDAAyD,CAAC;EAC5E;AACF;AAcAP,QAAQ,CAACQ,qBAAqB,GAAG,eAAeA,qBAAqBA,CAAEC,IAAI,GAAG,CAAC,CAAC,EAAE;EAChF,MAAM;IACJC,SAAS,GAAG;EACd,CAAC,GAAGD,IAAI;EAERL,iBAAiB,CAAC,IAAI,CAAC;EAEvB,MAAM,IAAI,CAACK,IAAI,CAACE,MAAM,CAACC,eAAe,CAACF,SAAS,CAAC;AACnD,CAAC;AAgBDV,QAAQ,CAACa,wBAAwB,GAAG,eAAeA,wBAAwBA,CAAEJ,IAAI,GAAG,CAAC,CAAC,EAAE;EACtF,MAAM;IACJK,KAAK,GAAG,IAAI;IACZC,IAAI,GAAG;EACT,CAAC,GAAGN,IAAI;EAERL,iBAAiB,CAAC,IAAI,CAAC;EAEvB,MAAM,IAAI,CAACK,IAAI,CAACE,MAAM,CAACK,kBAAkB,CAACF,KAAK,EAAEC,IAAI,CAAC;AACxD,CAAC;AAQDf,QAAQ,CAACiB,yBAAyB,GAAG,eAAeA,yBAAyBA,CAAA,EAAI;EAC/Eb,iBAAiB,CAAC,IAAI,CAAC;EAEvB,OAAO,MAAM,IAAI,CAACK,IAAI,CAACE,MAAM,CAACO,mBAAmB,EAAE;AACrD,CAAC;AAEDC,MAAM,CAACC,MAAM,CAAClB,UAAU,EAAEF,QAAQ,EAAEC,OAAO,CAAC;AAAC,IAAAoB,QAAA,GAE9BnB,UAAU;AAAAC,OAAA,CAAAmB,OAAA,GAAAD,QAAA"}