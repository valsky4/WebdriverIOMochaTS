{"version":3,"file":"certificate.js","names":["_lodash","_interopRequireDefault","require","_support","_asyncbox","_bluebird","_os","_path","_http","_teen_process","_portscanner","_pyIosDeviceClient","_driver","extensions","commands","exports","CONFIG_EXTENSION","HOST_PORT_RANGE","TMPSERVER_STARTUP_TIMEOUT","Settings","General","type","value","Profile","About","Certificate_Trust_Settings","Button","Install","Allow","Done","Return_to_Settings","Alert","extractCommonName","certBuffer","tempCert","tempDir","open","prefix","suffix","fs","writeFile","path","stdout","exec","parseCommonName","err","Error","message","rimraf","LIBRE_SSL_PATTERN","OPEN_SSL_PATTERN","stringCertificate","result","reduce","acc","r","match","toMobileConfig","commonName","getUUID","util","uuidV4","toUpperCase","contentUuid","PayloadContent","PayloadCertificateFileName","PayloadDescription","PayloadDisplayName","PayloadIdentifier","PayloadType","PayloadUUID","PayloadVersion","os","hostname","split","PayloadRemovalDisallowed","clickElement","driver","locator","options","element","timeout","skipIfInvisible","lookupDelay","retryInterval","findNativeElementOrElements","JSON","stringify","nativeClick","installPre122Certificate","B","delay","trustCertificateInPreferences","name","switchLocator","retry","mobileSwipe","direction","postAcceptAlert","installPost122Certificate","activateApp","isCertFound","swipeNum","mobileInstallCertificate","opts","content","isRoot","_","isEmpty","isSimulator","methodName","device","simctl","Buffer","from","toString","raw","e","log","debug","info","client","Pyidevice","udid","assertExists","installProfile","payload","tmpRoot","openDir","tmpPort","findAPortNotInUse","configName","configPath","resolve","tmpServer","http","createServer","res","configFile","readFile","end","cn","mobileConfig","plist","updatePlistFile","host","certUrl","listen","waitForCondition","checkPortStatus","ign","waitMs","intervalMs","isRealDevice","proxyCommand","url","isWebContext","setUrl","openUrl","isCertAlreadyInstalled","compareVersions","platformVersion","bundleId","warn","toInMemoryBase64","close","mobileListCertificates","errors","NotImplementedError","listProfiles","Object","assign","_default","default"],"sources":["../../../lib/commands/certificate.js"],"sourcesContent":["import _ from 'lodash';\nimport { fs, plist, tempDir, util } from 'appium/support';\nimport { retryInterval, retry, waitForCondition } from 'asyncbox';\nimport B from 'bluebird';\nimport os from 'os';\nimport path from 'path';\nimport http from 'http';\nimport { exec } from 'teen_process';\nimport { findAPortNotInUse, checkPortStatus } from 'portscanner';\nimport Pyidevice from '../py-ios-device-client';\nimport { errors } from 'appium/driver';\n\nlet extensions = {}, commands = {};\n\nconst CONFIG_EXTENSION = 'mobileconfig';\nconst HOST_PORT_RANGE = [38200, 38299];\nconst TMPSERVER_STARTUP_TIMEOUT = 5000;\nconst Settings = {\n  General: {\n    type: 'accessibility id',\n    value: 'General',\n  },\n  Profile: {\n    type: '-ios predicate string',\n    value: `name BEGINSWITH 'Profile'`,\n  },\n  About: {\n    type: 'accessibility id',\n    value: 'About',\n  },\n  Certificate_Trust_Settings: {\n    type: 'accessibility id',\n    value: 'Certificate Trust Settings',\n  },\n};\nconst Button = {\n  Install: {\n    type: 'accessibility id',\n    value: 'Install',\n  },\n  Allow: {\n    type: 'accessibility id',\n    value: 'Allow',\n  },\n  Done: {\n    type: 'accessibility id',\n    value: 'Done',\n  },\n  Return_to_Settings: {\n    type: 'accessibility id',\n    value: 'Return to Settings',\n  },\n};\nconst Alert = {\n  Install: {\n    type: '-ios class chain',\n    value: '**/XCUIElementTypeAny[`type == \\'XCUIElementTypeAlert\\' OR type == \\'XCUIElementTypeSheet\\'`]/**/XCUIElementTypeButton[`label == \\'Install\\'`]',\n  },\n};\n\n\nasync function extractCommonName (certBuffer) {\n  const tempCert = await tempDir.open({\n    prefix: 'cert',\n    suffix: '.cer'\n  });\n  try {\n    await fs.writeFile(tempCert.path, certBuffer);\n    const {stdout} = await exec('openssl', ['x509', '-noout', '-subject', '-in', tempCert.path]);\n    return parseCommonName(stdout);\n  } catch (err) {\n    throw new Error(`Cannot parse common name value from the certificate. Is it valid and base64-encoded? ` +\n                    `Original error: ${err.message}`);\n  } finally {\n    await fs.rimraf(tempCert.path);\n  }\n}\n\nconst LIBRE_SSL_PATTERN = /\\/CN=([^\\/]+)/; // eslint-disable-line no-useless-escape\nconst OPEN_SSL_PATTERN = /,\\sCN\\s=\\s([^,]+)/;\n\nfunction parseCommonName (stringCertificate) {\n  const result = [LIBRE_SSL_PATTERN, OPEN_SSL_PATTERN].reduce((acc, r) => {\n    if (acc) {\n      return acc;\n    }\n    const match = r.exec(stringCertificate);\n    return match && match[1];\n  }, null);\n  if (!result) {\n    throw new Error(`There is no common name value in '${stringCertificate}' output`);\n  }\n  return result;\n}\n\n/**\n * Generates Apple's over-the-air configuration profile\n * for certificate deployment based on the given PEM certificate content.\n * Read https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/iPhoneOTAConfiguration/Introduction/Introduction.html\n * for more details on such profiles.\n *\n * @param {Buffer} certBuffer - The actual content of PEM certificate encoded into NodeJS buffer\n * @param {string} commonName - Certificate's common name\n * @returns {Object} The encoded structure of the given certificate, which is ready to be passed\n * as an argument to plist builder\n * @throws {Error} If the given certificate cannot be parsed\n */\nfunction toMobileConfig (certBuffer, commonName) {\n  const getUUID = () => util.uuidV4().toUpperCase();\n  const contentUuid = getUUID();\n  return {\n    PayloadContent: [{\n      PayloadCertificateFileName: `${commonName}.cer`,\n      PayloadContent: certBuffer,\n      PayloadDescription: 'Adds a CA root certificate',\n      PayloadDisplayName: commonName,\n      PayloadIdentifier: `com.apple.security.root.${contentUuid}`,\n      PayloadType: 'com.apple.security.root',\n      PayloadUUID: contentUuid,\n      PayloadVersion: 1\n    }],\n    PayloadDisplayName: commonName,\n    PayloadIdentifier: `${os.hostname().split('.')[0]}.${getUUID()}`,\n    PayloadRemovalDisallowed: false,\n    PayloadType: 'Configuration',\n    PayloadUUID: getUUID(),\n    PayloadVersion: 1\n  };\n}\n\nasync function clickElement (driver, locator, options = {}) {\n  let element = null;\n  const {\n    timeout = 5000,\n    skipIfInvisible = false\n  } = options;\n  const lookupDelay = 500;\n  try {\n    element = await retryInterval(timeout < lookupDelay ? 1 : timeout / lookupDelay, lookupDelay,\n      () => driver.findNativeElementOrElements(locator.type, locator.value, false)\n    );\n  } catch (err) {\n    if (skipIfInvisible) {\n      return false;\n    }\n    throw new Error(`Cannot find ${JSON.stringify(locator)} within ${timeout}ms timeout`);\n  }\n  await driver.nativeClick(element);\n  return true;\n}\n\nasync function installPre122Certificate (driver) {\n  // Accept Safari alert\n  await clickElement(driver, Button.Allow, {\n    // certificate load might take some time on slow machines\n    timeout: 15000,\n  });\n  // Wait until Preferences are opened\n  await B.delay(2000);\n\n  // Go through Preferences wizard\n  if (!await clickElement(driver, Button.Install, {\n    skipIfInvisible: true,\n  })) {\n    return false;\n  }\n  // We need to click Install button on two different tabs\n  // The second one confirms the previous\n  await B.delay(1500);\n  await clickElement(driver, Button.Install);\n  // Accept alert\n  await clickElement(driver, Alert.Install);\n  // Finish adding certificate\n  await clickElement(driver, Button.Done);\n  return true;\n}\n\nasync function trustCertificateInPreferences (driver, name) {\n  await clickElement(driver, Settings.General);\n  await clickElement(driver, Settings.About);\n  const switchLocator = {\n    type: '-ios class chain',\n    value: `**/XCUIElementTypeCell[\\`label == '${name}'\\`]/**/XCUIElementTypeSwitch`,\n  };\n  await retry(5, async () => {\n    await driver.mobileSwipe({\n      element: await driver.findNativeElementOrElements('class name', 'XCUIElementTypeTable', false),\n      direction: 'up'\n    });\n    await clickElement(driver, Settings.Certificate_Trust_Settings, {\n      timeout: 500,\n    });\n\n    await driver.findNativeElementOrElements(switchLocator.type, switchLocator.value, false);\n  });\n  // Only click the switch if it is set to Off\n  if (await clickElement(driver, {\n    type: switchLocator.type,\n    value: `${switchLocator.value}[\\`value == '0'\\`]`\n  }, {\n    timeout: 1000,\n    skipIfInvisible: true,\n  })) {\n    await driver.postAcceptAlert();\n  }\n}\n\nasync function installPost122Certificate (driver, name) {\n  // Accept Safari alert\n  await clickElement(driver, Button.Allow, {\n    // certificate load might take some time on slow machines\n    timeout: 15000,\n  });\n  // Wait for the second alert\n  await B.delay(2000);\n\n  await driver.postAcceptAlert();\n  await driver.activateApp('com.apple.Preferences');\n  await clickElement(driver, Settings.General);\n  await clickElement(driver, Settings.Profile);\n  // Select the target cert\n  let isCertFound = false;\n  for (let swipeNum = 0; swipeNum < 5; ++swipeNum) {\n    if (await clickElement(driver, {\n      type: '-ios class chain',\n      value: `**/XCUIElementTypeCell[\\`label == '${name}'\\`]`,\n    }, {\n      timeout: 500,\n      skipIfInvisible: true,\n    })) {\n      isCertFound = true;\n      break;\n    }\n\n    await driver.mobileSwipe({\n      element: await driver.findNativeElementOrElements('class name', 'XCUIElementTypeTable', false),\n      direction: 'up'\n    });\n  }\n  if (!isCertFound) {\n    throw new Error(`'${name}' cannot be found in the certificates list`);\n  }\n\n  // Install option is only visible if the cert is not installed yet\n  if (!await clickElement(driver, Button.Install, {\n    skipIfInvisible: true,\n  })) {\n    return false;\n  }\n  await B.delay(1500);\n  // Confirm untrusted cert install\n  await clickElement(driver, Button.Install);\n  // Accept alert\n  await clickElement(driver, Alert.Install);\n  // Finish adding certificate\n  await clickElement(driver, Button.Done);\n\n  return true;\n}\n\n/**\n * @typedef {Object} CertificateInstallationOptions\n *\n * @property {!string} content - Base64-encoded content of the public certificate\n * @property {?string} commonName - Common name of the certificate. If this is not set\n * then the script will try to parse it from the given certificate content.\n * @property {?boolean} isRoot [true] - This option defines where the certificate should be\n * installed to: either Trusted Root Store (`true`, the default option) or\n * the Keychain (`false`). On environments other than Xcode 11.4+ Simulator this\n * option is ignored.\n */\n\n/**\n * Installs a custom certificate onto the device.\n * Since Xcode SDK 11.4 Apple has added a dedicated simctl subcommand to quickly handle\n * certificates on Simulator over CLI.\n * On real devices or simulators before Xcode 11.4 SDK\n * Apple provides no official way to do it via the command line.\n * In such case (and also as a fallback if CLI setup fails)\n * this method tries to wrap the certificate into .mobileconfig format\n * and then deploys the wrapped file to the internal HTTP server,\n * so one can open it via mobile Safari.\n * Then the algorithm goes through the profile installation procedure by\n * clicking the necessary buttons using WebDriverAgent.\n *\n * @param {CertificateInstallationOptions} opts\n * @returns {?string} The content of the generated .mobileconfig file as\n * base64-encoded string. This config might be useful for debugging purposes.\n * If the certificate has been successfully set via CLI then nothing is returned.\n */\ncommands.mobileInstallCertificate = async function mobileInstallCertificate (opts = {}) {\n  const {\n    content,\n    commonName,\n    isRoot = true,\n  } = opts;\n  if (_.isEmpty(content)) {\n    throw new Error('Certificate content should not be empty');\n  }\n\n  if (this.isSimulator()) {\n    try {\n      const methodName = isRoot ? 'addRootCertificate' : 'addCertificate';\n      await this.opts.device.simctl[methodName](\n        Buffer.from(content, 'base64').toString(), {raw: true}\n      );\n      return;\n    } catch (e) {\n      this.log.debug(e);\n      this.log.info(`The certificate cannot be installed via CLI. ` +\n        `Falling back to UI-based deployment`);\n    }\n  } else {\n    const client = new Pyidevice(this.opts.udid);\n    if (await client.assertExists(false)) {\n      await client.installProfile({payload: Buffer.from(content, 'base64')});\n      return;\n    } else {\n      this.log.info('pyidevice is not installed on your system. ' +\n        'Falling back to the (slow) UI-based installation');\n    }\n  }\n\n  const tmpRoot = await tempDir.openDir();\n  const tmpPort = await findAPortNotInUse(HOST_PORT_RANGE[0], HOST_PORT_RANGE[1]);\n  const configName = `appium.${CONFIG_EXTENSION}`;\n  const configPath = path.resolve(tmpRoot, configName);\n  const tmpServer = http.createServer(async function (_, res) {\n    const configFile = await fs.readFile(configPath);\n    res.end(configFile);\n  });\n  try {\n    const certBuffer = Buffer.from(content, 'base64');\n    const cn = commonName || await extractCommonName(certBuffer);\n    const mobileConfig = toMobileConfig(certBuffer, cn);\n    try {\n      await plist.updatePlistFile(configPath, mobileConfig, false, false);\n    } catch (err) {\n      throw new Error(`Cannot store the generated config as '${configPath}'. ` +\n                      `Original error: ${err.message}`);\n    }\n\n    try {\n      const host = os.hostname();\n      const certUrl = `http://${host}:${tmpPort}/${configName}`;\n      await tmpServer.listen(tmpPort);\n      try {\n        await waitForCondition(async () => {\n          try {\n            return (await checkPortStatus(tmpPort, host)) === 'open';\n          } catch (ign) {\n            return false;\n          }\n        }, {\n          waitMs: TMPSERVER_STARTUP_TIMEOUT,\n          intervalMs: 300,\n        });\n        this.log.debug(`The temporary web server is running at http://${host}:${tmpPort}`);\n      } catch (e) {\n        throw new Error(`The temporary web server cannot be started at http://${host}:${tmpPort}.`);\n      }\n      if (this.isRealDevice()) {\n        try {\n          await this.proxyCommand('/url', 'POST', {url: certUrl});\n        } catch (err) {\n          if (this.isWebContext()) {\n            // The command above does not always work on real devices\n            await this.setUrl(certUrl);\n          } else {\n            throw err;\n          }\n        }\n      } else {\n        await this.opts.device.openUrl(certUrl);\n      }\n\n      let isCertAlreadyInstalled = false;\n      if (util.compareVersions(this.opts.platformVersion, '>=', '12.2')) {\n        if (await installPost122Certificate(this, cn)) {\n          await clickElement(this, Settings.Profile);\n          await trustCertificateInPreferences(this, cn);\n        } else {\n          isCertAlreadyInstalled = true;\n        }\n      } else {\n        if (await installPre122Certificate(this)) {\n          await clickElement(this, Button.Return_to_Settings);\n          await trustCertificateInPreferences(this, cn);\n        } else {\n          isCertAlreadyInstalled = true;\n        }\n      }\n      if (isCertAlreadyInstalled) {\n        this.log.info(`It looks like the '${cn}' certificate has been already added to the CA root`);\n      }\n    } finally {\n      if (this.opts.bundleId) {\n        try {\n          await this.activateApp(this.opts.bundleId);\n        } catch (e) {\n          this.log.warn(`Cannot restore the application '${this.opts.bundleId}'. Original error: ${e.message}`);\n        }\n      }\n    }\n\n    return (await util.toInMemoryBase64(configPath)).toString();\n  } finally {\n    await tmpServer.close();\n    await fs.rimraf(tmpRoot);\n  }\n};\n\n/**\n * Lists installed certificates for real devices only\n * if [py-ios-device](https://github.com/YueChen-C/py-ios-device) tool\n * is available on the server machine.\n *\n * @returns {Object} Returns map of certificates installed on the real device\n * @throws {Error} If attempting to list certificates for simulated device or if py-ios-device\n * is not installed\n */\ncommands.mobileListCertificates = async function mobileListCertificates () {\n  if (!this.isRealDevice()) {\n    throw new errors.NotImplementedError('This extension is only supported on real devices');\n  }\n  const client = new Pyidevice(this.opts.udid);\n  if (await client.assertExists(false)) {\n    return await client.listProfiles();\n  }\n  throw new Error('pyidevice is not installed on your system, command cannot be executed.');\n};\n\nObject.assign(extensions, commands);\nexport { commands, parseCommonName };\nexport default extensions;\n"],"mappings":"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"}