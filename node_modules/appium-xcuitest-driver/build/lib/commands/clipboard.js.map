{"version":3,"file":"clipboard.js","names":["extensions","commands","exports","setClipboard","content","contentType","proxyCommand","getClipboard","Object","assign","_default","default"],"sources":["../../../lib/commands/clipboard.js"],"sourcesContent":["let extensions = {}, commands = {};\n\n\n/**\n * Sets the primary clipboard's content on the device under test.\n *\n * @param {!string} content - The content to be set as base64 encoded string.\n * @param {?string} contentType [plaintext] - The type of the content to set.\n *                                            Only `plaintext`, 'image and 'url' are supported.\n */\ncommands.setClipboard = async function setClipboard (content, contentType) {\n  await this.proxyCommand('/wda/setPasteboard', 'POST', {\n    content,\n    contentType,\n  });\n};\n\n/**\n * Gets the content of the primary clipboard on the device under test.\n *\n * @param {?string} contentType [plaintext] - The type of the content to get.\n *                                            Only `plaintext`, 'image and 'url' are supported.\n * @returns {string} The actual clipboard content encoded into base64 string.\n * An empty string is returned if the clipboard contains no data.\n */\ncommands.getClipboard = async function getClipboard (contentType) {\n  return await this.proxyCommand('/wda/getPasteboard', 'POST', {\n    contentType,\n  });\n};\n\n\nObject.assign(extensions, commands);\nexport { commands };\nexport default extensions;\n"],"mappings":";;;;;;;AAAA,IAAIA,UAAU,GAAG,CAAC,CAAC;EAAEC,QAAQ,GAAG,CAAC,CAAC;AAACC,OAAA,CAAAD,QAAA,GAAAA,QAAA;AAUnCA,QAAQ,CAACE,YAAY,GAAG,eAAeA,YAAYA,CAAEC,OAAO,EAAEC,WAAW,EAAE;EACzE,MAAM,IAAI,CAACC,YAAY,CAAC,oBAAoB,EAAE,MAAM,EAAE;IACpDF,OAAO;IACPC;EACF,CAAC,CAAC;AACJ,CAAC;AAUDJ,QAAQ,CAACM,YAAY,GAAG,eAAeA,YAAYA,CAAEF,WAAW,EAAE;EAChE,OAAO,MAAM,IAAI,CAACC,YAAY,CAAC,oBAAoB,EAAE,MAAM,EAAE;IAC3DD;EACF,CAAC,CAAC;AACJ,CAAC;AAGDG,MAAM,CAACC,MAAM,CAACT,UAAU,EAAEC,QAAQ,CAAC;AAAC,IAAAS,QAAA,GAErBV,UAAU;AAAAE,OAAA,CAAAS,OAAA,GAAAD,QAAA"}