"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.commands = void 0;
require("source-map-support/register");
var _appiumIosDevice = require("appium-ios-device");
var _lodash = _interopRequireDefault(require("lodash"));
var _support = require("appium/support");
const commands = {};
exports.commands = commands;
function requireConditionInducerCompatibleDevice(driver) {
  if (driver.isSimulator()) {
    driver.log.errorAndThrow('Condition inducer only works on real devices');
  }
  if (_support.util.compareVersions(driver.opts.platformVersion, '<', '13.0')) {
    driver.log.errorAndThrow('Condition inducer is only supported since iOS 13+');
  }
}
commands.mobileListConditionInducers = async function listConditionInducers() {
  requireConditionInducerCompatibleDevice(this);
  const conditionInducerService = await _appiumIosDevice.services.startInstrumentService(this.opts.device.udid);
  try {
    const ret = await conditionInducerService.callChannel(_appiumIosDevice.INSTRUMENT_CHANNEL.CONDITION_INDUCER, 'availableConditionInducers');
    return ret.selector;
  } finally {
    conditionInducerService.close();
  }
};
commands.mobileEnableConditionInducer = async function enableConditionInducer(options = {}) {
  requireConditionInducerCompatibleDevice(this);
  if (this._conditionInducerService && !this._conditionInducerService._socketClient.destroyed) {
    this.log.errorAndThrow(`Condition inducer has been started. A condition is already active.`);
  }
  const {
    conditionID,
    profileID
  } = options;
  this._conditionInducerService = await _appiumIosDevice.services.startInstrumentService(this.opts.device.udid);
  const ret = await this._conditionInducerService.callChannel(_appiumIosDevice.INSTRUMENT_CHANNEL.CONDITION_INDUCER, 'enableConditionWithIdentifier:profileIdentifier:', conditionID, profileID);
  if (!_lodash.default.isBoolean(ret.selector)) {
    this._conditionInducerService.close();
    this._conditionInducerService = null;
    this.log.errorAndThrow(`Enable condition inducer error: '${JSON.stringify(ret.selector)}'`);
  }
  return ret.selector;
};
commands.mobileDisableConditionInducer = async function disableConditionInducer() {
  if (!this._conditionInducerService) {
    this.log.warn('Condition inducer server is not started');
    return false;
  }
  try {
    const ret = await this._conditionInducerService.callChannel(_appiumIosDevice.INSTRUMENT_CHANNEL.CONDITION_INDUCER, 'disableActiveCondition');
    if (!_lodash.default.isBoolean(ret.selector)) {
      this.log.warn(`Disable condition inducer error: '${JSON.stringify(ret.selector)}'`);
      return false;
    }
    return ret.selector;
  } finally {
    if (this._conditionInducerService) {
      this._conditionInducerService.close();
      this._conditionInducerService = null;
    }
  }
};
var _default = commands;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,