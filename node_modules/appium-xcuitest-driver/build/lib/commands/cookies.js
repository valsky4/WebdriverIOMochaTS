"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.helpers = exports.default = exports.commands = void 0;
require("source-map-support/register");
var _lodash = _interopRequireDefault(require("lodash"));
var _driver = require("appium/driver");
let commands = {},
  helpers = {},
  extensions = {};
exports.helpers = helpers;
exports.commands = commands;
commands.getCookies = async function getCookies() {
  if (!this.isWebContext()) {
    throw new _driver.errors.NotImplementedError();
  }
  const cookies = (await this.remote.getCookies()) || {
    cookies: []
  };
  const decodedCookieValues = cookies.cookies.map(cookie => {
    try {
      return decodeURI(cookie.value);
    } catch (error) {
      this.log.debug(`Cookie ${cookie.name} was not decoded successfully. Cookie value: ${cookie.value}`);
      this.log.warn(error);
      return undefined;
    }
  });
  return _lodash.default.zip(cookies.cookies, decodedCookieValues).filter(([, value]) => !_lodash.default.isUndefined(value)).map(([cookie, value]) => Object.assign({}, cookie, {
    value
  }));
};
commands.deleteCookie = async function deleteCookie(cookieName) {
  if (!this.isWebContext()) {
    throw new _driver.errors.NotImplementedError();
  }
  const cookies = await this.getCookies();
  const cookie = cookies.find(cookie => cookie.name === cookieName);
  if (!cookie) {
    this.log.debug(`Cookie '${cookieName}' not found. Ignoring.`);
    return true;
  }
  await this._deleteCookie(cookie);
  return true;
};
commands.deleteCookies = async function deleteCookies() {
  if (!this.isWebContext()) {
    throw new _driver.errors.NotImplementedError();
  }
  const cookies = await this.getCookies();
  for (const cookie of cookies) {
    await this._deleteCookie(cookie);
  }
  return true;
};
helpers._deleteCookie = async function _deleteCookie(cookie) {
  const url = `http${cookie.secure ? 's' : ''}://${cookie.domain}${cookie.path}`;
  return await this.remote.deleteCookie(cookie.name, url);
};
Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfbG9kYXNoIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfZHJpdmVyIiwiY29tbWFuZHMiLCJoZWxwZXJzIiwiZXh0ZW5zaW9ucyIsImV4cG9ydHMiLCJnZXRDb29raWVzIiwiaXNXZWJDb250ZXh0IiwiZXJyb3JzIiwiTm90SW1wbGVtZW50ZWRFcnJvciIsImNvb2tpZXMiLCJyZW1vdGUiLCJkZWNvZGVkQ29va2llVmFsdWVzIiwibWFwIiwiY29va2llIiwiZGVjb2RlVVJJIiwidmFsdWUiLCJlcnJvciIsImxvZyIsImRlYnVnIiwibmFtZSIsIndhcm4iLCJ1bmRlZmluZWQiLCJfIiwiemlwIiwiZmlsdGVyIiwiaXNVbmRlZmluZWQiLCJPYmplY3QiLCJhc3NpZ24iLCJkZWxldGVDb29raWUiLCJjb29raWVOYW1lIiwiZmluZCIsIl9kZWxldGVDb29raWUiLCJkZWxldGVDb29raWVzIiwidXJsIiwic2VjdXJlIiwiZG9tYWluIiwicGF0aCIsIl9kZWZhdWx0IiwiZGVmYXVsdCJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9jb21tYW5kcy9jb29raWVzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyBlcnJvcnMgfSBmcm9tICdhcHBpdW0vZHJpdmVyJztcblxuXG5sZXQgY29tbWFuZHMgPSB7fSwgaGVscGVycyA9IHt9LCBleHRlbnNpb25zID0ge307XG5cbmNvbW1hbmRzLmdldENvb2tpZXMgPSBhc3luYyBmdW5jdGlvbiBnZXRDb29raWVzICgpIHtcbiAgaWYgKCF0aGlzLmlzV2ViQ29udGV4dCgpKSB7XG4gICAgdGhyb3cgbmV3IGVycm9ycy5Ob3RJbXBsZW1lbnRlZEVycm9yKCk7XG4gIH1cblxuICAvLyBnZXQgdGhlIGNvb2tpZXMgZnJvbSB0aGUgcmVtb3RlIGRlYnVnZ2VyLCBvciBhbiBlbXB0eSBvYmplY3RcbiAgY29uc3QgY29va2llcyA9IGF3YWl0IHRoaXMucmVtb3RlLmdldENvb2tpZXMoKSB8fCB7Y29va2llczogW119O1xuXG4gIC8vIHRoZSB2YWx1ZSBpcyBVUkkgZW5jb2RlZCwgc28gZGVjb2RlIGl0IHNhZmVseVxuICBjb25zdCBkZWNvZGVkQ29va2llVmFsdWVzID0gY29va2llcy5jb29raWVzLm1hcCgoY29va2llKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBkZWNvZGVVUkkoY29va2llLnZhbHVlKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhpcy5sb2cuZGVidWcoYENvb2tpZSAke2Nvb2tpZS5uYW1lfSB3YXMgbm90IGRlY29kZWQgc3VjY2Vzc2Z1bGx5LiBDb29raWUgdmFsdWU6ICR7Y29va2llLnZhbHVlfWApO1xuICAgICAgdGhpcy5sb2cud2FybihlcnJvcik7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gemlwIGNvb2tlcyB3aXRoIGRlY29kZWQgdmFsdWUsIHJlbW92aW5nIHVuZGVmaW5lZCBjb29raWUgdmFsdWVzXG4gIHJldHVybiBfLnppcChjb29raWVzLmNvb2tpZXMsIGRlY29kZWRDb29raWVWYWx1ZXMpXG4gICAgLmZpbHRlcigoWywgdmFsdWVdKSA9PiAhXy5pc1VuZGVmaW5lZCh2YWx1ZSkpXG4gICAgLm1hcCgoW2Nvb2tpZSwgdmFsdWVdKSA9PiBPYmplY3QuYXNzaWduKHt9LCBjb29raWUsIHt2YWx1ZX0pKTtcbn07XG5cbmNvbW1hbmRzLmRlbGV0ZUNvb2tpZSA9IGFzeW5jIGZ1bmN0aW9uIGRlbGV0ZUNvb2tpZSAoY29va2llTmFtZSkge1xuICBpZiAoIXRoaXMuaXNXZWJDb250ZXh0KCkpIHtcbiAgICB0aHJvdyBuZXcgZXJyb3JzLk5vdEltcGxlbWVudGVkRXJyb3IoKTtcbiAgfVxuXG4gIGNvbnN0IGNvb2tpZXMgPSBhd2FpdCB0aGlzLmdldENvb2tpZXMoKTtcbiAgY29uc3QgY29va2llID0gY29va2llcy5maW5kKChjb29raWUpID0+IGNvb2tpZS5uYW1lID09PSBjb29raWVOYW1lKTtcbiAgaWYgKCFjb29raWUpIHtcbiAgICB0aGlzLmxvZy5kZWJ1ZyhgQ29va2llICcke2Nvb2tpZU5hbWV9JyBub3QgZm91bmQuIElnbm9yaW5nLmApO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgYXdhaXQgdGhpcy5fZGVsZXRlQ29va2llKGNvb2tpZSk7XG4gIHJldHVybiB0cnVlO1xufTtcblxuY29tbWFuZHMuZGVsZXRlQ29va2llcyA9IGFzeW5jIGZ1bmN0aW9uIGRlbGV0ZUNvb2tpZXMgKCkge1xuICBpZiAoIXRoaXMuaXNXZWJDb250ZXh0KCkpIHtcbiAgICB0aHJvdyBuZXcgZXJyb3JzLk5vdEltcGxlbWVudGVkRXJyb3IoKTtcbiAgfVxuXG4gIGNvbnN0IGNvb2tpZXMgPSBhd2FpdCB0aGlzLmdldENvb2tpZXMoKTtcbiAgZm9yIChjb25zdCBjb29raWUgb2YgY29va2llcykge1xuICAgIGF3YWl0IHRoaXMuX2RlbGV0ZUNvb2tpZShjb29raWUpO1xuICB9XG4gIHJldHVybiB0cnVlO1xufTtcblxuaGVscGVycy5fZGVsZXRlQ29va2llID0gYXN5bmMgZnVuY3Rpb24gX2RlbGV0ZUNvb2tpZSAoY29va2llKSB7XG4gIGNvbnN0IHVybCA9IGBodHRwJHtjb29raWUuc2VjdXJlID8gJ3MnIDogJyd9Oi8vJHtjb29raWUuZG9tYWlufSR7Y29va2llLnBhdGh9YDtcbiAgcmV0dXJuIGF3YWl0IHRoaXMucmVtb3RlLmRlbGV0ZUNvb2tpZShjb29raWUubmFtZSwgdXJsKTtcbn07XG5cbk9iamVjdC5hc3NpZ24oZXh0ZW5zaW9ucywgY29tbWFuZHMsIGhlbHBlcnMpO1xuZXhwb3J0IHsgY29tbWFuZHMsIGhlbHBlcnMgfTtcbmV4cG9ydCBkZWZhdWx0IGV4dGVuc2lvbnM7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEsSUFBQUEsT0FBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsT0FBQSxHQUFBRCxPQUFBO0FBR0EsSUFBSUUs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