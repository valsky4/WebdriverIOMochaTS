{"version":3,"file":"log.js","names":["_lodash","_interopRequireDefault","require","_driver","_iosCrashLog","_iosSimulatorLog","_iosDeviceLog","_logger","_ws","_safariConsoleLog","_safariNetworkLog","extensions","WEBSOCKET_ENDPOINT","sessionId","DEFAULT_WS_PATHNAME_PREFIX","GET_SERVER_LOGS_FEATURE","extractLogs","logType","logsContainer","_","isEmpty","Error","logObject","logs","getLogs","supportedLogTypes","syslog","description","getter","self","crashlog","performance","safariConsole","safariNetwork","server","ensureFeatureEnabled","log","unwrap","record","map","x","timestamp","Date","now","level","message","prefix","startLogCapture","isUndefined","isCapturing","warn","IOSCrashLog","sim","opts","device","udid","isRealDevice","undefined","IOSDeviceLog","showLogs","showIOSLog","IOSSimulatorLog","xcodeVersion","iosSimulatorLogsPredicate","SafariConsoleLog","showSafariConsoleLog","SafariNetworkLog","showSafariNetworkLog","startCapture","err","mobileStartLogsBroadcast","pathname","getWebSocketHandlers","debug","info","wss","WebSocket","Server","noServer","on","ws","req","_req$connection","remoteIp","headers","connection","remoteAddress","_syslogWebsocketListener","logRecord","readyState","OPEN","send","code","reason","removeListener","closeMsg","toString","addWebSocketHandler","mobileStopLogsBroadcast","removeWebSocketHandler","_default","exports","default"],"sources":["../../../lib/commands/log.js"],"sourcesContent":["import _ from 'lodash';\nimport { DEFAULT_WS_PATHNAME_PREFIX } from 'appium/driver';\nimport { IOSCrashLog } from '../device-log/ios-crash-log';\nimport { IOSSimulatorLog } from '../device-log/ios-simulator-log';\nimport { IOSDeviceLog } from '../device-log/ios-device-log';\nimport log from '../logger';\nimport WebSocket from 'ws';\nimport SafariConsoleLog from '../device-log/safari-console-log';\nimport SafariNetworkLog from '../device-log/safari-network-log';\n\n\nconst extensions = {};\n\nconst WEBSOCKET_ENDPOINT = (sessionId) => `${DEFAULT_WS_PATHNAME_PREFIX}/session/${sessionId}/appium/device/syslog`;\nconst GET_SERVER_LOGS_FEATURE = 'get_server_logs';\n\nextensions.extractLogs = async function extractLogs (logType, logsContainer = {}) {\n  // make sure that we have logs at all\n  // otherwise it's not been initialized\n  if (_.isEmpty(logsContainer)) {\n    throw new Error('No logs currently available. Is the device/simulator started?');\n  }\n\n  // If logs captured successfully send response with data, else send error\n  const logObject = logsContainer[logType];\n  const logs = logObject ? await logObject.getLogs() : null;\n  if (logs) {\n    return logs;\n  }\n  throw new Error(`No logs of type '${logType}' found.`);\n};\n\nextensions.supportedLogTypes = {\n  syslog: {\n    description: 'System Logs - Device logs for iOS applications on real devices and simulators',\n    getter: async (self) => await self.extractLogs('syslog', self.logs),\n  },\n  crashlog: {\n    description: 'Crash Logs - Crash reports for iOS applications on real devices and simulators',\n    getter: async (self) => await self.extractLogs('crashlog', self.logs),\n  },\n  performance: {\n    description: 'Performance Logs - Debug Timelines on real devices and simulators',\n    getter: async (self) => await self.extractLogs('performance', self.logs),\n  },\n  safariConsole: {\n    description: 'Safari Console Logs - data written to the JS console in Safari',\n    getter: async (self) => await self.extractLogs('safariConsole', self.logs),\n  },\n  safariNetwork: {\n    description: 'Safari Network Logs - information about network operations undertaken by Safari',\n    getter: async (self) => await self.extractLogs('safariNetwork', self.logs),\n  },\n  server: {\n    description: 'Appium server logs',\n    getter: (self) => {\n      self.ensureFeatureEnabled(GET_SERVER_LOGS_FEATURE);\n      return log.unwrap().record\n        .map(function (x) {\n          return {\n            // npmlog does not keep timestamps in the history\n            timestamp: Date.now(),\n            level: 'ALL',\n            message: _.isEmpty(x.prefix) ? x.message : `[${x.prefix}] ${x.message}`,\n          };\n        });\n    },\n  },\n};\n\nextensions.startLogCapture = async function startLogCapture () {\n  this.logs = this.logs || {};\n  if (!_.isUndefined(this.logs.syslog) && this.logs.syslog.isCapturing) {\n    log.warn('Trying to start iOS log capture but it has already started!');\n    return true;\n  }\n  if (_.isUndefined(this.logs.syslog)) {\n    this.logs.crashlog = new IOSCrashLog({\n      sim: this.opts.device,\n      udid: this.isRealDevice() ? this.opts.udid : undefined,\n    });\n\n    if (this.isRealDevice()) {\n      this.logs.syslog = new IOSDeviceLog({\n        udid: this.opts.udid,\n        showLogs: this.opts.showIOSLog,\n      });\n    } else {\n      this.logs.syslog = new IOSSimulatorLog({\n        sim: this.opts.device,\n        showLogs: this.opts.showIOSLog,\n        xcodeVersion: this.xcodeVersion,\n        iosSimulatorLogsPredicate: this.opts.iosSimulatorLogsPredicate,\n      });\n    }\n    this.logs.safariConsole = new SafariConsoleLog(!!this.opts.showSafariConsoleLog);\n    this.logs.safariNetwork = new SafariNetworkLog(!!this.opts.showSafariNetworkLog);\n  }\n  try {\n    await this.logs.syslog.startCapture();\n  } catch (err) {\n    log.warn(`Continuing without capturing device logs: ${err.message}`);\n    return false;\n  }\n  await this.logs.crashlog.startCapture();\n  await this.logs.safariConsole.startCapture();\n  await this.logs.safariNetwork.startCapture();\n\n  return true;\n};\n\n/**\n * Starts iOS system logs broadcast websocket on the same host and port\n * where Appium server is running at `/ws/session/:sessionId:/appium/syslog` endpoint. The method\n * will return immediately if the web socket is already listening.\n *\n * Each connected webcoket listener will receive syslog lines\n * as soon as they are visible to Appium.\n */\nextensions.mobileStartLogsBroadcast = async function mobileStartLogsBroadcast () {\n  const pathname = WEBSOCKET_ENDPOINT(this.sessionId);\n  if (!_.isEmpty(await this.server.getWebSocketHandlers(pathname))) {\n    log.debug(`The system logs broadcasting web socket server is already listening at ${pathname}`);\n    return;\n  }\n\n  log.info(`Assigning system logs broadcasting web socket server to ${pathname}`);\n  // https://github.com/websockets/ws/blob/master/doc/ws.md\n  const wss = new WebSocket.Server({\n    noServer: true,\n  });\n  wss.on('connection', (ws, req) => {\n    if (req) {\n      const remoteIp = _.isEmpty(req.headers['x-forwarded-for'])\n        ? req.connection?.remoteAddress\n        : req.headers['x-forwarded-for'];\n      log.debug(`Established a new system logs listener web socket connection from ${remoteIp}`);\n    } else {\n      log.debug('Established a new system logs listener web socket connection');\n    }\n\n    if (_.isEmpty(this._syslogWebsocketListener)) {\n      this._syslogWebsocketListener = (logRecord) => {\n        if (ws?.readyState === WebSocket.OPEN) {\n          ws.send(logRecord.message);\n        }\n      };\n    }\n    this.logs.syslog.on('output', this._syslogWebsocketListener);\n\n    ws.on('close', (code, reason) => {\n      if (!_.isEmpty(this._syslogWebsocketListener)) {\n        this.logs.syslog.removeListener('output', this._syslogWebsocketListener);\n        this._syslogWebsocketListener = null;\n      }\n\n      let closeMsg = 'System logs listener web socket is closed.';\n      if (!_.isEmpty(code)) {\n        closeMsg += ` Code: ${code}.`;\n      }\n      if (!_.isEmpty(reason)) {\n        closeMsg += ` Reason: ${reason.toString()}.`;\n      }\n      log.debug(closeMsg);\n    });\n  });\n  await this.server.addWebSocketHandler(pathname, wss);\n};\n\n/**\n * Stops the previously started syslog broadcasting wesocket server.\n * This method will return immediately if no server is running.\n */\nextensions.mobileStopLogsBroadcast = async function mobileStopLogsBroadcast () {\n  const pathname = WEBSOCKET_ENDPOINT(this.sessionId);\n  if (_.isEmpty(await this.server.getWebSocketHandlers(pathname))) {\n    return;\n  }\n\n  log.debug('Stopping the system logs broadcasting web socket server');\n  await this.server.removeWebSocketHandler(pathname);\n};\n\n\nexport default extensions;\n"],"mappings":"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"}