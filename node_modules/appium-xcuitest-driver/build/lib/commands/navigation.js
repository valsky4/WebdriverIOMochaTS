"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.helpers = exports.default = exports.commands = void 0;
require("source-map-support/register");
var _driver = require("appium/driver");
var _lodash = _interopRequireDefault(require("lodash"));
var _asyncbox = require("asyncbox");
var _utils = require("../utils");
let commands = {},
  helpers = {},
  extensions = {};
exports.helpers = helpers;
exports.commands = commands;
const CLOSE_WINDOW_TIMEOUT = 5000;
const CLOSE_WINDOW_INTERVAL = 100;
commands.back = async function back() {
  if (!this.isWebContext()) {
    await this.nativeBack();
  } else {
    await this.mobileWebNav('back');
  }
};
helpers.nativeBack = async function nativeBack() {
  try {
    let navBar = await this.findNativeElementOrElements('class name', 'XCUIElementTypeNavigationBar', false);
    let buttons = await this.findNativeElementOrElements('class name', 'XCUIElementTypeButton', true, navBar);
    if (buttons.length === 0) {
      throw new Error('No buttons found in navigation bar');
    }
    let backButton = _lodash.default.filter(buttons, value => value.label === 'Back')[0];
    if (backButton) {
      this.log.debug(`Found navigation bar 'back' button. Clicking.`);
    } else {
      this.log.debug(`Unable to find 'Back' button. Trying first button in navigation bar`);
      backButton = buttons[0];
    }
    await this.nativeClick(backButton);
  } catch (err) {
    this.log.error(`Unable to find navigation bar and back button: ${err.message}`);
  }
};
commands.forward = async function forward() {
  if (!this.isWebContext()) {}
  await this.mobileWebNav('forward');
};
commands.closeWindow = async function closeWindow() {
  if (!this.isWebContext()) {
    throw new _driver.errors.NotImplementedError();
  }
  const script = `setTimeout(function () {window.open('','_self').close();}, 0); return true;`;
  const context = this.curContext;
  try {
    return await this.executeAtom('execute_script', [script, []], true);
  } finally {
    try {
      await (0, _asyncbox.waitForCondition)(() => this.curContext !== context, {
        waitMs: CLOSE_WINDOW_TIMEOUT,
        intervalMs: CLOSE_WINDOW_INTERVAL
      });
    } catch (ign) {
      this.log.debug('Context has not yet been changed after closing window. Continuing...');
    }
  }
};
commands.mobileDeepLink = async function mobileDeepLink(opts = {}) {
  const {
    url,
    bundleId
  } = (0, _utils.requireArgs)('url', opts);
  return await this.proxyCommand('/url', 'POST', {
    url,
    bundleId
  });
};
Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,