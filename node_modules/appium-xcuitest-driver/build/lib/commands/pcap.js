"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.commands = void 0;
require("source-map-support/register");
var _pyIosDeviceClient = _interopRequireDefault(require("../py-ios-device-client"));
var _support = require("appium/support");
var _utils = require("../utils");
var _driver = require("appium/driver");
const MAX_CAPTURE_TIME_SEC = 60 * 60 * 12;
const DEFAULT_CAPTURE_TIME_SEC = 60 * 5;
const DEFAULT_EXT = '.pcap';
const pcapLogger = _support.logger.getLogger('pcapd');
const commands = {};
exports.commands = commands;
class TrafficCapture {
  constructor(udid, log, resultPath) {
    this.udid = udid;
    this.log = log;
    this.resultPath = resultPath;
    this.mainProcess = null;
  }
  async start(timeoutSeconds) {
    this.mainProcess = await new _pyIosDeviceClient.default(this.udid).collectPcap(this.resultPath);
    this.mainProcess.on('output', (stdout, stderr) => {
      if (stderr) {
        pcapLogger.info(`${stderr}`);
      }
    });
    this.log.info(`Starting network traffic capture session on the device '${this.udid}'. ` + `Will timeout in ${timeoutSeconds}s`);
    setTimeout(async () => await this.interrupt(), timeoutSeconds * 1000);
    this.mainProcess.once('exit', (code, signal) => {
      this.log.debug(`The traffic capture session on the device '${this.udid}' has exited ` + `with code ${code}, signal ${signal}`);
    });
  }
  isCapturing() {
    var _this$mainProcess;
    return !!((_this$mainProcess = this.mainProcess) !== null && _this$mainProcess !== void 0 && _this$mainProcess.isRunning);
  }
  async interrupt(force = false) {
    if (this.isCapturing()) {
      const interruptPromise = this.mainProcess.stop(force ? 'SIGTERM' : 'SIGINT');
      this.mainProcess = null;
      try {
        await interruptPromise;
      } catch (e) {
        this.log.warn(`Cannot ${force ? 'terminate' : 'interrupt'} the traffic capture session. ` + `Original error: ${e.message}`);
        return false;
      }
    }
    return true;
  }
  async finish() {
    await this.interrupt();
    return this.resultPath;
  }
  async cleanup() {
    if (await _support.fs.exists(this.resultPath)) {
      await _support.fs.rimraf(this.resultPath);
    }
  }
}
commands.mobileStartPcap = async function mobileStartPcap(options = {}) {
  var _this$_trafficCapture;
  if (this.isSimulator()) {
    this.log.errorAndThrow('Network traffic capture only works on real devices');
  }
  const {
    timeLimitSec = DEFAULT_CAPTURE_TIME_SEC,
    forceRestart
  } = options;
  if ((_this$_trafficCapture = this._trafficCapture) !== null && _this$_trafficCapture !== void 0 && _this$_trafficCapture.isCapturing()) {
    this.log.info(`There is an active traffic capture process`);
    if (forceRestart) {
      this.log.info(`Stopping it because 'forceRestart' option is set to true`);
      await this._trafficCapture.interrupt(true);
    } else {
      this.log.info(`Doing nothing. ` + `Set 'forceRestart' option to true if you'd like to start a new traffic capture session`);
      return;
    }
  }
  if (this._trafficCapture) {
    await this._trafficCapture.cleanup();
    this._trafficCapture = null;
  }
  const resultPath = await _support.tempDir.path({
    prefix: `appium_${_support.util.uuidV4().substring(0, 8)}`,
    suffix: DEFAULT_EXT
  });
  const trafficCollector = new TrafficCapture(this.opts.device.udid, this.log, resultPath);
  const timeoutSeconds = parseInt(timeLimitSec, 10);
  if (isNaN(timeoutSeconds) || timeoutSeconds > MAX_CAPTURE_TIME_SEC || timeoutSeconds <= 0) {
    throw new _driver.errors.InvalidArgumentError(`The timeLimitSec value must be in range [1, ${MAX_CAPTURE_TIME_SEC}] seconds. ` + `The value of '${timeLimitSec}' has been passed instead.`);
  }
  try {
    await trafficCollector.start(timeoutSeconds);
  } catch (e) {
    await trafficCollector.interrupt(true);
    await trafficCollector.cleanup();
    throw e;
  }
  this._trafficCapture = trafficCollector;
};
commands.mobileStopPcap = async function mobileStopPcap() {
  if (!this._trafficCapture) {
    this.log.info('Network traffic collector has not been started. There is nothing to stop');
    return '';
  }
  let resultPath;
  try {
    resultPath = await this._trafficCapture.finish();
    if (!(await _support.fs.exists(resultPath))) {
      this.log.errorAndThrow(`The network traffic capture utility has failed ` + `to store the actual traffic capture at '${resultPath}'`);
    }
  } catch (e) {
    await this._trafficCapture.interrupt(true);
    await this._trafficCapture.cleanup();
    this._trafficCapture = null;
    throw e;
  }
  return await (0, _utils.encodeBase64OrUpload)(resultPath);
};
var _default = commands;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,