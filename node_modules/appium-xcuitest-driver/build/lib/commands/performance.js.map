{"version":3,"file":"performance.js","names":["_lodash","_interopRequireDefault","require","_path","_support","_teen_process","_utils","_asyncbox","_bluebird","commands","exports","PERF_RECORD_FEAT_NAME","PERF_RECORD_SECURITY_MESSAGE","DEFAULT_TIMEOUT_MS","STOP_TIMEOUT_MS","STARTUP_TIMEOUT_MS","DEFAULT_PROFILE_NAME","DEFAULT_EXT","DEFAULT_PID","INSTRUMENTS","XCRUN","XCTRACE","requireXctrace","xcrunPath","fs","which","e","Error","exec","stderr","message","requireInstruments","PerfRecorder","constructor","reportRoot","udid","opts","_process","_zippedReportPath","_timeout","timeout","_profileName","profileName","_reportPath","path","resolve","replace","Date","now","_pid","pid","_udid","_logger","logger","getLogger","_","truncate","length","substring","_archivePromise","getOriginalReportPath","exists","getZippedReportPath","originalReportPath","zippedReportPath","tempDir","prefix","parse","name","suffix","zip","toArchive","cwd","dirname","rimraf","isRunning","_this$_process","_enforceTermination","debug","stop","ign","performCleanup","B","all","filter","Boolean","map","x","warn","finally","catch","start","binaryPath","args","toolName","basename","push","fullCmd","SubProcess","slice","util","quote","on","stdout","trim","once","code","signal","waitForCondition","waitMs","intervalMs","listProfilesCommand","errorAndThrow","info","force","mobileStartPerfRecord","isFeatureEnabled","isRealDevice","log","isEmpty","_perfRecorders","recorder","device","pull","realPid","toLower","appInfo","proxyCommand","openDir","parseInt","mobileStopPerfRecord","remotePath","recorders","first","resultPath","result","encodeBase64OrUpload","_default","default"],"sources":["../../../lib/commands/performance.js"],"sourcesContent":["import _ from 'lodash';\nimport path from 'path';\nimport { fs, zip, logger, util, tempDir } from 'appium/support';\nimport { SubProcess, exec } from 'teen_process';\nimport { encodeBase64OrUpload } from '../utils';\nimport { waitForCondition } from 'asyncbox';\nimport B from 'bluebird';\n\nconst commands = {};\n\nconst PERF_RECORD_FEAT_NAME = 'perf_record';\nconst PERF_RECORD_SECURITY_MESSAGE = 'Performance measurement requires relaxing security for simulator. ' +\n  `Please set '--relaxed-security' or '--allow-insecure' with '${PERF_RECORD_FEAT_NAME}' ` +\n  'referencing https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/security.md for more details.';\nconst DEFAULT_TIMEOUT_MS = 5 * 60 * 1000;\nconst STOP_TIMEOUT_MS = 3 * 60 * 1000;\nconst STARTUP_TIMEOUT_MS = 60 * 1000;\nconst DEFAULT_PROFILE_NAME = 'Activity Monitor';\nconst DEFAULT_EXT = '.trace';\nconst DEFAULT_PID = 'current';\nconst INSTRUMENTS = 'instruments';\nconst XCRUN = 'xcrun';\nconst XCTRACE = 'xctrace';\n\n\nasync function requireXctrace () {\n  let xcrunPath;\n  try {\n    xcrunPath = await fs.which(XCRUN);\n  } catch (e) {\n    throw new Error(`${XCRUN} has not been found in PATH. ` +\n      `Please make sure XCode development tools are installed`);\n  }\n  try {\n    await exec(xcrunPath, [XCTRACE, 'help']);\n  } catch (e) {\n    throw new Error(`${XCTRACE} is not available for the active Xcode version. ` +\n      `Please make sure XCode is up to date. Original error: ${e.stderr || e.message}`);\n  }\n  return xcrunPath;\n}\n\nasync function requireInstruments () {\n  try {\n    return await fs.which(INSTRUMENTS);\n  } catch (e) {\n    throw new Error(`${INSTRUMENTS} has not been found in PATH. ` +\n      `Please make sure XCode development tools are installed`);\n  }\n}\n\n\nclass PerfRecorder {\n  constructor (reportRoot, udid, opts = {}) {\n    this._process = null;\n    this._zippedReportPath = '';\n    this._timeout = (opts.timeout && opts.timeout > 0) ? opts.timeout : DEFAULT_TIMEOUT_MS;\n    this._profileName = opts.profileName || DEFAULT_PROFILE_NAME;\n    this._reportPath = path.resolve(reportRoot,\n      `appium_perf__${this._profileName.replace(/\\W/g, '_')}__${Date.now()}${DEFAULT_EXT}`);\n    this._pid = opts.pid;\n    this._udid = udid;\n    this._logger = logger.getLogger(\n      `${_.truncate(this._profileName, {length: 10})}@${this._udid.substring(0, 8)}`);\n    this._archivePromise = null;\n  }\n\n  get profileName () {\n    return this._profileName;\n  }\n\n  async getOriginalReportPath () {\n    return (await fs.exists(this._reportPath)) ? this._reportPath : '';\n  }\n\n  async getZippedReportPath () {\n    // This is to prevent possible race conditions, because the archive operation\n    // could be pretty time-intensive\n    if (!this._archivePromise) {\n      this._archivePromise = (async () => {\n        const originalReportPath = await this.getOriginalReportPath();\n        if (!originalReportPath) {\n          return '';\n        }\n        const zippedReportPath = await tempDir.path({\n          prefix: path.parse(originalReportPath).name,\n          suffix: '.zip'\n        });\n        await zip.toArchive(zippedReportPath, {\n          cwd: path.dirname(this._reportPath),\n        });\n        await fs.rimraf(path.dirname(this._reportPath));\n        this._zippedReportPath = zippedReportPath;\n        return this._zippedReportPath;\n      })();\n    }\n    return await this._archivePromise;\n  }\n\n  isRunning () {\n    return !!(this._process?.isRunning);\n  }\n\n  async _enforceTermination () {\n    if (this._process && this.isRunning()) {\n      this._logger.debug('Force-stopping the currently running perf recording');\n      try {\n        await this._process.stop('SIGKILL');\n      } catch (ign) {}\n    }\n    this._process = null;\n    const performCleanup = async () => {\n      try {\n        await B.all([this._zippedReportPath, path.dirname(this._reportPath)]\n          .filter(Boolean).map((x) => fs.rimraf(x)));\n      } catch (e) {\n        this._logger.warn(e.message);\n      }\n    };\n    if (this._archivePromise) {\n      this._archivePromise\n        // eslint-disable-next-line promise/prefer-await-to-then\n        .finally(async () => {\n          await performCleanup();\n          this._archivePromise = null;\n        })\n        // eslint-disable-next-line promise/prefer-await-to-then\n        .catch(() => {});\n    }\n    await performCleanup();\n    return '';\n  }\n\n  async start () {\n    let binaryPath;\n    try {\n      binaryPath = await requireXctrace();\n    } catch (e) {\n      this._logger.debug(e.message);\n      this._logger.warn(`Defaulting to ${INSTRUMENTS} usage`);\n      binaryPath = await requireInstruments();\n    }\n\n    const args = [];\n    const toolName = path.basename(binaryPath) === XCRUN ? XCTRACE : INSTRUMENTS;\n    if (toolName === XCTRACE) {\n      args.push(\n        XCTRACE, 'record',\n        '--device', this._udid,\n        '--template', this._profileName,\n        '--output', this._reportPath,\n        '--time-limit', `${this._timeout}ms`,\n      );\n      if (this._pid) {\n        args.push('--attach', `${this._pid}`);\n      } else {\n        args.push('--all-processes');\n      }\n    } else {\n      // https://help.apple.com/instruments/mac/current/#/devb14ffaa5\n      args.push(\n        '-w', this._udid,\n        '-t', this._profileName,\n        '-D', this._reportPath,\n        '-l', `${this._timeout}`,\n      );\n      if (this._pid) {\n        args.push('-p', `${this._pid}`);\n      }\n    }\n    const fullCmd = [binaryPath, ...args];\n    this._process = new SubProcess(fullCmd[0], fullCmd.slice(1));\n    this._archivePromise = null;\n    this._logger.debug(`Starting performance recording: ${util.quote(fullCmd)}`);\n    this._process.on('output', (stdout, stderr) => {\n      if (_.trim(stdout || stderr)) {\n        this._logger.debug(`[${toolName}] ${stdout || stderr}`);\n      }\n    });\n    this._process.once('exit', async (code, signal) => {\n      this._process = null;\n      if (code === 0) {\n        this._logger.debug('Performance recording exited without errors');\n        try {\n          // cache zipped report\n          await this.getZippedReportPath();\n        } catch (e) {\n          this._logger.warn(e);\n        }\n      } else {\n        await this._enforceTermination();\n        this._logger.warn(`Performance recording exited with error code ${code}, signal ${signal}`);\n      }\n    });\n    await this._process.start(0);\n    try {\n      await waitForCondition(async () => {\n        if (await this.getOriginalReportPath()) {\n          return true;\n        }\n        if (!this._process) {\n          throw new Error(`${toolName} process died unexpectedly`);\n        }\n        return false;\n      }, {\n        waitMs: STARTUP_TIMEOUT_MS,\n        intervalMs: 500,\n      });\n    } catch (e) {\n      await this._enforceTermination();\n      const listProfilesCommand = toolName === XCTRACE\n        ? `${XCRUN} ${XCTRACE} list templates`\n        : `${INSTRUMENTS} -s`;\n      this._logger.errorAndThrow(`There is no ${DEFAULT_EXT} file found for performance profile ` +\n        `'${this._profileName}'. Make sure the profile is supported on this device. ` +\n        `You could use '${listProfilesCommand}' command to see the list of all available profiles. ` +\n        `Check the server log for more details`);\n    }\n    this._logger.info(`The performance recording has started. Will timeout in ${this._timeout}ms`);\n  }\n\n  async stop (force = false) {\n    if (force) {\n      return await this._enforceTermination();\n    }\n\n    if (!this.isRunning()) {\n      this._logger.debug('Performance recording is not running. Returning the recent result');\n      return await this.getZippedReportPath();\n    }\n\n    try {\n      await this._process.stop('SIGINT', STOP_TIMEOUT_MS);\n    } catch (e) {\n      this._logger.errorAndThrow(`Performance recording has failed to exit after ${STOP_TIMEOUT_MS}ms`);\n    }\n    return await this.getZippedReportPath();\n  }\n}\n\n\n/**\n * @typedef {Object} StartPerfRecordOptions\n *\n * @property {?number|string} timeout [300000] - The maximum count of milliseconds to record the profiling information.\n * @property {?string} profileName [Activity Monitor] - The name of existing performance profile to apply.\n *                                                      Can also contain the full path to the chosen template on the server file system.\n *                                                      Note, that not all profiles are supported on mobile devices.\n * @property {?string|number} pid - The ID of the process to measure the performance for.\n *                                  Set it to `current` in order to measure the performance of\n *                                  the process, which belongs to the currently active application.\n *                                  All processes running on the device are measured if\n *                                  pid is unset (the default setting).\n */\n\n/**\n * Starts performance profiling for the device under test.\n * Relaxing security is mandatory for simulators. It can always work for real devices.\n *\n * Since XCode 14 the method tries to use `xctrace` tool to record performance stats.\n * The `instruments` developer utility is used as a fallback for this purpose if `xctrace`\n * is not available.\n * It is possible to record multiple profiles at the same time.\n * Read https://developer.apple.com/library/content/documentation/DeveloperTools/Conceptual/InstrumentsUserGuide/Recording,Pausing,andStoppingTraces.html\n * for more details.\n *\n * @param {?StartPerfRecordOptions} opts - The set of possible start record options\n */\ncommands.mobileStartPerfRecord = async function mobileStartPerfRecord (opts = {}) {\n  if (!this.isFeatureEnabled(PERF_RECORD_FEAT_NAME) && !this.isRealDevice()) {\n    this.log.errorAndThrow(PERF_RECORD_SECURITY_MESSAGE);\n  }\n\n  const {\n    timeout = DEFAULT_TIMEOUT_MS,\n    profileName = DEFAULT_PROFILE_NAME,\n    pid,\n  } = opts;\n\n  if (!_.isEmpty(this._perfRecorders)) {\n    for (const recorder of this._perfRecorders.filter((x) => x.profileName === profileName)) {\n      if (recorder.isRunning()) {\n        this.log.debug(`Performance recorder for '${profileName}' on device '${this.opts.device.udid}' ` +\n          ` is already running. Doing nothing`);\n        return;\n      }\n      _.pull(this._perfRecorders, recorder);\n      await recorder.stop(true);\n    }\n  }\n\n  let realPid;\n  if (pid) {\n    if (_.toLower(pid) === DEFAULT_PID) {\n      const appInfo = await this.proxyCommand('/wda/activeAppInfo', 'GET');\n      realPid = appInfo.pid;\n    } else {\n      realPid = pid;\n    }\n  }\n  const recorder = new PerfRecorder(await tempDir.openDir(), this.opts.device.udid, {\n    timeout: parseInt(timeout, 10),\n    profileName,\n    pid: parseInt(realPid, 10),\n  });\n  await recorder.start();\n  this._perfRecorders = [...(this._perfRecorders || []), recorder];\n};\n\n/**\n * @typedef {Object} StopRecordingOptions\n *\n * @property {?string} remotePath - The path to the remote location, where the resulting zipped .trace file should be uploaded.\n *                                  The following protocols are supported: http/https, ftp.\n *                                  Null or empty string value (the default setting) means the content of resulting\n *                                  file should be zipped, encoded as Base64 and passed as the endpoint response value.\n *                                  An exception will be thrown if the generated file is too big to\n *                                  fit into the available process memory.\n * @property {?string} user - The name of the user for the remote authentication. Only works if `remotePath` is provided.\n * @property {?string} pass - The password for the remote authentication. Only works if `remotePath` is provided.\n * @property {?string} method [PUT] - The http multipart upload method name. Only works if `remotePath` is provided.\n * @property {?string} profileName [Activity Monitor] - The name of an existing performance profile for which the recording has been made.\n * @property {?Object} headers - Additional headers mapping for multipart http(s) uploads\n * @property {?string} fileFieldName [file] - The name of the form field, where the file content BLOB should be stored for\n *                                            http(s) uploads\n * @property {?Object|Array<Pair>} formFields - Additional form fields for multipart http(s) uploads\n */\n\n/**\n * Stops performance profiling for the device under test.\n * The resulting file in .trace format can be either returned\n * directly as base64-encoded zip archive or uploaded to a remote location\n * (such files can be pretty large). Afterwards it is possible to unarchive and\n * open such file with Xcode Dev Tools.\n *\n * @param {?StopRecordingOptions} opts - The set of possible stop record options\n * @return {string} Either an empty string if the upload was successful or base-64 encoded\n * content of zipped .trace file.\n * @throws {Error} If no performance recording with given profile name/device udid combination\n * has been started before or the resulting .trace file has not been generated properly.\n */\ncommands.mobileStopPerfRecord = async function mobileStopPerfRecord (opts = {}) {\n  if (!this.isFeatureEnabled(PERF_RECORD_FEAT_NAME) && !this.isRealDevice()) {\n    this.log.errorAndThrow(PERF_RECORD_SECURITY_MESSAGE);\n  }\n\n  if (_.isEmpty(this._perfRecorders)) {\n    this.log.info('No performance recorders have been started. Doing nothing');\n    return '';\n  }\n\n  const {\n    profileName = DEFAULT_PROFILE_NAME,\n    remotePath,\n  } = opts;\n\n  const recorders = this._perfRecorders.filter((x) => x.profileName === profileName);\n  if (_.isEmpty(recorders)) {\n    this.log.errorAndThrow(`There are no records for performance profile '${profileName}' ` +\n      `and device ${this.opts.device.udid}. Have you started the profiling before?`);\n  }\n\n  const recorder = _.first(recorders);\n  const resultPath = await recorder.stop();\n  if (!await fs.exists(resultPath)) {\n    this.log.errorAndThrow(`There is no ${DEFAULT_EXT} file found for performance profile '${profileName}' ` +\n      `and device ${this.opts.device.udid}. Make sure the selected profile is supported on this device`);\n  }\n\n  const result = await encodeBase64OrUpload(resultPath, remotePath, opts);\n  _.pull(this._perfRecorders, recorder);\n  await fs.rimraf(resultPath);\n  return result;\n};\n\n\nexport { commands };\nexport default commands;\n"],"mappings":"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"}