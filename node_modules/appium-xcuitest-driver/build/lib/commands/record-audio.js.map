{"version":3,"file":"record-audio.js","names":["_support","require","_teen_process","_utils","_asyncbox","commands","exports","AUDIO_RECORD_FEAT_NAME","MAX_RECORDING_TIME_SEC","DEFAULT_RECORDING_TIME_SEC","PROCESS_STARTUP_TIMEOUT_MS","DEFAULT_SOURCE","DEFAULT_BITRATE","DEFAULT_CODEC","DEFAULT_CHANNELS","DEFAULT_RATE","DEFAULT_EXT","FFMPEG_BINARY","ffmpegLogger","logger","getLogger","AudioRecorder","constructor","input","log","audioPath","opts","mainProcess","start","timeoutSeconds","fs","which","err","Error","audioSource","audioCodec","audioBitrate","audioChannels","audioRate","args","SubProcess","isCaptureStarted","on","stdout","stderr","trim","startsWith","info","waitForCondition","waitMs","intervalMs","e","warn","isRunning","util","quote","once","code","signal","includes","debug","isRecording","_this$mainProcess","interrupt","force","interruptPromise","stop","message","finish","cleanup","exists","rimraf","startAudioRecording","options","_this$_audioRecorder","isFeatureEnabled","errorAndThrow","timeLimit","audioInput","forceRestart","_audioRecorder","tempDir","path","prefix","uuidV4","substring","suffix","audioRecorder","parseInt","isNaN","stopAudioRecording","resultPath","encodeBase64OrUpload","_default","default"],"sources":["../../../lib/commands/record-audio.js"],"sourcesContent":["import { fs, tempDir, logger, util } from 'appium/support';\nimport { SubProcess } from 'teen_process';\nimport { encodeBase64OrUpload } from '../utils';\nimport { waitForCondition } from 'asyncbox';\n\n\nconst commands = {};\n\nconst AUDIO_RECORD_FEAT_NAME = 'audio_record';\nconst MAX_RECORDING_TIME_SEC = 60 * 60 * 12;\nconst DEFAULT_RECORDING_TIME_SEC = 60 * 3;\nconst PROCESS_STARTUP_TIMEOUT_MS = 5000;\nconst DEFAULT_SOURCE = 'avfoundation';\nconst DEFAULT_BITRATE = '128k';\nconst DEFAULT_CODEC = 'aac';\nconst DEFAULT_CHANNELS = 2;\nconst DEFAULT_RATE = 44100;\nconst DEFAULT_EXT = '.mp4';\nconst FFMPEG_BINARY = 'ffmpeg';\nconst ffmpegLogger = logger.getLogger(FFMPEG_BINARY);\n\n\nclass AudioRecorder {\n  constructor (input, log, audioPath, opts = {}) {\n    this.input = input;\n    this.log = log;\n    this.audioPath = audioPath;\n    this.opts = opts;\n    this.mainProcess = null;\n  }\n\n  async start (timeoutSeconds) {\n    try {\n      await fs.which(FFMPEG_BINARY);\n    } catch (err) {\n      throw new Error(`'${FFMPEG_BINARY}' binary is not found in PATH. Install it using 'brew install ffmpeg'. ` +\n        `Check https://www.ffmpeg.org/download.html for more details.`);\n    }\n\n    const {\n      audioSource = DEFAULT_SOURCE,\n      audioCodec,\n      audioBitrate,\n      audioChannels,\n      audioRate,\n    } = this.opts;\n\n    const args = [\n      '-t', `${timeoutSeconds}`,\n      '-f', audioSource,\n      '-i', this.input,\n      '-c:a', audioCodec,\n      '-b:a', audioBitrate,\n      '-ac', `${audioChannels}`,\n      '-ar', `${audioRate}`,\n      this.audioPath,\n    ];\n\n    this.mainProcess = new SubProcess(FFMPEG_BINARY, args);\n    let isCaptureStarted = false;\n    this.mainProcess.on('output', (stdout, stderr) => {\n      if (stderr) {\n        if (stderr.trim().startsWith('size=')) {\n          if (!isCaptureStarted) {\n            isCaptureStarted = true;\n          }\n        } else {\n          ffmpegLogger.info(`${stderr}`);\n        }\n      }\n    });\n    await this.mainProcess.start(0);\n    try {\n      await waitForCondition(() => isCaptureStarted, {\n        waitMs: PROCESS_STARTUP_TIMEOUT_MS,\n        intervalMs: 300,\n      });\n    } catch (e) {\n      this.log.warn(`Audio recording process did not start within ${PROCESS_STARTUP_TIMEOUT_MS}ms. Continuing anyway`);\n    }\n    if (!this.mainProcess.isRunning) {\n      this.mainProcess = null;\n      throw new Error(`The audio recording process '${FFMPEG_BINARY}' died unexpectedly. ` +\n        `Check server logs for more details`);\n    }\n    this.log.info(`Starting capture on audio input '${this.input}' with command: '${util.quote([FFMPEG_BINARY, ...args])}'. ` +\n      `Will timeout in ${timeoutSeconds}s`);\n    this.mainProcess.once('exit', (code, signal) => {\n      // ffmpeg returns code 255 if SIGINT arrives\n      if ([0, 255].includes(code)) {\n        this.log.info(`The recording session on audio input '${this.input}' has been finished`);\n      } else {\n        this.log.debug(`The recording session on audio input '${this.input}' has exited ` +\n          `with code ${code}, signal ${signal}`);\n      }\n    });\n  }\n\n  isRecording () {\n    return !!(this.mainProcess?.isRunning);\n  }\n\n  async interrupt (force = false) {\n    if (this.isRecording()) {\n      const interruptPromise = this.mainProcess.stop(force ? 'SIGTERM' : 'SIGINT');\n      this.mainProcess = null;\n      try {\n        await interruptPromise;\n      } catch (e) {\n        this.log.warn(`Cannot ${force ? 'terminate' : 'interrupt'} ${FFMPEG_BINARY}. ` +\n          `Original error: ${e.message}`);\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  async finish () {\n    await this.interrupt();\n    return this.audioPath;\n  }\n\n  async cleanup () {\n    if (await fs.exists(this.audioPath)) {\n      await fs.rimraf(this.audioPath);\n    }\n  }\n}\n\n\n/**\n * @typedef {Object} StartRecordingOptions\n *\n * @property {!string} audioInput - The name of the corresponding audio input device to use for the\n * capture. The full list of capture devices could be shown using `ffmpeg -f avfoundation -list_devices true -i \"\"`\n * Terminal command.\n * @property {?string} audioCodec [aac] - The name of the audio codec. The Advanced Audio Codec is used by default.\n * @property {?string} audioBitrate [128k] - The bitrate of the resulting audio stream. 128k by default.\n * @property {?string|number} audioChannels [2] - The count of audio channels in the resulting stream. Setting it to `1`\n * will create a single channel (mono) audio stream.\n * @property {?string|number} audioRate [44100] - The sampling rate of the resulting audio stream.\n * @property {?string|number} timeLimit [180] - The maximum recording time, in seconds.\n * The default value is 180, the maximum value is 43200 (12 hours).\n * @property {?boolean} forceRestart [false] - Whether to restart audio capture process forcefully when\n * startRecordingAudio is called (`true`) or ignore the call until the current audio recording is completed.\n */\n\n/**\n * Records the given hardware audio input into an .mp4 file.\n *\n * @param {?StartRecordingOptions} options - The available options.\n * @throws {Error} If audio recording has failed to start.\n */\ncommands.startAudioRecording = async function startAudioRecording (options = {}) {\n  if (!this.isFeatureEnabled(AUDIO_RECORD_FEAT_NAME)) {\n    this.log.errorAndThrow(`Audio capture feature must be enabled on the server side. ` +\n      `Please set '--relaxed-security' or '--allow-insecure' with '${AUDIO_RECORD_FEAT_NAME}' option. ` +\n      `Read https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/security.md for more details.`);\n  }\n\n  const {\n    timeLimit = DEFAULT_RECORDING_TIME_SEC,\n    audioInput,\n    // Undocumented feature\n    audioSource,\n    audioCodec = DEFAULT_CODEC,\n    audioBitrate = DEFAULT_BITRATE,\n    audioChannels = DEFAULT_CHANNELS,\n    audioRate = DEFAULT_RATE,\n    forceRestart,\n  } = options;\n\n  if (!audioInput) {\n    this.log.errorAndThrow(`The mandatory audioInput option is not provided. Please set it ` +\n      `to a correct value (e. g. ':1'). Use 'ffmpeg -f avfoundation -list_devices true -i \"\"' ` +\n      `command to list available input sources`);\n  }\n\n  if (this._audioRecorder?.isRecording()) {\n    this.log.info(`There is an active audio recording process`);\n    if (forceRestart) {\n      this.log.info(`Stopping it because 'forceRestart' option is set to true`);\n      await this._audioRecorder.interrupt(true);\n    } else {\n      this.log.info(`Doing nothing. ` +\n        `Set 'forceRestart' option to true if you'd like to start a new audio recording session`);\n      return;\n    }\n  }\n  if (this._audioRecorder) {\n    await this._audioRecorder.cleanup();\n    this._audioRecorder = null;\n  }\n\n  const audioPath = await tempDir.path({\n    prefix: `appium_${util.uuidV4().substring(0, 8)}`,\n    suffix: DEFAULT_EXT,\n  });\n\n  const audioRecorder = new AudioRecorder(audioInput, this.log, audioPath, {\n    audioSource,\n    audioCodec,\n    audioBitrate,\n    audioChannels,\n    audioRate,\n  });\n\n  const timeoutSeconds = parseInt(timeLimit, 10);\n  if (isNaN(timeoutSeconds) || timeoutSeconds > MAX_RECORDING_TIME_SEC || timeoutSeconds <= 0) {\n    this.log.errorAndThrow(`The timeLimit value must be in range [1, ${MAX_RECORDING_TIME_SEC}] seconds. ` +\n      `The value of '${timeLimit}' has been passed instead.`);\n  }\n\n  try {\n    await audioRecorder.start(timeoutSeconds);\n  } catch (e) {\n    await audioRecorder.interrupt(true);\n    await audioRecorder.cleanup();\n    throw e;\n  }\n  this._audioRecorder = audioRecorder;\n};\n\n/**\n * Stop recording of the audio input. If no audio recording process is running then\n * the endpoint will try to get the recently recorded file.\n * If no previously recorded file is found and no active audio recording\n * processes are running then the method returns an empty string.\n *\n * @returns {string} Base64-encoded content of the recorded media file or an\n * empty string if no audio recording has been started before.\n * @throws {Error} If there was an error while getting the recorded file.\n */\ncommands.stopAudioRecording = async function stopAudioRecording () {\n  if (!this._audioRecorder) {\n    this.log.info('Audio recording has not been started. There is nothing to stop');\n    return '';\n  }\n\n  let resultPath;\n  try {\n    resultPath = await this._audioRecorder.finish();\n    if (!await fs.exists(resultPath)) {\n      this.log.errorAndThrow(`${FFMPEG_BINARY} has failed ` +\n        `to store the actual audio recording at '${resultPath}'`);\n    }\n  } catch (e) {\n    await this._audioRecorder.interrupt(true);\n    await this._audioRecorder.cleanup();\n    this._audioRecorder = null;\n    throw e;\n  }\n  return await encodeBase64OrUpload(resultPath);\n};\n\n\nexport { commands };\nexport default commands;\n"],"mappings":"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"}