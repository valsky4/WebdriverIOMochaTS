{"version":3,"file":"recordscreen.js","names":["_lodash","_interopRequireDefault","require","_support","_teen_process","_utils","_deviceConnectionsFactory","_appiumWebdriveragent","_asyncbox","_url","commands","exports","MAX_RECORDING_TIME_SEC","DEFAULT_RECORDING_TIME_SEC","DEFAULT_MJPEG_SERVER_PORT","DEFAULT_FPS","DEFAULT_QUALITY","DEFAULT_VCODEC","MP4_EXT","FFMPEG_BINARY","ffmpegLogger","logger","getLogger","QUALITY_MAPPING","low","medium","high","photo","ScreenRecorder","constructor","udid","log","videoPath","opts","mainProcess","timeoutHandler","start","timeoutMs","fs","which","err","Error","remotePort","remoteUrl","usePortForwarding","videoFps","videoType","videoScale","videoFilters","pixelFormat","DEVICE_CONNECTIONS_FACTORY","requestConnection","devicePort","warn","args","push","protocol","hostname","url","parse","SubProcess","isCaptureStarted","on","stdout","stderr","trim","startsWith","info","startupTimeout","waitForCondition","waitMs","intervalMs","e","isRunning","join","setTimeout","interrupt","force","result","clearTimeout","interruptPromise","stop","message","releaseConnection","finish","cleanup","exists","rimraf","startRecordingScreen","options","timeLimit","videoQuality","forceRestart","stopRecordingScreen","tempDir","path","prefix","Math","random","toString","substring","suffix","wdaBaseUrl","WDA_BASE_URL","screenRecorder","device","mjpegServerPort","isRealDevice","isLocalHost","errorAndThrow","_recentScreenRecorder","timeoutSeconds","parseFloat","isNaN","mjpegServerScreenshotQuality","mjpegServerFramerate","proxyCommand","quality","_","isInteger","toLower","JSON","stringify","keys","undefined","fps","parseInt","util","hasValue","settings","encodeBase64OrUpload","remotePath","_default","default"],"sources":["../../../lib/commands/recordscreen.js"],"sourcesContent":["import _ from 'lodash';\nimport { fs, tempDir, logger, util } from 'appium/support';\nimport { SubProcess } from 'teen_process';\nimport { encodeBase64OrUpload, isLocalHost } from '../utils';\nimport DEVICE_CONNECTIONS_FACTORY from '../device-connections-factory';\nimport { WDA_BASE_URL } from 'appium-webdriveragent';\nimport { waitForCondition } from 'asyncbox';\nimport url from 'url';\n\nlet commands = {};\n\nconst MAX_RECORDING_TIME_SEC = 60 * 30;\nconst DEFAULT_RECORDING_TIME_SEC = 60 * 3;\nconst DEFAULT_MJPEG_SERVER_PORT = 9100;\nconst DEFAULT_FPS = 10;\nconst DEFAULT_QUALITY = 'medium';\nconst DEFAULT_VCODEC = 'mjpeg';\nconst MP4_EXT = '.mp4';\nconst FFMPEG_BINARY = 'ffmpeg';\nconst ffmpegLogger = logger.getLogger(FFMPEG_BINARY);\nconst QUALITY_MAPPING = {\n  low: 10,\n  medium: 25,\n  high: 75,\n  photo: 100,\n};\n\n\nclass ScreenRecorder {\n  constructor (udid, log, videoPath, opts = {}) {\n    this.videoPath = videoPath;\n    this.log = log;\n    this.opts = opts;\n    this.udid = udid;\n    this.mainProcess = null;\n    this.timeoutHandler = null;\n  }\n\n  async start (timeoutMs) {\n    try {\n      await fs.which(FFMPEG_BINARY);\n    } catch (err) {\n      throw new Error(`'${FFMPEG_BINARY}' binary is not found in PATH. Install it using 'brew install ffmpeg'. ` +\n        `Check https://www.ffmpeg.org/download.html for more details.`);\n    }\n\n    const {\n      remotePort,\n      remoteUrl,\n      usePortForwarding,\n      videoFps,\n      videoType,\n      videoScale,\n      videoFilters,\n      pixelFormat,\n    } = this.opts;\n\n    try {\n      await DEVICE_CONNECTIONS_FACTORY.requestConnection(this.udid, remotePort, {\n        devicePort: remotePort,\n        usePortForwarding,\n      });\n    } catch (err) {\n      this.log.warn(`Cannot forward the local port ${remotePort} to ${remotePort} ` +\n        `on the device ${this.udid}. Set the custom value to 'mjpegServerPort' ` +\n        `capability if this is an undesired behavior.`);\n    }\n\n    const args = [\n      '-f', 'mjpeg',\n      // https://github.com/appium/appium/issues/16294\n      '-reconnect', '1',\n      '-reconnect_at_eof', '1',\n      '-reconnect_streamed', '1',\n      '-reconnect_delay_max', `${timeoutMs / 1000 + 1}`,\n    ];\n    //Parameter `-r` is optional. See details: https://github.com/appium/appium/issues/12067\n    if (videoFps && videoType === 'libx264') {\n      args.push('-r', videoFps);\n    }\n    const {protocol, hostname} = url.parse(remoteUrl);\n    args.push('-i', `${protocol}//${hostname}:${remotePort}`);\n    if (videoFilters || videoScale) {\n      args.push('-vf', videoFilters || `scale=${videoScale}`);\n    }\n    // Quicktime compatibility via pixelFormat: 'yuv420p'\n    if (pixelFormat) {\n      args.push('-pix_fmt', pixelFormat);\n    }\n    args.push(\n      '-vcodec', videoType,\n      '-y', this.videoPath\n    );\n\n    this.mainProcess = new SubProcess(FFMPEG_BINARY, args);\n    let isCaptureStarted = false;\n    this.mainProcess.on('output', (stdout, stderr) => {\n      if (stderr) {\n        if (stderr.trim().startsWith('frame=')) {\n          if (!isCaptureStarted) {\n            isCaptureStarted = true;\n          }\n        } else {\n          ffmpegLogger.info(`${stderr}`);\n        }\n      }\n    });\n    await this.mainProcess.start(0);\n    const startupTimeout = 5000;\n    try {\n      await waitForCondition(() => isCaptureStarted, {\n        waitMs: startupTimeout,\n        intervalMs: 300,\n      });\n    } catch (e) {\n      this.log.warn(`Screen capture process did not start within ${startupTimeout}ms. Continuing anyway`);\n    }\n    if (!this.mainProcess.isRunning) {\n      throw new Error(`The screen capture process '${FFMPEG_BINARY}' died unexpectedly. ` +\n        `Check server logs for more details`);\n    }\n    this.log.info(`Starting screen capture on the device '${this.udid}' with command: '${FFMPEG_BINARY} ${args.join(' ')}'. ` +\n      `Will timeout in ${timeoutMs}ms`);\n\n    this.timeoutHandler = setTimeout(async () => {\n      if (!await this.interrupt()) {\n        this.log.warn(`Cannot finish the active screen recording on the device '${this.udid}' after ${timeoutMs}ms timeout`);\n      }\n    }, timeoutMs);\n  }\n\n  async interrupt (force = false) {\n    let result = true;\n\n    if (this.timeoutHandler) {\n      clearTimeout(this.timeoutHandler);\n      this.timeoutHandler = null;\n    }\n\n    if (this.mainProcess && this.mainProcess.isRunning) {\n      const interruptPromise = this.mainProcess.stop(force ? 'SIGTERM' : 'SIGINT');\n      this.mainProcess = null;\n      try {\n        await interruptPromise;\n      } catch (e) {\n        this.log.warn(`Cannot ${force ? 'terminate' : 'interrupt'} ${FFMPEG_BINARY}. ` +\n          `Original error: ${e.message}`);\n        result = false;\n      }\n    }\n\n    DEVICE_CONNECTIONS_FACTORY.releaseConnection(this.udid, this.opts.remotePort);\n\n    return result;\n  }\n\n  async finish () {\n    await this.interrupt();\n    return this.videoPath;\n  }\n\n  async cleanup () {\n    if (await fs.exists(this.videoPath)) {\n      await fs.rimraf(this.videoPath);\n    }\n  }\n}\n\n\n/**\n * @typedef {Object} StartRecordingOptions\n *\n * @property {?string} remotePath - The path to the remote location, where the resulting video should be uploaded.\n *                                  The following protocols are supported: http/https, ftp.\n *                                  Null or empty string value (the default setting) means the content of resulting\n *                                  file should be encoded as Base64 and passed as the endpoint response value.\n *                                  An exception will be thrown if the generated media file is too big to\n *                                  fit into the available process memory.\n *                                  This option only has an effect if there is screen recording process in progress\n *                                  and `forceRestart` parameter is not set to `true`.\n * @property {?string} user - The name of the user for the remote authentication. Only works if `remotePath` is provided.\n * @property {?string} pass - The password for the remote authentication. Only works if `remotePath` is provided.\n * @property {?string} method - The http multipart upload method name. The 'PUT' one is used by default.\n *                              Only works if `remotePath` is provided.\n * @property {?string} videoType - The video codec type used for encoding of the be recorded screen capture.\n *                                 Execute `ffmpeg -codecs` in the terminal to see the list of supported video codecs.\n *                                 'mjpeg' by default.\n * @property {?string|number} videoQuality - The video encoding quality (low, medium, high, photo - defaults to medium).\n * @property {?string|number} videoFps - The Frames Per Second rate of the recorded video. Change this value if the resulting video\n *                                is too slow or too fast. Defaults to 10.\n * @property {?string} videoFilters - The FFMPEG video filters to apply. These filters allow to scale, flip, rotate and do many\n *                                    other useful transformations on the source video stream. The format of the property\n *                                    must comply with https://ffmpeg.org/ffmpeg-filters.html\n * @property {?string} videoScale - The scaling value to apply. Read https://trac.ffmpeg.org/wiki/Scaling for possible values.\n *                                  No scale is applied by default. If both `videoFilters` and `videoScale` are set then\n *                                  only `videoFilters` value will be respected.\n * @property {?string} pixelFormat - Output pixel format. Run `ffmpeg -pix_fmts` to list possible values.\n *                                   For Quicktime compatibility, set to \"yuv420p\" along with videoType: \"libx264\".\n * @property {?boolean} forceRestart - Whether to try to catch and upload/return the currently running screen recording\n *                                     (`false`, the default setting) or ignore the result of it and start a new recording\n *                                     immediately.\n * @property {?string|number} timeLimit - The maximum recording time, in seconds.\n *                                        The default value is 180, the maximum value is 600 (10 minutes).\n */\n\n/**\n * Record the display of devices running iOS Simulator since Xcode 9 or real devices since iOS 11\n * (ffmpeg utility is required: 'brew install ffmpeg').\n * It records screen activity to a MPEG-4 file. Audio is not recorded with the video file.\n * If screen recording has been already started then the command will stop it forcefully and start a new one.\n * The previously recorded video file will be deleted.\n *\n * @param {?StartRecordingOptions} options - The available options.\n * @returns {string} Base64-encoded content of the recorded media file if\n *                   any screen recording is currently running or an empty string.\n * @throws {Error} If screen recording has failed to start.\n */\ncommands.startRecordingScreen = async function startRecordingScreen (options = {}) {\n  const {\n    videoType = DEFAULT_VCODEC,\n    timeLimit = DEFAULT_RECORDING_TIME_SEC,\n    videoQuality = DEFAULT_QUALITY,\n    videoFps = DEFAULT_FPS,\n    videoFilters,\n    videoScale,\n    forceRestart,\n    pixelFormat\n  } = options;\n\n  let result = '';\n  if (!forceRestart) {\n    this.log.info(`Checking if there is/was a previous screen recording. ` +\n      `Set 'forceRestart' option to 'true' if you'd like to skip this step.`);\n    result = await this.stopRecordingScreen(options);\n  }\n\n  const videoPath = await tempDir.path({\n    prefix: `appium_${Math.random().toString(16).substring(2, 8)}`,\n    suffix: MP4_EXT,\n  });\n\n  const wdaBaseUrl = this.opts.wdaBaseUrl || WDA_BASE_URL;\n  const screenRecorder = new ScreenRecorder(this.opts.device.udid, this.log, videoPath, {\n    remotePort: this.opts.mjpegServerPort || DEFAULT_MJPEG_SERVER_PORT,\n    remoteUrl: wdaBaseUrl,\n    usePortForwarding: this.isRealDevice() && isLocalHost(wdaBaseUrl),\n    videoType,\n    videoFilters,\n    videoScale,\n    videoFps,\n    pixelFormat\n  });\n  if (!await screenRecorder.interrupt(true)) {\n    this.log.errorAndThrow('Unable to stop screen recording process');\n  }\n  if (this._recentScreenRecorder) {\n    await this._recentScreenRecorder.cleanup();\n    this._recentScreenRecorder = null;\n  }\n\n  const timeoutSeconds = parseFloat(timeLimit);\n  if (isNaN(timeoutSeconds) || timeoutSeconds > MAX_RECORDING_TIME_SEC || timeoutSeconds <= 0) {\n    this.log.errorAndThrow(`The timeLimit value must be in range [1, ${MAX_RECORDING_TIME_SEC}] seconds. ` +\n      `The value of '${timeLimit}' has been passed instead.`);\n  }\n\n  let {\n    mjpegServerScreenshotQuality,\n    mjpegServerFramerate,\n  } = await this.proxyCommand('/appium/settings', 'GET');\n  if (videoQuality) {\n    const quality = _.isInteger(videoQuality) ? videoQuality : QUALITY_MAPPING[_.toLower(videoQuality)];\n    if (!quality) {\n      throw new Error(`videoQuality value should be one of ${JSON.stringify(_.keys(QUALITY_MAPPING))} or a number in range 1..100. ` +\n        `'${videoQuality}' is given instead`);\n    }\n    mjpegServerScreenshotQuality = mjpegServerScreenshotQuality !== quality ? quality : undefined;\n  } else {\n    mjpegServerScreenshotQuality = undefined;\n  }\n  if (videoFps) {\n    const fps = parseInt(videoFps, 10);\n    if (isNaN(fps)) {\n      throw new Error(`videoFps value should be a valid number in range 1..60. ` +\n        `'${videoFps}' is given instead`);\n    }\n    mjpegServerFramerate = mjpegServerFramerate !== fps ? fps : undefined;\n  } else {\n    mjpegServerFramerate = undefined;\n  }\n  if (util.hasValue(mjpegServerScreenshotQuality) || util.hasValue(mjpegServerFramerate)) {\n    await this.proxyCommand('/appium/settings', 'POST', {\n      settings: {\n        mjpegServerScreenshotQuality,\n        mjpegServerFramerate,\n      }\n    });\n  }\n\n  try {\n    await screenRecorder.start(timeoutSeconds * 1000);\n  } catch (e) {\n    await screenRecorder.interrupt(true);\n    await screenRecorder.cleanup();\n    throw e;\n  }\n  this._recentScreenRecorder = screenRecorder;\n\n  return result;\n};\n\n/**\n * @typedef {Object} StopRecordingOptions\n *\n * @property {?string} remotePath - The path to the remote location, where the resulting video should be uploaded.\n *                                  The following protocols are supported: http/https, ftp.\n *                                  Null or empty string value (the default setting) means the content of resulting\n *                                  file should be encoded as Base64 and passed as the endpoint response value.\n *                                  An exception will be thrown if the generated media file is too big to\n *                                  fit into the available process memory.\n * @property {?string} user - The name of the user for the remote authentication. Only works if `remotePath` is provided.\n * @property {?string} pass - The password for the remote authentication. Only works if `remotePath` is provided.\n * @property {?string} method - The http multipart upload method name. The 'PUT' one is used by default.\n *                              Only works if `remotePath` is provided.\n * @property {?Object} headers - Additional headers mapping for multipart http(s) uploads\n * @property {?string} fileFieldName [file] - The name of the form field, where the file content BLOB should be stored for\n *                                            http(s) uploads\n * @property {?Object|Array<Pair>} formFields - Additional form fields for multipart http(s) uploads\n */\n\n/**\n * Stop recording the screen. If no screen recording process is running then\n * the endpoint will try to get the recently recorded file.\n * If no previously recorded file is found and no active screen recording\n * processes are running then the method returns an empty string.\n *\n * @param {?StopRecordingOptions} options - The available options.\n * @returns {string} Base64-encoded content of the recorded media file if 'remotePath'\n *                   parameter is empty or null or an empty string.\n * @throws {Error} If there was an error while getting the name of a media file\n *                 or the file content cannot be uploaded to the remote location.\n */\ncommands.stopRecordingScreen = async function stopRecordingScreen (options = {}) {\n  if (!this._recentScreenRecorder) {\n    this.log.info('Screen recording is not running. There is nothing to stop.');\n    return '';\n  }\n\n  try {\n    const videoPath = await this._recentScreenRecorder.finish();\n    if (!await fs.exists(videoPath)) {\n      this.log.errorAndThrow(`The screen recorder utility has failed ` +\n        `to store the actual screen recording at '${videoPath}'`);\n    }\n    return await encodeBase64OrUpload(videoPath, options.remotePath, options);\n  } finally {\n    await this._recentScreenRecorder.interrupt(true);\n    await this._recentScreenRecorder.cleanup();\n    this._recentScreenRecorder = null;\n  }\n};\n\n\nexport { commands };\nexport default commands;\n"],"mappings":"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"}