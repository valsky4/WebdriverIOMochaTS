{"version":3,"file":"screenshots.js","names":["_asyncbox","require","_lodash","_interopRequireDefault","_support","commands","getScreenshot","getScreenshotFromWDA","log","debug","data","proxyCommand","_","isString","Error","JSON","stringify","mjpegStream","info","lastChunkPNGBase64","warn","err","message","isSimulator","opts","device","simctl","retryInterval","getElementScreenshot","el","util","unwrapElement","isWebContext","atomsElement","getAtomsElement","executeAtom","errorAndThrow","getViewportScreenshot","statusBarHeight","getStatusBarHeight","screenshot","scale","getDevicePixelRatio","Math","round","windowSize","getWindowSize","rect","left","top","width","height","newScreenshot","imageUtil","cropBase64Image","_default","exports","default"],"sources":["../../../lib/commands/screenshots.js"],"sourcesContent":["import { retryInterval } from 'asyncbox';\nimport _ from 'lodash';\nimport { util, imageUtil } from 'appium/support';\n\nlet commands = {};\n\ncommands.getScreenshot = async function getScreenshot () {\n  const getScreenshotFromWDA = async () => {\n    this.log.debug(`Taking screenshot with WDA`);\n    const data = await this.proxyCommand('/screenshot', 'GET');\n    if (!_.isString(data)) {\n      throw new Error(`Unable to take screenshot. WDA returned '${JSON.stringify(data)}'`);\n    }\n    return data;\n  };\n\n  // if we've specified an mjpeg server, use that\n  if (this.mjpegStream) {\n    this.log.info(`mjpeg video stream provided, returning latest frame as screenshot`);\n    const data = await this.mjpegStream.lastChunkPNGBase64();\n    if (data) {\n      return data;\n    }\n    this.log.warn('Tried to get screenshot from active MJPEG stream, but there ' +\n      'was no data yet. Falling back to regular screenshot methods.');\n  }\n\n  try {\n    return await getScreenshotFromWDA();\n  } catch (err) {\n    this.log.warn(`Error getting screenshot: ${err.message}`);\n  }\n\n  // simulator attempt\n  if (this.isSimulator()) {\n    this.log.info(`Falling back to 'simctl io screenshot' API`);\n    return await this.opts.device.simctl.getScreenshot();\n  }\n\n  // Retry for real devices only. Fail fast on Simulator if simctl does not work as expected\n  return await retryInterval(2, 1000, getScreenshotFromWDA);\n};\n\ncommands.getElementScreenshot = async function getElementScreenshot (el) {\n  el = util.unwrapElement(el);\n  if (this.isWebContext()) {\n    const atomsElement = this.getAtomsElement(el);\n    return await this.executeAtom('getElementScreenshot', [atomsElement]);\n  }\n\n  const data = await this.proxyCommand(`/element/${el}/screenshot`, 'GET');\n  if (!_.isString(data)) {\n    this.log.errorAndThrow(`Unable to take a screenshot of the element ${el}. WDA returned '${JSON.stringify(data)}'`);\n  }\n  return data;\n};\n\ncommands.getViewportScreenshot = async function getViewportScreenshot () {\n  let statusBarHeight = await this.getStatusBarHeight();\n  const screenshot = await this.getScreenshot();\n\n  // if we don't have a status bar, there's nothing to crop, so we can avoid\n  // extra calls and return straightaway\n  if (statusBarHeight === 0) {\n    return screenshot;\n  }\n\n  const scale = await this.getDevicePixelRatio();\n  // status bar height comes in unscaled, so scale it\n  statusBarHeight = Math.round(statusBarHeight * scale);\n  const windowSize = await this.getWindowSize();\n  let rect = {\n    left: 0,\n    top: statusBarHeight,\n    width: windowSize.width * scale,\n    height: ((windowSize.height * scale) - statusBarHeight)\n  };\n  let newScreenshot = await imageUtil.cropBase64Image(screenshot, rect);\n  return newScreenshot;\n};\n\nexport default commands;\n"],"mappings":"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"}