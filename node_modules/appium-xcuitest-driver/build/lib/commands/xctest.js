"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.assertIDB = assertIDB;
exports.default = exports.commands = void 0;
exports.parseXCTestStdout = parseXCTestStdout;
require("source-map-support/register");
var _bluebird = _interopRequireDefault(require("bluebird"));
var _support = require("appium/support");
var _lodash = _interopRequireDefault(require("lodash"));
var _driver = require("appium/driver");
const commands = {};
exports.commands = commands;
const XCTEST_TIMEOUT = 60 * 60 * 1000;
const xctestLog = _support.logger.getLogger('XCTest');
function assertIDB(opts) {
  var _opts$device;
  if (!((_opts$device = opts.device) !== null && _opts$device !== void 0 && _opts$device.idb) || !opts.launchWithIDB) {
    throw new Error(`To use XCTest runner, IDB (https://github.com/facebook/idb) must be installed ` + `and sessions must be run with the "launchWithIDB" capability`);
  }
  return opts.device.idb;
}
function parseXCTestStdout(stdout) {
  function parseKey(name) {
    const words = name.split(' ');
    let out = '';
    for (const word of words) {
      out += word.substr(0, 1).toUpperCase() + word.substr(1);
    }
    return out.substr(0, 1).toLowerCase() + out.substr(1);
  }
  function parseValue(value) {
    value = value || '';
    switch (value.toLowerCase()) {
      case 'true':
        return true;
      case 'false':
        return false;
      case '':
        return null;
      default:
        break;
    }
    if (!isNaN(value)) {
      if (!_lodash.default.isString(value)) {
        return 0;
      } else if (value.indexOf('.') > 0) {
        return parseFloat(value);
      }
      return parseInt(value, 10);
    }
    return value;
  }
  if (!stdout) {
    return [];
  }
  const lines = stdout.trim().split('\n');
  if (lines.length === 1 && !lines[0].includes('|')) {
    return [lines[0]];
  }
  const results = [];
  for (const line of lines) {
    const properties = line.split('|');
    const output = {};
    let entryIndex = 0;
    for (const prop of properties) {
      if (entryIndex === 0) {
        output.testName = prop.trim();
      } else if (prop.trim().startsWith('Location')) {
        output.location = prop.substring(prop.indexOf('Location') + 8).trim();
      } else {
        let [key, value] = prop.split(':');
        output[parseKey(key.trim())] = parseValue(value ? value.trim() : '');
      }
      entryIndex++;
    }
    if (!output.passed) {
      output.passed = output.status === 'passed';
      output.crashed = output.status === 'crashed';
    } else if (!output.status) {
      if (output.passed) {
        output.status = 'passed';
      } else if (output.crashed) {
        output.status = 'crashed';
      } else {
        output.status = 'failed';
      }
    }
    results.push(output);
  }
  return results;
}
commands.mobileRunXCTest = async function runXCTest({
  testRunnerBundleId,
  appUnderTestBundleId,
  xctestBundleId,
  testType = 'ui',
  env,
  args,
  timeout = XCTEST_TIMEOUT
}) {
  const subproc = await assertIDB(this.opts).runXCUITest(testRunnerBundleId, appUnderTestBundleId, xctestBundleId, {
    env,
    args,
    testType
  });
  return await new _bluebird.default((resolve, reject) => {
    let mostRecentLogObject = null;
    let xctestTimeout;
    let lastErrorMessage = null;
    if (timeout > 0) {
      xctestTimeout = setTimeout(() => reject(new _driver.errors.TimeoutError(`Timed out after '${timeout}ms' waiting for XCTest to complete`)), timeout);
    }
    subproc.on('output', (stdout, stderr) => {
      if (stdout) {
        try {
          mostRecentLogObject = parseXCTestStdout(stdout);
        } catch (err) {
          this.log.warn(`Failed to parse logs from test output: '${stdout}'`);
          this.log.debug(err.stack);
        }
      }
      if (stderr) {
        lastErrorMessage = stderr;
      }
      stdout && xctestLog.info(stdout);
      stderr && xctestLog.error(stderr);
    });
    subproc.on('exit', (code, signal) => {
      clearTimeout(xctestTimeout);
      if (code !== 0) {
        const err = new Error(lastErrorMessage || mostRecentLogObject);
        err.code = code;
        if (signal != null) {
          err.signal = signal;
        }
        if (mostRecentLogObject) {
          err.result = mostRecentLogObject;
        }
        return reject(err);
      }
      resolve({
        code,
        signal,
        results: mostRecentLogObject,
        passed: true
      });
    });
  });
};
commands.mobileInstallXCTestBundle = async function installXCTestBundle(opts) {
  const {
    xctestApp
  } = opts;
  if (!_lodash.default.isString(xctestApp)) {
    throw new _driver.errors.InvalidArgumentError(`'xctestApp' is a required parameter for 'installXCTestBundle' and ` + `must be a string. Found '${xctestApp}'`);
  }
  xctestLog.info(`Installing bundle '${xctestApp}'`);
  const idb = assertIDB(this.opts);
  const res = await this.helpers.configureApp(xctestApp, '.xctest');
  await idb.installXCTestBundle(res);
};
commands.mobileListXCTestBundles = async function listXCTestsInTestBundle() {
  return await assertIDB(this.opts).listXCTestBundles();
};
commands.mobileListXCTestsInTestBundle = async function listXCTestsInTestBundle(opts) {
  const {
    bundle
  } = opts;
  if (!_lodash.default.isString(bundle)) {
    throw new _driver.errors.InvalidArgumentError(`'bundle' is a required parameter for 'listXCTestsInTestBundle' and ` + `must be a string. Found '${bundle}'`);
  }
  const idb = assertIDB(this.opts);
  return await idb.listXCTestsInTestBundle(bundle);
};
Object.assign(commands);
var _default = commands;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,