{"version":3,"file":"xctest.js","names":["_bluebird","_interopRequireDefault","require","_support","_lodash","_driver","commands","exports","XCTEST_TIMEOUT","xctestLog","logger","getLogger","assertIDB","opts","_opts$device","device","idb","launchWithIDB","Error","parseXCTestStdout","stdout","parseKey","name","words","split","out","word","substr","toUpperCase","toLowerCase","parseValue","value","isNaN","_","isString","indexOf","parseFloat","parseInt","lines","trim","length","includes","results","line","properties","output","entryIndex","prop","testName","startsWith","location","substring","key","passed","status","crashed","push","mobileRunXCTest","runXCTest","testRunnerBundleId","appUnderTestBundleId","xctestBundleId","testType","env","args","timeout","subproc","runXCUITest","B","resolve","reject","mostRecentLogObject","xctestTimeout","lastErrorMessage","setTimeout","errors","TimeoutError","on","stderr","err","log","warn","debug","stack","info","error","code","signal","clearTimeout","result","mobileInstallXCTestBundle","installXCTestBundle","xctestApp","InvalidArgumentError","res","helpers","configureApp","mobileListXCTestBundles","listXCTestsInTestBundle","listXCTestBundles","mobileListXCTestsInTestBundle","bundle","Object","assign","_default","default"],"sources":["../../../lib/commands/xctest.js"],"sourcesContent":["import B from 'bluebird';\nimport { logger } from 'appium/support';\nimport _ from 'lodash';\nimport { errors } from 'appium/driver';\n\n\nconst commands = {};\n\nconst XCTEST_TIMEOUT = 60 * 60 * 1000; // 60 minute timeout\n\nconst xctestLog = logger.getLogger('XCTest');\n\n/**\n * Asserts that IDB is present and that launchWithIDB was used\n *\n * @param {object} opts Opts object from the driver instance\n */\nexport function assertIDB (opts) {\n  if (!opts.device?.idb || !opts.launchWithIDB) {\n    throw new Error(`To use XCTest runner, IDB (https://github.com/facebook/idb) must be installed ` +\n      `and sessions must be run with the \"launchWithIDB\" capability`);\n  }\n  return opts.device.idb;\n}\n\n\n/**\n * @typedef {Object} XCTestResult\n *\n * @property {string} testName Name of the test (e.g.: 'XCTesterAppUITests - XCTesterAppUITests.XCTesterAppUITests/testExample')\n * @property {boolean} passed Did the tests pass?\n * @property {boolean} crashed Did the tests crash?\n * @property {string} status Test result status (e.g.: 'passed', 'failed', 'crashed')\n * @property {number} duration How long did the tests take (in seconds)\n * @property {string} failureMessage Failure message (if applicable)\n * @property {number} location The geolocation of the tests (if applicable)\n */\n\n/**\n * Parse the stdout of XC test log\n * @param {string} stdout A line of standard out from `idb xctest run ...`\n * @returns {Array<XCTestResult>} results The final output of the XCTest run\n */\nexport function parseXCTestStdout (stdout) {\n  // Parses a 'key' into JSON format\n  function parseKey (name) {\n    const words = name.split(' ');\n    let out = '';\n    for (const word of words) {\n      out += word.substr(0, 1).toUpperCase() + word.substr(1);\n    }\n    return out.substr(0, 1).toLowerCase() + out.substr(1);\n  }\n\n  // Parses a 'value' into JSON format\n  function parseValue (value) {\n    value = value || '';\n    switch (value.toLowerCase()) {\n      case 'true': return true;\n      case 'false': return false;\n      case '': return null;\n      default: break;\n    }\n    if (!isNaN(value)) {\n      if (!_.isString(value)) {\n        return 0;\n      } else if (value.indexOf('.') > 0) {\n        return parseFloat(value);\n      }\n      return parseInt(value, 10);\n    }\n    return value;\n  }\n  if (!stdout) {\n    return [];\n  }\n\n  // Parse each line into an array\n  const lines = stdout.trim().split('\\n');\n\n  // One single string, just return the string\n  if (lines.length === 1 && !lines[0].includes('|')) {\n    return [lines[0]];\n  }\n\n  const results = [];\n  for (const line of lines) {\n    // The properties are split up by pipes and each property\n    // has the format \"Some Key : Some Value\"\n    const properties = line.split('|');\n\n    // Parse each property\n    const output = {};\n    let entryIndex = 0;\n    for (const prop of properties) {\n      if (entryIndex === 0) {\n        // The first property only contains one string that contains\n        // the test name (e.g.: 'XCTesterAppUITests - XCTesterAppUITests.XCTesterAppUITests/testExample')\n        output.testName = prop.trim();\n      } else if (prop.trim().startsWith('Location')) {\n        // The Location property has a value that comes after 'Location' without colon.\n        // e.g. Location /path/to/XCTesterAppUITests/XCTesterAppUITests.swift:36\n        output.location = prop.substring(prop.indexOf('Location') + 8).trim();\n      } else {\n        let [key, value] = prop.split(':');\n        output[parseKey(key.trim())] = parseValue(value ? value.trim() : '');\n      }\n      entryIndex++;\n    }\n\n    // keep backward compatibility\n    // old pattern: XCTesterAppUITests - XCTesterAppUITests.XCTesterAppUITests/testExample | Passed: True | Crashed: False | Duration: 1.485 | Failure message:  | Location :0\n    // latest pattern: XCTesterAppUITests - XCTesterAppUITests.XCTesterAppUITests/testExample | Status: passed | Duration: 1.9255789518356323\n    if (!output.passed) {\n      output.passed = output.status === 'passed';\n      output.crashed = output.status === 'crashed';\n    } else if (!output.status) {\n      if (output.passed) {\n        output.status = 'passed';\n      } else if (output.crashed) {\n        output.status = 'crashed';\n      } else {\n        output.status = 'failed';\n      }\n    }\n\n    // Add this line to the results\n    results.push(output);\n  }\n  return results;\n}\n\n/**\n * @typedef {Object} RunXCUITestResponse\n *\n * @property {Array<XCTestResult>} results The results of all the tests with information\n * @property {number} code The exit code of the process\n * @property {string} signal The signal that terminated the process (or null) (e.g.: SIGTERM)\n *\n */\n\n/**\n * @typedef {Object} RunXCUITestOptions\n *\n * @property {!string} testRunnerBundleId Test app bundle (e.g.: 'io.appium.XCTesterAppUITests.xctrunner')\n * @property {!string} appUnderTestBundleId App-under-test bundle\n * @property {!string} xcTestBundleID xctest bundle id\n * @property {string} testType [ui] XC test type. 'app', 'ui', or 'logic'\n * @property {object} env Environment variables passed to test\n * @property {Array<String>} args Launch arguments to start the test with (see https://developer.apple.com/documentation/xctest/xcuiapplication/1500477-launcharguments for reference)\n * @property {number} timeout [360000] Timeout if session doesn't complete after given time (in milliseconds)\n */\n\n\n/**\n * @typedef {Error} XCUITestError\n *\n * @property {number} code Subprocess exit code\n * @property {string} signal The signal (SIG*) that caused the process to fail\n * @property {!Array<XCTestResult>} results The output of the failed test (if there is output)\n */\n\n/**\n * Run an XCTest. Launches a subprocess that runs the XC Test and blocks\n * until it is complete. Parses the stdout of the process and returns\n * result as an array\n *\n * See https://fbidb.io/docs/test_execution for reference\n *\n * @param {RunXCUITestOptions} runXCUITestOptions\n * @throws {XCUITestError} Error thrown if subprocess returns non-zero exit code\n * @returns {RunXCUITestResponse}\n */\ncommands.mobileRunXCTest = async function runXCTest ({\n  testRunnerBundleId,\n  appUnderTestBundleId,\n  xctestBundleId,\n  testType = 'ui',\n  env,\n  args,\n  timeout = XCTEST_TIMEOUT,\n}) {\n  const subproc = await assertIDB(this.opts).runXCUITest(\n        testRunnerBundleId, appUnderTestBundleId, xctestBundleId, {env, args, testType},\n  );\n  return await new B((resolve, reject) => {\n    let mostRecentLogObject = null;\n    let xctestTimeout;\n    let lastErrorMessage = null;\n    if (timeout > 0) {\n      xctestTimeout = setTimeout(\n        () => reject(new errors.TimeoutError(`Timed out after '${timeout}ms' waiting for XCTest to complete`)),\n        timeout\n      );\n    }\n\n    subproc.on('output', (stdout, stderr) => {\n      if (stdout) {\n        try {\n          mostRecentLogObject = parseXCTestStdout(stdout);\n        } catch (err) {\n          // Fails if log parsing fails.\n          // This is in case IDB changes the way that logs are formatted and\n          // it breaks 'parseXCTestStdout'. If that happens we still want the process\n          // to finish\n          this.log.warn(`Failed to parse logs from test output: '${stdout}'`);\n          this.log.debug(err.stack);\n        }\n      }\n\n      if (stderr) {\n        lastErrorMessage = stderr;\n      }\n\n      stdout && xctestLog.info(stdout);\n      stderr && xctestLog.error(stderr);\n    });\n\n    subproc.on('exit', (code, signal) => {\n      clearTimeout(xctestTimeout);\n      if (code !== 0) {\n        const err = new Error(lastErrorMessage || mostRecentLogObject);\n        err.code = code;\n        if (signal != null) {\n          err.signal = signal;\n        }\n        if (mostRecentLogObject) {\n          err.result = mostRecentLogObject;\n        }\n        return reject(err);\n      }\n      resolve({\n        code, signal, results: mostRecentLogObject, passed: true,\n      });\n    });\n  });\n};\n\n/**\n * @typedef {Object} InstallXCTestBundleOpts\n *\n * @property {xctestApp} xctestBundle Path of the XCTest app (URL or .app)\n */\n\n/**\n * Install an XCTestBundle\n *\n * @param {InstallXCTestBundleOpts!} opts Install xctest bundle opts\n */\ncommands.mobileInstallXCTestBundle = async function installXCTestBundle (opts) {\n  const { xctestApp } = opts;\n  if (!_.isString(xctestApp)) {\n    throw new errors.InvalidArgumentError(`'xctestApp' is a required parameter for 'installXCTestBundle' and ` +\n      `must be a string. Found '${xctestApp}'`);\n  }\n  xctestLog.info(`Installing bundle '${xctestApp}'`);\n  const idb = assertIDB(this.opts);\n  const res = await this.helpers.configureApp(xctestApp, '.xctest');\n  await idb.installXCTestBundle(res);\n};\n\n/**\n * List XCTest bundles that are installed on device\n *\n * @returns {Array<string>} List of XCTest bundles (e.g.: \"XCTesterAppUITests.XCTesterAppUITests/testLaunchPerformance\")\n */\ncommands.mobileListXCTestBundles = async function listXCTestsInTestBundle () {\n  return await assertIDB(this.opts).listXCTestBundles();\n};\n\n/**\n * @typedef {Object} ListXCTestsOpts\n *\n * @property {!string} bundle Bundle ID of the XCTest\n */\n\n/**\n * List XCTests in a test bundle\n *\n * @param {!ListXCTestsOpts} opts XCTest list options\n *\n * @returns {Array<string>} The list of xctests in the test bundle\n *    (e.g.: [ 'XCTesterAppUITests.XCTesterAppUITests/testExample',\n                'XCTesterAppUITests.XCTesterAppUITests/testLaunchPerformance' ] )\n */\ncommands.mobileListXCTestsInTestBundle = async function listXCTestsInTestBundle (opts) {\n  const { bundle } = opts;\n  if (!_.isString(bundle)) {\n    throw new errors.InvalidArgumentError(`'bundle' is a required parameter for 'listXCTestsInTestBundle' and ` +\n      `must be a string. Found '${bundle}'`);\n  }\n  const idb = assertIDB(this.opts);\n  return await idb.listXCTestsInTestBundle(bundle);\n};\n\nObject.assign(commands);\nexport { commands };\nexport default commands;\n"],"mappings":"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"}