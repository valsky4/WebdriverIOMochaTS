"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createJSCookie = createJSCookie;
exports.createJWPCookie = createJWPCookie;
exports.default = void 0;
exports.expireCookie = expireCookie;
exports.getValue = getValue;
require("source-map-support/register");
var _lodash = _interopRequireDefault(require("lodash"));
var _support = require("appium/support");
const log = _support.logger.getLogger('Cookie');
function convertCookie(value, converter) {
  if (value.indexOf('"') === 0) {
    value = value.slice(1, -1).replace(/\\"/g, '"').replace(/\\\\/g, '\\');
  }
  let parsedValue;
  try {
    parsedValue = decodeURIComponent(value.replace(/\+/g, ' '));
  } catch (e) {
    log.warn(e);
  }
  return converter ? converter(parsedValue) : parsedValue;
}
function createJSCookie(key, value, options = {}) {
  return [encodeURIComponent(key), '=', value, options.expires ? `; expires=${options.expires}` : '', options.path ? `; path=${options.path}` : '', options.domain ? `; domain=${options.domain}` : '', options.secure ? '; secure' : ''].join('');
}
function createJWPCookie(key, cookieString, converter = null) {
  let result = {};
  let cookies = cookieString ? cookieString.split('; ') : [];
  for (let cookie of cookies) {
    let parts = cookie.split('=');
    let name = decodeURIComponent(parts.shift());
    let val = parts[0];
    if (key && key === name) {
      result.name = key;
      result.value = convertCookie(val, converter);
    } else {
      result[name] = convertCookie(val, converter);
    }
  }
  return result;
}
function getValue(key, cookieString, converter = null) {
  let result = createJWPCookie(key, cookieString, converter);
  return _lodash.default.isUndefined(key) ? result : result.value;
}
function expireCookie(key, options) {
  return createJSCookie(key, '', _lodash.default.assign({}, options, {
    expires: 'Thu, 01 Jan 1970 00:00:00 GMT'
  }));
}
var _default = {
  createJSCookie,
  createJWPCookie,
  getValue,
  expireCookie
};
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfbG9kYXNoIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfc3VwcG9ydCIsImxvZyIsImxvZ2dlciIsImdldExvZ2dlciIsImNvbnZlcnRDb29raWUiLCJ2YWx1ZSIsImNvbnZlcnRlciIsImluZGV4T2YiLCJzbGljZSIsInJlcGxhY2UiLCJwYXJzZWRWYWx1ZSIsImRlY29kZVVSSUNvbXBvbmVudCIsImUiLCJ3YXJuIiwiY3JlYXRlSlNDb29raWUiLCJrZXkiLCJvcHRpb25zIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiZXhwaXJlcyIsInBhdGgiLCJkb21haW4iLCJzZWN1cmUiLCJqb2luIiwiY3JlYXRlSldQQ29va2llIiwiY29va2llU3RyaW5nIiwicmVzdWx0IiwiY29va2llcyIsInNwbGl0IiwiY29va2llIiwicGFydHMiLCJuYW1lIiwic2hpZnQiLCJ2YWwiLCJnZXRWYWx1ZSIsIl8iLCJpc1VuZGVmaW5lZCIsImV4cGlyZUNvb2tpZSIsImFzc2lnbiIsIl9kZWZhdWx0IiwiZXhwb3J0cyIsImRlZmF1bHQiXSwic291cmNlcyI6WyIuLi8uLi9saWIvY29va2llcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogZGVyaXZlZCBmcm9tIGpRdWVyeSBDb29raWUgUGx1Z2luIHYxLjQuMVxuICogaHR0cHM6Ly9naXRodWIuY29tL2NhcmhhcnRsL2pxdWVyeS1jb29raWVcbiAqL1xuXG4vLyBuZWVkZWQgdG8gY29tbXVuaWNhdGUvdHJhbnNsYXRlIGJldHdlZW4gSlNPTldpcmUgY29va2llcyBhbmQgcmVndWxhciBKYXZhU2NyaXB0IGNvb2tpZXNcblxuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IGxvZ2dlciB9IGZyb20gJ2FwcGl1bS9zdXBwb3J0JztcblxuXG5jb25zdCBsb2cgPSBsb2dnZXIuZ2V0TG9nZ2VyKCdDb29raWUnKTtcblxuLy8gcGFyc2VzIHRoZSB2YWx1ZSBpZiBuZWVkZWQgYW5kIGNvbnZlcnRzIHRoZSB2YWx1ZSBpZiBhIGNvbnZlcnRlciBpcyBwcm92aWRlZFxuLy8gaW50ZXJuYWwgZnVuY3Rpb24sIG5vdCBleHBvcnRlZFxuZnVuY3Rpb24gY29udmVydENvb2tpZSAodmFsdWUsIGNvbnZlcnRlcikge1xuICBpZiAodmFsdWUuaW5kZXhPZignXCInKSA9PT0gMCkge1xuICAgIC8vIHRoaXMgaXMgYSBxdW90ZWQgY29va2llZCBhY2NvcmRpbmcgdG8gUkZDMjA2OFxuICAgIC8vIHJlbW92ZSBlbmNsb3NpbmcgcXVvdGVzIGFuZCBpbnRlcm5hbCBxdW90ZXMgYW5kIGJhY2tzbGFzaGVzXG4gICAgdmFsdWUgPSB2YWx1ZS5zbGljZSgxLCAtMSkucmVwbGFjZSgvXFxcXFwiL2csICdcIicpLnJlcGxhY2UoL1xcXFxcXFxcL2csICdcXFxcJyk7XG4gIH1cblxuICBsZXQgcGFyc2VkVmFsdWU7XG4gIHRyeSB7XG4gICAgcGFyc2VkVmFsdWUgPSBkZWNvZGVVUklDb21wb25lbnQodmFsdWUucmVwbGFjZSgvXFwrL2csICcgJykpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gbm8gbmVlZCB0byBmYWlsIGlmIHdlIGNhbid0IGRlY29kZVxuICAgIGxvZy53YXJuKGUpO1xuICB9XG5cbiAgcmV0dXJuIGNvbnZlcnRlciA/IGNvbnZlcnRlcihwYXJzZWRWYWx1ZSkgOiBwYXJzZWRWYWx1ZTtcbn1cblxuLy8gdGFrZXMgYXJndW1lbnRzIGdpdmVuIGFuZCBjcmVhdGVzIGEgSmF2YVNjcmlwdCBDb29raWVcbmZ1bmN0aW9uIGNyZWF0ZUpTQ29va2llIChrZXksIHZhbHVlLCBvcHRpb25zID0ge30pIHtcbiAgcmV0dXJuIFtcbiAgICBlbmNvZGVVUklDb21wb25lbnQoa2V5KSwgJz0nLCB2YWx1ZSxcbiAgICBvcHRpb25zLmV4cGlyZXNcbiAgICAgID8gYDsgZXhwaXJlcz0ke29wdGlvbnMuZXhwaXJlc31gXG4gICAgICA6ICcnLFxuICAgIG9wdGlvbnMucGF0aFxuICAgICAgPyBgOyBwYXRoPSR7b3B0aW9ucy5wYXRofWBcbiAgICAgIDogJycsXG4gICAgb3B0aW9ucy5kb21haW5cbiAgICAgID8gYDsgZG9tYWluPSR7b3B0aW9ucy5kb21haW59YFxuICAgICAgOiAnJyxcbiAgICBvcHRpb25zLnNlY3VyZVxuICAgICAgPyAnOyBzZWN1cmUnXG4gICAgICA6ICcnXG4gIF0uam9pbignJyk7XG59XG5cbi8vIHRha2VzIHRoZSBKYXZhU2NyaXB0IGNvb2tpZVN0cmluZyBhbmQgdHJhbnNsYXRlcyBpdCBpbnRvIGEgSlNPTldpcmUgZm9ybWF0dGVkIGNvb2tpZVxuZnVuY3Rpb24gY3JlYXRlSldQQ29va2llIChrZXksIGNvb2tpZVN0cmluZywgY29udmVydGVyID0gbnVsbCkge1xuICBsZXQgcmVzdWx0ID0ge307XG4gIGxldCBjb29raWVzID0gY29va2llU3RyaW5nID8gY29va2llU3RyaW5nLnNwbGl0KCc7ICcpIDogW107XG4gIGZvciAobGV0IGNvb2tpZSBvZiBjb29raWVzKSB7XG4gICAgbGV0IHBhcnRzID0gY29va2llLnNwbGl0KCc9Jyk7XG5cbiAgICAvLyBnZXQgdGhlIGZpcnN0IGFuZCBzZWNvbmQgZWxlbWVudCBhcyBuYW1lIGFuZCB2YWx1ZVxuICAgIGxldCBuYW1lID0gZGVjb2RlVVJJQ29tcG9uZW50KHBhcnRzLnNoaWZ0KCkpO1xuICAgIGxldCB2YWwgPSBwYXJ0c1swXTtcblxuICAgIC8vIGlmIG5hbWUgaXMga2V5LCB0aGlzIGlzIHRoZSBjZW50cmFsIGVsZW1lbnQgb2YgdGhlIGNvb2tpZSwgc28gYWRkIGFzIGBuYW1lYFxuICAgIC8vIG90aGVyd2lzZSBpdCBpcyBhbiBvcHRpb25hbCBlbGVtZW50XG4gICAgaWYgKGtleSAmJiBrZXkgPT09IG5hbWUpIHtcbiAgICAgIHJlc3VsdC5uYW1lID0ga2V5O1xuICAgICAgcmVzdWx0LnZhbHVlID0gY29udmVydENvb2tpZSh2YWwsIGNvbnZlcnRlcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdFtuYW1lXSA9IGNvbnZlcnRDb29raWUodmFsLCBjb252ZXJ0ZXIpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vLyB0YWtlcyBhIEphdmFTY3JpcHQgY29va2llc3RyaW5nIGFuZCBwYXJzZXMgaXQgZm9yIHRoZSB2YWx1ZSBnaXZlbiB0aGUga2V5XG5mdW5jdGlvbiBnZXRWYWx1ZSAoa2V5LCBjb29raWVTdHJpbmcsIGNvbnZlcnRlciA9IG51bGwpIHtcbiAgbGV0IHJlc3VsdCA9IGNyZWF0ZUpXUENvb2tpZShrZXksIGNvb2tpZVN0cmluZywgY29udmVydGVyKTtcblxuICAvLyBpZiBga2V5YCBpcyB1bmRlZmluZWQgd2Ugd2FudCB0aGUgZW50aXJlIGNvb2tpZVxuICByZXR1cm4gXy5pc1VuZGVmaW5lZChrZXkpID8gcmVzdWx0IDogcmVzdWx0LnZhbHVlO1xufVxuXG5cbi8vIHJldHVybnMgYSBjb29raWUgdGhhdCBleHBpcmVzIG9uIDAxIEphbiAxOTcwXG4vLyBhc3NpZ24gdGhlIHJldHVybmVkIGNvb2tpZSB0byBhbiBleGlzdGluZyBjb29raWUgdG8gZGVsZXRlIHRoYXQgY29va2llXG5mdW5jdGlvbiBleHBpcmVDb29raWUgKGtleSwgb3B0aW9ucykge1xuICAvLyBvdmVycmlkZSBgZXhwaXJlc2AgaW4gYG9wdGlvbnNgLCBhbmQgdGhlbiBtYWtlIHRoZSBjb29raWVcbiAgcmV0dXJuIGNyZWF0ZUpTQ29va2llKGtleSwgJycsIF8uYXNzaWduKHt9LCBvcHRpb25zLCB7XG4gICAgZXhwaXJlczogJ1RodSwgMDEgSmFuIDE5NzAgMDA6MDA6MDAgR01UJ1xuICB9KSk7XG59XG5cbi8vIGV4cG9ydCBpbmRpdmlkdWFsbHkgYW5kIGFsc28gKGFzIGRlZmF1bHQpIGFzIGFuIG9iamVjdFxuZXhwb3J0IHsgY3JlYXRlSlNDb29raWUsIGNyZWF0ZUpXUENvb2tpZSwgZ2V0VmFsdWUsIGV4cGlyZUNvb2tpZSB9O1xuZXhwb3J0IGRlZmF1bHQgeyBjcmVhdGVKU0Nvb2tpZSwgY3JlYXRlSldQQ29va2llLCBnZXRWYWx1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