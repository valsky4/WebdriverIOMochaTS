"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.DeviceConnectionsFactory = exports.DEVICE_CONNECTIONS_FACTORY = void 0;
require("source-map-support/register");
var _lodash = _interopRequireDefault(require("lodash"));
var _net = _interopRequireDefault(require("net"));
var _bluebird = _interopRequireDefault(require("bluebird"));
var _support = require("appium/support");
var _appiumIosDevice = require("appium-ios-device");
var _portscanner = require("portscanner");
var _asyncbox = require("asyncbox");
const LOCALHOST = '127.0.0.1';
class iProxy {
  constructor(udid, localport, deviceport) {
    this.localport = parseInt(localport, 10);
    this.deviceport = parseInt(deviceport, 10);
    this.udid = udid;
    this.localServer = null;
    this.log = _support.logger.getLogger(`iProxy@${udid.substring(0, 8)}:${this.localport}`);
  }
  async start() {
    if (this.localServer) {
      return;
    }
    this.localServer = _net.default.createServer(async localSocket => {
      let remoteSocket;
      try {
        remoteSocket = await _appiumIosDevice.utilities.connectPort(this.udid, this.deviceport);
      } catch (e) {
        this.log.debug(e.message);
        localSocket.destroy();
        return;
      }
      const destroyCommChannel = () => {
        remoteSocket.unpipe(localSocket);
        localSocket.unpipe(remoteSocket);
      };
      remoteSocket.once('close', () => {
        destroyCommChannel();
        localSocket.destroy();
      });
      remoteSocket.on('error', e => this.log.debug(e));
      localSocket.once('end', destroyCommChannel);
      localSocket.once('close', () => {
        destroyCommChannel();
        remoteSocket.destroy();
      });
      localSocket.on('error', e => this.log.warn(e.message));
      localSocket.pipe(remoteSocket);
      remoteSocket.pipe(localSocket);
    });
    const listeningPromise = new _bluebird.default((resolve, reject) => {
      this.localServer.once('listening', resolve);
      this.localServer.once('error', reject);
    });
    this.localServer.listen(this.localport);
    try {
      await listeningPromise;
    } catch (e) {
      this.localServer = null;
      throw e;
    }
    this.localServer.on('error', e => this.log.warn(e.message));
    this.localServer.once('close', e => {
      if (e) {
        this.log.info(`The connection has been closed with error ${e.message}`);
      } else {
        this.log.info(`The connection has been closed`);
      }
      this.localServer = null;
    });
    this.onBeforeProcessExit = this._closeLocalServer.bind(this);
    process.on('beforeExit', this.onBeforeProcessExit);
  }
  _closeLocalServer() {
    if (!this.localServer) {
      return;
    }
    this.log.debug(`Closing the connection`);
    this.localServer.close();
    this.localServer = null;
  }
  stop() {
    if (this.onBeforeProcessExit) {
      process.off('beforeExit', this.onBeforeProcessExit);
      this.onBeforeProcessExit = null;
    }
    this._closeLocalServer();
  }
}
const log = _support.logger.getLogger('DevCon Factory');
const PORT_CLOSE_TIMEOUT = 15 * 1000;
const SPLITTER = ':';
class DeviceConnectionsFactory {
  constructor() {
    this._connectionsMapping = {};
  }
  _udidAsToken(udid) {
    return `${_support.util.hasValue(udid) ? udid : ''}${SPLITTER}`;
  }
  _portAsToken(port) {
    return `${SPLITTER}${_support.util.hasValue(port) ? port : ''}`;
  }
  _toKey(udid = null, port = null) {
    return `${_support.util.hasValue(udid) ? udid : ''}${SPLITTER}${_support.util.hasValue(port) ? port : ''}`;
  }
  _releaseProxiedConnections(connectionKeys) {
    const keys = connectionKeys.filter(k => _lodash.default.has(this._connectionsMapping[k], 'iproxy'));
    for (const key of keys) {
      log.info(`Releasing the listener for '${key}'`);
      try {
        this._connectionsMapping[key].iproxy.stop();
      } catch (e) {
        log.debug(e);
      }
    }
    return keys;
  }
  listConnections(udid = null, port = null, strict = false) {
    if (!udid && !port) {
      return [];
    }
    return _lodash.default.keys(this._connectionsMapping).filter(key => strict && udid && port ? key === this._toKey(udid, port) : udid && key.startsWith(this._udidAsToken(udid)) || port && key.endsWith(this._portAsToken(port)));
  }
  async requestConnection(udid, port, options = {}) {
    if (!udid || !port) {
      log.warn('Did not know how to request the connection:');
      if (!udid) {
        log.warn('- Device UDID is unset');
      }
      if (!port) {
        log.warn('- The local port number is unset');
      }
      return;
    }
    const {
      usePortForwarding,
      devicePort
    } = options;
    log.info(`Requesting connection for device ${udid} on local port ${port}` + (devicePort ? `, device port ${devicePort}` : ''));
    log.debug(`Cached connections count: ${_lodash.default.size(this._connectionsMapping)}`);
    const connectionsOnPort = this.listConnections(null, port);
    if (!_lodash.default.isEmpty(connectionsOnPort)) {
      log.info(`Found cached connections on port #${port}: ${JSON.stringify(connectionsOnPort)}`);
    }
    if (usePortForwarding) {
      let isPortBusy = (await (0, _portscanner.checkPortStatus)(port, LOCALHOST)) === 'open';
      if (isPortBusy) {
        log.warn(`Port #${port} is busy. Did you quit the previous driver session(s) properly?`);
        if (!_lodash.default.isEmpty(connectionsOnPort)) {
          log.info('Trying to release the port');
          for (const key of this._releaseProxiedConnections(connectionsOnPort)) {
            delete this._connectionsMapping[key];
          }
          const timer = new _support.timing.Timer().start();
          try {
            await (0, _asyncbox.waitForCondition)(async () => {
              try {
                if ((await (0, _portscanner.checkPortStatus)(port, LOCALHOST)) !== 'open') {
                  log.info(`Port #${port} has been successfully released after ` + `${timer.getDuration().asMilliSeconds.toFixed(0)}ms`);
                  isPortBusy = false;
                  return true;
                }
              } catch (ign) {}
              return false;
            }, {
              waitMs: PORT_CLOSE_TIMEOUT,
              intervalMs: 300
            });
          } catch (ign) {
            log.warn(`Did not know how to release port #${port} in ` + `${timer.getDuration().asMilliSeconds.toFixed(0)}ms`);
          }
        }
      }
      if (isPortBusy) {
        throw new Error(`The port #${port} is occupied by an other process. ` + `You can either quit that process or select another free port.`);
      }
    }
    const currentKey = this._toKey(udid, port);
    if (usePortForwarding) {
      const iproxy = new iProxy(udid, port, devicePort);
      try {
        await iproxy.start();
        this._connectionsMapping[currentKey] = {
          iproxy
        };
      } catch (e) {
        try {
          iproxy.stop();
        } catch (e1) {
          log.debug(e1);
        }
        throw e;
      }
    } else {
      this._connectionsMapping[currentKey] = {};
    }
    log.info(`Successfully requested the connection for ${currentKey}`);
  }
  releaseConnection(udid = null, port = null) {
    if (!udid && !port) {
      log.warn('Neither device UDID nor local port is set. ' + 'Did not know how to release the connection');
      return;
    }
    log.info(`Releasing connections for ${udid || 'any'} device on ${port || 'any'} port number`);
    const keys = this.listConnections(udid, port, true);
    if (_lodash.default.isEmpty(keys)) {
      log.info('No cached connections have been found');
      return;
    }
    log.info(`Found cached connections to release: ${JSON.stringify(keys)}`);
    this._releaseProxiedConnections(keys);
    for (const key of keys) {
      delete this._connectionsMapping[key];
    }
    log.debug(`Cached connections count: ${_lodash.default.size(this._connectionsMapping)}`);
  }
}
exports.DeviceConnectionsFactory = DeviceConnectionsFactory;
const DEVICE_CONNECTIONS_FACTORY = new DeviceConnectionsFactory();
exports.DEVICE_CONNECTIONS_FACTORY = DEVICE_CONNECTIONS_FACTORY;
var _default = DEVICE_CONNECTIONS_FACTORY;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfbG9kYXNoIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfbmV0IiwiX2JsdWViaXJkIiwiX3N1cHBvcnQiLCJfYXBwaXVtSW9zRGV2aWNlIiwiX3BvcnRzY2FubmVyIiwiX2FzeW5jYm94IiwiTE9DQUxIT1NUIiwiaVByb3h5IiwiY29uc3RydWN0b3IiLCJ1ZGlkIiwibG9jYWxwb3J0IiwiZGV2aWNlcG9ydCIsInBhcnNlSW50IiwibG9jYWxTZXJ2ZXIiLCJsb2ciLCJsb2dnZXIiLCJnZXRMb2dnZXIiLCJzdWJzdHJpbmciLCJzdGFydCIsIm5ldCIsImNyZWF0ZVNlcnZlciIsImxvY2FsU29ja2V0IiwicmVtb3RlU29ja2V0IiwidXRpbGl0aWVzIiwiY29ubmVjdFBvcnQiLCJlIiwiZGVidWciLCJtZXNzYWdlIiwiZGVzdHJveSIsImRlc3Ryb3lDb21tQ2hhbm5lbCIsInVucGlwZSIsIm9uY2UiLCJvbiIsIndhcm4iLCJwaXBlIiwibGlzdGVuaW5nUHJvbWlzZSIsIkIiLCJyZXNvbHZlIiwicmVqZWN0IiwibGlzdGVuIiwiaW5mbyIsIm9uQmVmb3JlUHJvY2Vzc0V4aXQiLCJfY2xvc2VMb2NhbFNlcnZlciIsImJpbmQiLCJwcm9jZXNzIiwiY2xvc2UiLCJzdG9wIiwib2ZmIiwiUE9SVF9DTE9TRV9USU1FT1VUIiwiU1BMSVRURVIiLCJEZXZpY2VDb25uZWN0aW9uc0ZhY3RvcnkiLCJfY29ubmVjdGlvbnNNYXBwaW5nIiwiX3VkaWRBc1Rva2VuIiwidXRpbCIsImhhc1ZhbHVlIiwiX3BvcnRBc1Rva2VuIiwicG9ydCIsIl90b0tleSIsIl9yZWxlYXNlUHJveGllZENvbm5lY3Rpb25zIiwiY29ubmVjdGlvbktleXMiLCJrZXlzIiwiZmlsdGVyIiwiayIsIl8iLCJoYXMiLCJrZXkiLCJpcHJveHkiLCJsaXN0Q29ubmVjdGlvbnMiLCJzdHJpY3QiLCJzdGFydHNXaXRoIiwiZW5kc1dpdGgiLCJyZXF1ZXN0Q29ubmVjdGlvbiIsIm9wdGlvbnMiLCJ1c2VQb3J0Rm9yd2FyZGluZyIsImRldmljZVBvcnQiLCJzaXplIiwiY29ubmVjdGlvbnNPblBvcnQiLCJpc0VtcHR5IiwiSlNPTiIsInN0cmluZ2lmeSIsImlzUG9ydEJ1c3kiLCJjaGVja1BvcnRTdGF0dXMiLCJ0aW1lciIsInRpbWluZyIsIlRpbWVyIiwid2FpdEZvckNvbmRpdGlvbiIsImdldER1cmF0aW9uIiwiYXNNaWxsaVNlY29uZHMiLCJ0b0ZpeGVkIiwiaWduIiwid2FpdE1zIiwiaW50ZXJ2YWxNcyIsIkVycm9yIiwiY3VycmVudEtleSIsImUxIiwicmVsZWFzZUNvbm5lY3Rpb24iLCJleHBvcnRzIiwiREVWSUNFX0NPTk5FQ1RJT05TX0ZBQ1RPUlkiLCJfZGVmYXVsdCIsImRlZmF1bHQiXSwic291cmNlcyI6WyIuLi8uLi9saWIvZGV2aWNlLWNvbm5lY3Rpb25zLWZhY3RvcnkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBuZXQgZnJvbSAnbmV0JztcbmltcG9ydCBCIGZyb20gJ2JsdWViaXJkJztcbmltcG9ydCB7IGxvZ2dlciwgdXRpbCwgdGltaW5nIH0gZnJvbSAnYXBwaXVtL3N1cHBvcnQnO1xuaW1wb3J0IHsgdXRpbGl0aWVzIH0gZnJvbSAnYXBwaXVtLWlvcy1kZXZpY2UnO1xuaW1wb3J0IHsgY2hlY2tQb3J0U3RhdHVzIH0gZnJvbSAncG9ydHNjYW5uZXInO1xuaW1wb3J0IHsgd2FpdEZvckNvbmRpdGlvbiB9IGZyb20gJ2FzeW5jYm94JztcblxuXG5jb25zdCBMT0NBTEhPU1QgPSAnMTI3LjAuMC4xJztcblxuY2xhc3MgaVByb3h5IHtcbiAgY29uc3RydWN0b3IgKHVkaWQsIGxvY2FscG9ydCwgZGV2aWNlcG9ydCkge1xuICAgIHRoaXMubG9jYWxwb3J0ID0gcGFyc2VJbnQobG9jYWxwb3J0LCAxMCk7XG4gICAgdGhpcy5kZXZpY2Vwb3J0ID0gcGFyc2VJbnQoZGV2aWNlcG9ydCwgMTApO1xuICAgIHRoaXMudWRpZCA9IHVkaWQ7XG4gICAgdGhpcy5sb2NhbFNlcnZlciA9IG51bGw7XG4gICAgdGhpcy5sb2cgPSBsb2dnZXIuZ2V0TG9nZ2VyKGBpUHJveHlAJHt1ZGlkLnN1YnN0cmluZygwLCA4KX06JHt0aGlzLmxvY2FscG9ydH1gKTtcbiAgfVxuXG4gIGFzeW5jIHN0YXJ0ICgpIHtcbiAgICBpZiAodGhpcy5sb2NhbFNlcnZlcikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMubG9jYWxTZXJ2ZXIgPSBuZXQuY3JlYXRlU2VydmVyKGFzeW5jIChsb2NhbFNvY2tldCkgPT4ge1xuICAgICAgbGV0IHJlbW90ZVNvY2tldDtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFdlIGNhbiBvbmx5IGNvbm5lY3QgdG8gdGhlIHJlbW90ZSBzb2NrZXQgYWZ0ZXIgdGhlIGxvY2FsIHNvY2tldCBjb25uZWN0aW9uIHN1Y2NlZWRzXG4gICAgICAgIHJlbW90ZVNvY2tldCA9IGF3YWl0IHV0aWxpdGllcy5jb25uZWN0UG9ydCh0aGlzLnVkaWQsIHRoaXMuZGV2aWNlcG9ydCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHRoaXMubG9nLmRlYnVnKGUubWVzc2FnZSk7XG4gICAgICAgIGxvY2FsU29ja2V0LmRlc3Ryb3koKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBkZXN0cm95Q29tbUNoYW5uZWwgPSAoKSA9PiB7XG4gICAgICAgIHJlbW90ZVNvY2tldC51bnBpcGUobG9jYWxTb2NrZXQpO1xuICAgICAgICBsb2NhbFNvY2tldC51bnBpcGUocmVtb3RlU29ja2V0KTtcbiAgICAgIH07XG4gICAgICByZW1vdGVTb2NrZXQub25jZSgnY2xvc2UnLCAoKSA9PiB7XG4gICAgICAgIGRlc3Ryb3lDb21tQ2hhbm5lbCgpO1xuICAgICAgICBsb2NhbFNvY2tldC5kZXN0cm95KCk7XG4gICAgICB9KTtcbiAgICAgIC8vIG5vdCBhbGwgcmVtb3RlIHNvY2tldCBlcnJvcnMgYXJlIGNyaXRpY2FsIGZvciB0aGUgdXNlclxuICAgICAgcmVtb3RlU29ja2V0Lm9uKCdlcnJvcicsIChlKSA9PiB0aGlzLmxvZy5kZWJ1ZyhlKSk7XG4gICAgICBsb2NhbFNvY2tldC5vbmNlKCdlbmQnLCBkZXN0cm95Q29tbUNoYW5uZWwpO1xuICAgICAgbG9jYWxTb2NrZXQub25jZSgnY2xvc2UnLCAoKSA9PiB7XG4gICAgICAgIGRlc3Ryb3lDb21tQ2hhbm5lbCgpO1xuICAgICAgICByZW1vdGVTb2NrZXQuZGVzdHJveSgpO1xuICAgICAgfSk7XG4gICAgICBsb2NhbFNvY2tldC5vbignZXJyb3InLCAoZSkgPT4gdGhpcy5sb2cud2FybihlLm1lc3NhZ2UpKTtcbiAgICAgIGxvY2FsU29ja2V0LnBpcGUocmVtb3RlU29ja2V0KTtcbiAgICAgIHJlbW90ZVNvY2tldC5waXBlKGxvY2FsU29ja2V0KTtcbiAgICB9KTtcbiAgICBjb25zdCBsaXN0ZW5pbmdQcm9taXNlID0gbmV3IEIoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgdGhpcy5sb2NhbFNlcnZlci5vbmNlKCdsaXN0ZW5pbmcnLCByZXNvbHZlKTtcbiAgICAgIHRoaXMubG9jYWxTZXJ2ZXIub25jZSgnZXJyb3InLCByZWplY3QpO1xuICAgIH0pO1xuICAgIHRoaXMubG9jYWxTZXJ2ZXIubGlzdGVuKHRoaXMubG9jYWxwb3J0KTtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgbGlzdGVuaW5nUHJvbWlzZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0aGlzLmxvY2FsU2VydmVyID0gbnVsbDtcbiAgICAgIHRocm93IGU7XG4gICAgfVxuICAgIHRoaXMubG9jYWxTZXJ2ZXIub24oJ2Vycm9yJywgKGUpID0+IHRoaXMubG9nLndhcm4oZS5tZXNzYWdlKSk7XG4gICAgdGhpcy5sb2NhbFNlcnZlci5vbmNlKCdjbG9zZScsIChlKSA9PiB7XG4gICAgICBpZiAoZSkge1xuICAgICAgICB0aGlzLmxvZy5pbmZvKGBUaGUgY29ubmVjdGlvbiBoYXMgYmVlbiBjbG9zZWQgd2l0aCBlcnJvciAke2UubWVzc2FnZX1gKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMubG9nLmluZm8oYFRoZSBjb25uZWN0aW9uIGhhcyBiZWVuIGNsb3NlZGApO1xuICAgICAgfVxuICAgICAgdGhpcy5sb2NhbFNlcnZlciA9IG51bGw7XG4gICAgfSk7XG5cbiAgICB0aGlzLm9uQmVmb3JlUHJvY2Vzc0V4aXQgPSB0aGlzLl9jbG9zZUxvY2FsU2VydmVyLmJpbmQodGhpcyk7XG4gICAgLy8gTWFrZSBzdXJlIHdlIGZyZWUgdXAgdGhlIHNvY2tldCBvbiBwcm9jZXNzIGV4aXRcbiAgICBwcm9jZXNzLm9uKCdiZWZvcmVFeGl0JywgdGhpcy5vbkJlZm9yZVByb2Nlc3NFeGl0KTtcbiAgfVxuXG4gIF9jbG9zZUxvY2FsU2VydmVyICgpIHtcbiAgICBpZiAoIXRoaXMubG9jYWxTZXJ2ZXIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLmxvZy5kZWJ1ZyhgQ2xvc2luZyB0aGUgY29ubmVjdGlvbmApO1xuICAgIHRoaXMubG9jYWxTZXJ2ZXIuY2xvc2UoKTtcbiAgICB0aGlzLmxvY2FsU2VydmVyID0gbnVsbDtcbiAgfVxuXG4gIHN0b3AgKCkge1xuICAgIGlmICh0aGlzLm9uQmVmb3JlUHJvY2Vzc0V4aXQpIHtcbiAgICAgIHByb2Nlc3Mub2ZmKCdiZWZvcmVFeGl0JywgdGhpcy5vbkJlZm9yZVByb2Nlc3NFeGl0KTtcbiAgICAgIHRoaXMub25CZWZvcmVQcm9jZXNzRXhpdCA9IG51bGw7XG4gICAgfVxuXG4gICAgdGhpcy5fY2xvc2VMb2NhbFNlcnZlcigpO1xuICB9XG59XG5cblxuY29uc3QgbG9nID0gbG9nZ2VyLmdldExvZ2dlcignRGV2Q29uIEZhY3RvcnknKTtcbmNvbnN0IFBPUlRfQ0xPU0VfVElNRU9VVCA9IDE1ICogMTAwMDsgLy8gMTUgc2Vjb25kc1xuY29uc3QgU1BMSVRURVIgPSAnOic7XG5cbmNsYXNzIERldmljZUNvbm5lY3Rpb25zRmFjdG9yeSB7XG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICB0aGlzLl9jb25uZWN0aW9uc01hcHBpbmcgPSB7fTtcbiAgfVxuXG4gIF91ZGlkQXNUb2tlbiAodWRpZCkge1xuICAgIHJldHVybiBgJHt1dGlsLmhhc1ZhbHVlKHVkaWQpID8gdWRpZCA6ICcnfSR7U1BMSVRURVJ9YDtcbiAgfVxuXG4gIF9wb3J0QXNUb2tlbiAocG9ydCkge1xuICAgIHJldHVybiBgJHtTUExJVFRFUn0ke3V0aWwuaGFzVmFsdWUocG9ydCkgPyBwb3J0IDogJyd9YDtcbiAgfVxuXG4gIF90b0tleSAodWRpZCA9IG51bGwsIHBvcnQgPSBudWxsKSB7XG4gICAgcmV0dXJuIGAke3V0aWwuaGFzVmFsdWUodWRpZCkgPyB1ZGlkIDogJyd9JHtTUExJVFRFUn0ke3V0aWwuaGFzVmFsdWUocG9ydCkgPyBwb3J0IDogJyd9YDtcbiAgfVxuXG4gIF9yZWxlYXNlUHJveGllZENvbm5lY3Rpb25zIChjb25uZWN0aW9uS2V5cykge1xuICAgIGNvbnN0IGtleXMgPSBjb25uZWN0aW9uS2V5c1xuICAgICAgLmZpbHRlcigoaykgPT4gXy5oYXModGhpcy5fY29ubmVjdGlvbnNNYXBwaW5nW2tdLCAnaXByb3h5JykpO1xuICAgIGZvciAoY29uc3Qga2V5IG9mIGtleXMpIHtcbiAgICAgIGxvZy5pbmZvKGBSZWxlYXNpbmcgdGhlIGxpc3RlbmVyIGZvciAnJHtrZXl9J2ApO1xuICAgICAgdHJ5IHtcbiAgICAgICAgdGhpcy5fY29ubmVjdGlvbnNNYXBwaW5nW2tleV0uaXByb3h5LnN0b3AoKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgbG9nLmRlYnVnKGUpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ga2V5cztcbiAgfVxuXG4gIGxpc3RDb25uZWN0aW9ucyAodWRpZCA9IG51bGwsIHBvcnQgPSBudWxsLCBzdHJpY3QgPSBmYWxzZSkge1xuICAgIGlmICghdWRpZCAmJiAhcG9ydCkge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cblxuICAgIC8vIGB0aGlzLl9jb25uZWN0aW9uTWFwcGluZ2Aga2V5cyBoYXZlIGZvcm1hdCBgdWRpZDpwb3J0YFxuICAgIC8vIHRoZSBgc3RyaWN0YCBhcmd1bWVudCBlbmZvcmNlcyB0byBtYXRjaCBrZXlzIGhhdmluZyBib3RoIGB1ZGlkYCBhbmQgYHBvcnRgXG4gICAgLy8gaWYgdGhleSBhcmUgZGVmaW5lZFxuICAgIC8vIHdoaWxlIGluIG5vbi1zdHJpY3QgbW9kZSBrZXlzIGhhdmluZyBhbnkgb2YgdGhlc2UgYXJlIGdvaW5nIHRvIGJlIG1hdGNoZWRcbiAgICByZXR1cm4gXy5rZXlzKHRoaXMuX2Nvbm5lY3Rpb25zTWFwcGluZylcbiAgICAgIC5maWx0ZXIoKGtleSkgPT4gKHN0cmljdCAmJiB1ZGlkICYmIHBvcnQpXG4gICAgICAgID8gKGtleSA9PT0gdGhpcy5fdG9LZXkodWRpZCwgcG9ydCkpXG4gICAgICAgIDogKHVkaWQgJiYga2V5LnN0YXJ0c1dpdGgodGhpcy5fdWRpZEFzVG9rZW4odWRpZCkpIHx8IHBvcnQgJiYga2V5LmVuZHNXaXRoKHRoaXMuX3BvcnRBc1Rva2VuKHBvcnQpKSlcbiAgICAgICk7XG4gIH1cblxuICBhc3luYyByZXF1ZXN0Q29ubmVjdGlvbiAodWRpZCwgcG9ydCwgb3B0aW9ucyA9IHt9KSB7XG4gICAgaWYgKCF1ZGlkIHx8ICFwb3J0KSB7XG4gICAgICBsb2cud2FybignRGlkIG5vdCBrbm93IGhvdyB0byByZXF1ZXN0IHRoZSBjb25uZWN0aW9uOicpO1xuICAgICAgaWYgKCF1ZGlkKSB7XG4gICAgICAgIGxvZy53YXJuKCctIERldmljZSBVRElEIGlzIHVuc2V0Jyk7XG4gICAgICB9XG4gICAgICBpZiAoIXBvcnQpIHtcbiAgICAgICAgbG9nLndhcm4oJy0gVGhlIGxvY2FsIHBvcnQgbnVtYmVyIGlzIHVuc2V0Jyk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3Qge1xuICAgICAgdXNlUG9ydEZvcndhcmRpbmcsXG4gICAgICBkZXZpY2VQb3J0LFxuICAgIH0gPSBvcHRpb25zO1xuXG4gICAgbG9nLmluZm8oYFJlcXVlc3RpbmcgY29ubmVjdGlvbiBmb3IgZGV2aWNlICR7dWRpZH0gb24gbG9jYWwgcG9ydCAke3BvcnR9YCArXG4gICAgICAoZGV2aWNlUG9ydCA/IGAsIGRldmljZSBwb3J0ICR7ZGV2aWNlUG9ydH1gIDogJycpKTtcbiAgICBsb2cuZGVidWcoYENhY2hlZCBjb25uZWN0aW9ucyBjb3VudDogJHtfLnNpemUodGhpcy5fY29ubmVjdGlvbnNNYXBwaW5nKX1gKTtcbiAgICBjb25zdCBjb25uZWN0aW9uc09uUG9ydCA9IHRoaXMubGlzdENvbm5lY3Rpb25zKG51bGwsIHBvcnQpO1xuICAgIGlmICghXy5pc0VtcHR5KGNvbm5lY3Rpb25zT25Qb3J0KSkge1xuICAgICAgbG9nLmluZm8oYEZvdW5kIGNhY2hlZCBjb25uZWN0aW9ucyBvbiBwb3J0ICMke3BvcnR9OiAke0pTT04uc3RyaW5naWZ5KGNvbm5lY3Rpb25zT25Qb3J0KX1gKTtcbiAgICB9XG5cbiAgICBpZiAodXNlUG9ydEZvcndhcmRpbmcpIHtcbiAgICAgIGxldCBpc1BvcnRCdXN5ID0gKGF3YWl0IGNoZWNrUG9ydFN0YXR1cyhwb3J0LCBMT0NBTEhPU1QpKSA9PT0gJ29wZW4nO1xuICAgICAgaWYgKGlzUG9ydEJ1c3kpIHtcbiAgICAgICAgbG9nLndhcm4oYFBvcnQgIyR7cG9ydH0gaXMgYnVzeS4gRGlkIHlvdSBxdWl0IHRoZSBwcmV2aW91cyBkcml2ZXIgc2Vzc2lvbihzKSBwcm9wZXJseT9gKTtcbiAgICAgICAgaWYgKCFfLmlzRW1wdHkoY29ubmVjdGlvbnNPblBvcnQpKSB7XG4gICAgICAgICAgbG9nLmluZm8oJ1RyeWluZyB0byByZWxlYXNlIHRoZSBwb3J0Jyk7XG4gICAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgdGhpcy5fcmVsZWFzZVByb3hpZWRDb25uZWN0aW9ucyhjb25uZWN0aW9uc09uUG9ydCkpIHtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9jb25uZWN0aW9uc01hcHBpbmdba2V5XTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3QgdGltZXIgPSBuZXcgdGltaW5nLlRpbWVyKCkuc3RhcnQoKTtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgYXdhaXQgd2FpdEZvckNvbmRpdGlvbihhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKChhd2FpdCBjaGVja1BvcnRTdGF0dXMocG9ydCwgTE9DQUxIT1NUKSkgIT09ICdvcGVuJykge1xuICAgICAgICAgICAgICAgICAgbG9nLmluZm8oYFBvcnQgIyR7cG9ydH0gaGFzIGJlZW4gc3VjY2Vzc2Z1bGx5IHJlbGVhc2VkIGFmdGVyIGAgK1xuICAgICAgICAgICAgICAgICAgICBgJHt0aW1lci5nZXREdXJhdGlvbigpLmFzTWlsbGlTZWNvbmRzLnRvRml4ZWQoMCl9bXNgKTtcbiAgICAgICAgICAgICAgICAgIGlzUG9ydEJ1c3kgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBjYXRjaCAoaWduKSB7fVxuICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgIHdhaXRNczogUE9SVF9DTE9TRV9USU1FT1VULFxuICAgICAgICAgICAgICBpbnRlcnZhbE1zOiAzMDAsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGNhdGNoIChpZ24pIHtcbiAgICAgICAgICAgIGxvZy53YXJuKGBEaWQgbm90IGtub3cgaG93IHRvIHJlbGVhc2UgcG9ydCAjJHtwb3J0fSBpbiBgICtcbiAgICAgICAgICAgICAgYCR7dGltZXIuZ2V0RHVyYXRpb24oKS5hc01pbGxpU2Vjb25kcy50b0ZpeGVkKDApfW1zYCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChpc1BvcnRCdXN5KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgVGhlIHBvcnQgIyR7cG9ydH0gaXMgb2NjdXBpZWQgYnkgYW4gb3RoZXIgcHJvY2Vzcy4gYCArXG4gICAgICAgICAgYFlvdSBjYW4gZWl0aGVyIHF1aXQgdGhhdCBwcm9jZXNzIG9yIHNlbGVjdCBhbm90aGVyIGZyZWUgcG9ydC5gKTtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgY3VycmVudEtleSA9IHRoaXMuX3RvS2V5KHVkaWQsIHBvcnQpO1xuICAgIGlmICh1c2VQb3J0Rm9yd2FyZGluZykge1xuICAgICAgY29uc3QgaXByb3h5ID0gbmV3IGlQcm94eSh1ZGlkLCBwb3J0LCBkZXZpY2VQb3J0KTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IGlwcm94eS5zdGFydCgpO1xuICAgICAgICB0aGlzLl9jb25uZWN0aW9uc01hcHBpbmdbY3VycmVudEtleV0gPSB7aXByb3h5fTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpcHJveHkuc3RvcCgpO1xuICAgICAgICB9IGNhdGNoIChlMSkge1xuICAgICAgICAgIGxvZy5kZWJ1ZyhlMSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fY29ubmVjdGlvbnNNYXBwaW5nW2N1cnJlbnRLZXldID0ge307XG4gICAgfVxuICAgIGxvZy5pbmZvKGBTdWNjZXNzZnVsbHkgcmVxdWVzdGVkIHRoZSBjb25uZWN0aW9uIGZvciAke2N1cnJlbnRLZXl9YCk7XG4gIH1cblxuICByZWxlYXNlQ29ubmVjdGlvbiAodWRpZCA9IG51bGwsIHBvcnQgPSBudWxsKSB7XG4gICAgaWYgKCF1ZGlkICYmICFwb3J0KSB7XG4gICAgICBsb2cud2FybignTmVpdGhlciBkZXZpY2UgVURJRCBub3IgbG9jYWwgcG9ydCBpcyBzZXQuICcgK1xuICAgICAgICAnRGlkIG5vdCBrbm93IGhvdyB0byByZWxlYXNlIHRoZSBjb25uZWN0aW9uJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxvZy5pbmZvKGBSZWxlYXNpbmcgY29ubmVjdGlvbnMgZm9yICR7dWRpZCB8fCAnYW55J30gZGV2aWNlIG9uICR7cG9ydCB8fCAnYW55J30gcG9ydCBudW1iZXJgKTtcblxuICAgIGNvbnN0IGtleXMgPSB0aGlzLmxpc3RDb25uZWN0aW9ucyh1ZGlkLCBwb3J0LCB0cnVlKTtcbiAgICBpZiAoXy5pc0VtcHR5KGtleXMpKSB7XG4gICAgICBsb2cuaW5mbygnTm8gY2FjaGVkIGNvbm5lY3Rpb25zIGhhdmUgYmVlbiBmb3VuZCcpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsb2cuaW5mbyhgRm91bmQgY2FjaGVkIGNvbm5lY3Rpb25zIHRvIHJlbGVhc2U6ICR7SlNPTi5zdHJpbmdpZnkoa2V5cyl9YCk7XG4gICAgdGhpcy5fcmVsZWFzZVByb3hpZWRDb25uZWN0aW9ucyhrZXlzKTtcbiAgICBmb3IgKGNvbnN0IGtleSBvZiBrZXlzKSB7XG4gICAgICBkZWxldGUgdGhpcy5fY29ubmVjdGlvbnNNYXBwaW5nW2tleV07XG4gICAgfVxuICAgIGxvZy5kZWJ1ZyhgQ2FjaGVkIGNvbm5lY3Rpb25zIGNvdW50OiAke18uc2l6ZSh0aGlzLl9jb25uZWN0aW9uc01hcHBpbmcpfWApO1xuICB9XG59XG5cbmNvbnN0IERFVklDRV9DT05ORUNUSU9OU19GQUNUT1JZID0gbmV3IERldmljZUNvbm5lY3Rpb25zRmFjdG9yeSgpO1xuXG5leHBvcnQgeyBERVZJQ0VfQ09OTkVDVElPTlNfRkFDVE9SWSwgRGV2aWNlQ29ubmVjdGlvbnNGYWN0b3J5IH07XG5leHBvcnQgZGVmYXVsdCBERVZJQ0VfQ09OTkVDVElPTlNfRkFDVE9SWTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQSxJQUFBQSxPQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxJQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFD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