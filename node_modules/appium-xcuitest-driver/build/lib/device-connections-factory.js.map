{"version":3,"file":"device-connections-factory.js","names":["_lodash","_interopRequireDefault","require","_net","_bluebird","_support","_appiumIosDevice","_portscanner","_asyncbox","LOCALHOST","iProxy","constructor","udid","localport","deviceport","parseInt","localServer","log","logger","getLogger","substring","start","net","createServer","localSocket","remoteSocket","utilities","connectPort","e","debug","message","destroy","destroyCommChannel","unpipe","once","on","warn","pipe","listeningPromise","B","resolve","reject","listen","info","onBeforeProcessExit","_closeLocalServer","bind","process","close","stop","off","PORT_CLOSE_TIMEOUT","SPLITTER","DeviceConnectionsFactory","_connectionsMapping","_udidAsToken","util","hasValue","_portAsToken","port","_toKey","_releaseProxiedConnections","connectionKeys","keys","filter","k","_","has","key","iproxy","listConnections","strict","startsWith","endsWith","requestConnection","options","usePortForwarding","devicePort","size","connectionsOnPort","isEmpty","JSON","stringify","isPortBusy","checkPortStatus","timer","timing","Timer","waitForCondition","getDuration","asMilliSeconds","toFixed","ign","waitMs","intervalMs","Error","currentKey","e1","releaseConnection","exports","DEVICE_CONNECTIONS_FACTORY","_default","default"],"sources":["../../lib/device-connections-factory.js"],"sourcesContent":["import _ from 'lodash';\nimport net from 'net';\nimport B from 'bluebird';\nimport { logger, util, timing } from 'appium/support';\nimport { utilities } from 'appium-ios-device';\nimport { checkPortStatus } from 'portscanner';\nimport { waitForCondition } from 'asyncbox';\n\n\nconst LOCALHOST = '127.0.0.1';\n\nclass iProxy {\n  constructor (udid, localport, deviceport) {\n    this.localport = parseInt(localport, 10);\n    this.deviceport = parseInt(deviceport, 10);\n    this.udid = udid;\n    this.localServer = null;\n    this.log = logger.getLogger(`iProxy@${udid.substring(0, 8)}:${this.localport}`);\n  }\n\n  async start () {\n    if (this.localServer) {\n      return;\n    }\n\n    this.localServer = net.createServer(async (localSocket) => {\n      let remoteSocket;\n      try {\n        // We can only connect to the remote socket after the local socket connection succeeds\n        remoteSocket = await utilities.connectPort(this.udid, this.deviceport);\n      } catch (e) {\n        this.log.debug(e.message);\n        localSocket.destroy();\n        return;\n      }\n\n      const destroyCommChannel = () => {\n        remoteSocket.unpipe(localSocket);\n        localSocket.unpipe(remoteSocket);\n      };\n      remoteSocket.once('close', () => {\n        destroyCommChannel();\n        localSocket.destroy();\n      });\n      // not all remote socket errors are critical for the user\n      remoteSocket.on('error', (e) => this.log.debug(e));\n      localSocket.once('end', destroyCommChannel);\n      localSocket.once('close', () => {\n        destroyCommChannel();\n        remoteSocket.destroy();\n      });\n      localSocket.on('error', (e) => this.log.warn(e.message));\n      localSocket.pipe(remoteSocket);\n      remoteSocket.pipe(localSocket);\n    });\n    const listeningPromise = new B((resolve, reject) => {\n      this.localServer.once('listening', resolve);\n      this.localServer.once('error', reject);\n    });\n    this.localServer.listen(this.localport);\n    try {\n      await listeningPromise;\n    } catch (e) {\n      this.localServer = null;\n      throw e;\n    }\n    this.localServer.on('error', (e) => this.log.warn(e.message));\n    this.localServer.once('close', (e) => {\n      if (e) {\n        this.log.info(`The connection has been closed with error ${e.message}`);\n      } else {\n        this.log.info(`The connection has been closed`);\n      }\n      this.localServer = null;\n    });\n\n    this.onBeforeProcessExit = this._closeLocalServer.bind(this);\n    // Make sure we free up the socket on process exit\n    process.on('beforeExit', this.onBeforeProcessExit);\n  }\n\n  _closeLocalServer () {\n    if (!this.localServer) {\n      return;\n    }\n\n    this.log.debug(`Closing the connection`);\n    this.localServer.close();\n    this.localServer = null;\n  }\n\n  stop () {\n    if (this.onBeforeProcessExit) {\n      process.off('beforeExit', this.onBeforeProcessExit);\n      this.onBeforeProcessExit = null;\n    }\n\n    this._closeLocalServer();\n  }\n}\n\n\nconst log = logger.getLogger('DevCon Factory');\nconst PORT_CLOSE_TIMEOUT = 15 * 1000; // 15 seconds\nconst SPLITTER = ':';\n\nclass DeviceConnectionsFactory {\n  constructor () {\n    this._connectionsMapping = {};\n  }\n\n  _udidAsToken (udid) {\n    return `${util.hasValue(udid) ? udid : ''}${SPLITTER}`;\n  }\n\n  _portAsToken (port) {\n    return `${SPLITTER}${util.hasValue(port) ? port : ''}`;\n  }\n\n  _toKey (udid = null, port = null) {\n    return `${util.hasValue(udid) ? udid : ''}${SPLITTER}${util.hasValue(port) ? port : ''}`;\n  }\n\n  _releaseProxiedConnections (connectionKeys) {\n    const keys = connectionKeys\n      .filter((k) => _.has(this._connectionsMapping[k], 'iproxy'));\n    for (const key of keys) {\n      log.info(`Releasing the listener for '${key}'`);\n      try {\n        this._connectionsMapping[key].iproxy.stop();\n      } catch (e) {\n        log.debug(e);\n      }\n    }\n    return keys;\n  }\n\n  listConnections (udid = null, port = null, strict = false) {\n    if (!udid && !port) {\n      return [];\n    }\n\n    // `this._connectionMapping` keys have format `udid:port`\n    // the `strict` argument enforces to match keys having both `udid` and `port`\n    // if they are defined\n    // while in non-strict mode keys having any of these are going to be matched\n    return _.keys(this._connectionsMapping)\n      .filter((key) => (strict && udid && port)\n        ? (key === this._toKey(udid, port))\n        : (udid && key.startsWith(this._udidAsToken(udid)) || port && key.endsWith(this._portAsToken(port)))\n      );\n  }\n\n  async requestConnection (udid, port, options = {}) {\n    if (!udid || !port) {\n      log.warn('Did not know how to request the connection:');\n      if (!udid) {\n        log.warn('- Device UDID is unset');\n      }\n      if (!port) {\n        log.warn('- The local port number is unset');\n      }\n      return;\n    }\n\n    const {\n      usePortForwarding,\n      devicePort,\n    } = options;\n\n    log.info(`Requesting connection for device ${udid} on local port ${port}` +\n      (devicePort ? `, device port ${devicePort}` : ''));\n    log.debug(`Cached connections count: ${_.size(this._connectionsMapping)}`);\n    const connectionsOnPort = this.listConnections(null, port);\n    if (!_.isEmpty(connectionsOnPort)) {\n      log.info(`Found cached connections on port #${port}: ${JSON.stringify(connectionsOnPort)}`);\n    }\n\n    if (usePortForwarding) {\n      let isPortBusy = (await checkPortStatus(port, LOCALHOST)) === 'open';\n      if (isPortBusy) {\n        log.warn(`Port #${port} is busy. Did you quit the previous driver session(s) properly?`);\n        if (!_.isEmpty(connectionsOnPort)) {\n          log.info('Trying to release the port');\n          for (const key of this._releaseProxiedConnections(connectionsOnPort)) {\n            delete this._connectionsMapping[key];\n          }\n          const timer = new timing.Timer().start();\n          try {\n            await waitForCondition(async () => {\n              try {\n                if ((await checkPortStatus(port, LOCALHOST)) !== 'open') {\n                  log.info(`Port #${port} has been successfully released after ` +\n                    `${timer.getDuration().asMilliSeconds.toFixed(0)}ms`);\n                  isPortBusy = false;\n                  return true;\n                }\n              } catch (ign) {}\n              return false;\n            }, {\n              waitMs: PORT_CLOSE_TIMEOUT,\n              intervalMs: 300,\n            });\n          } catch (ign) {\n            log.warn(`Did not know how to release port #${port} in ` +\n              `${timer.getDuration().asMilliSeconds.toFixed(0)}ms`);\n          }\n        }\n      }\n\n      if (isPortBusy) {\n        throw new Error(`The port #${port} is occupied by an other process. ` +\n          `You can either quit that process or select another free port.`);\n      }\n    }\n    const currentKey = this._toKey(udid, port);\n    if (usePortForwarding) {\n      const iproxy = new iProxy(udid, port, devicePort);\n      try {\n        await iproxy.start();\n        this._connectionsMapping[currentKey] = {iproxy};\n      } catch (e) {\n        try {\n          iproxy.stop();\n        } catch (e1) {\n          log.debug(e1);\n        }\n        throw e;\n      }\n    } else {\n      this._connectionsMapping[currentKey] = {};\n    }\n    log.info(`Successfully requested the connection for ${currentKey}`);\n  }\n\n  releaseConnection (udid = null, port = null) {\n    if (!udid && !port) {\n      log.warn('Neither device UDID nor local port is set. ' +\n        'Did not know how to release the connection');\n      return;\n    }\n    log.info(`Releasing connections for ${udid || 'any'} device on ${port || 'any'} port number`);\n\n    const keys = this.listConnections(udid, port, true);\n    if (_.isEmpty(keys)) {\n      log.info('No cached connections have been found');\n      return;\n    }\n    log.info(`Found cached connections to release: ${JSON.stringify(keys)}`);\n    this._releaseProxiedConnections(keys);\n    for (const key of keys) {\n      delete this._connectionsMapping[key];\n    }\n    log.debug(`Cached connections count: ${_.size(this._connectionsMapping)}`);\n  }\n}\n\nconst DEVICE_CONNECTIONS_FACTORY = new DeviceConnectionsFactory();\n\nexport { DEVICE_CONNECTIONS_FACTORY, DeviceConnectionsFactory };\nexport default DEVICE_CONNECTIONS_FACTORY;\n"],"mappings":"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"}