{"version":3,"file":"ios-simulator-log.js","names":["_lodash","_interopRequireDefault","require","_iosLog","_support","_teen_process","log","logger","getLogger","START_TIMEOUT","IOSSimulatorLog","IOSLog","constructor","sim","showLogs","xcodeVersion","iosSimulatorLogsPredicate","predicate","proc","startCapture","_","isUndefined","udid","Error","isRunning","spawnArgs","push","debug","exec","join","ign","simctl","spawnSubProcess","finishStartingLogCapture","e","message","errorAndThrow","firstLine","logRow","on","stdout","stderr","endsWith","onOutput","sd","test","start","stopCapture","killLogSubProcess","stop","warn","isCapturing","prefix","logs","cloneDeep","split","logLine","broadcast","space","length","info","exports","_default","default"],"sources":["../../../lib/device-log/ios-simulator-log.js"],"sourcesContent":["import _ from 'lodash';\nimport { IOSLog } from './ios-log';\nimport { logger } from 'appium/support';\nimport { exec } from 'teen_process';\n\nconst log = logger.getLogger('IOSSimulatorLog');\n\nconst START_TIMEOUT = 10000;\n\nclass IOSSimulatorLog extends IOSLog {\n  constructor ({sim, showLogs, xcodeVersion, iosSimulatorLogsPredicate}) {\n    super();\n    this.sim = sim;\n    this.showLogs = !!showLogs;\n    this.xcodeVersion = xcodeVersion;\n    this.predicate = iosSimulatorLogsPredicate;\n    this.proc = null;\n  }\n\n  async startCapture () {\n    if (_.isUndefined(this.sim.udid)) {\n      throw new Error(`Log capture requires a sim udid`);\n    }\n\n    if (!await this.sim.isRunning()) {\n      throw new Error(`iOS Simulator with udid '${this.sim.udid}' is not running`);\n    }\n    const spawnArgs = [\n      'log',\n      'stream',\n      '--style', 'compact',\n    ];\n    if (this.predicate) {\n      spawnArgs.push('--predicate', this.predicate);\n    }\n    log.debug(`Starting log capture for iOS Simulator with udid '${this.sim.udid}' ` +\n      `using simctl`);\n    try {\n      // cleanup existing listeners if the previous session has not been terminated properly\n      await exec('pkill', ['-f', [this.sim.udid, ...spawnArgs].join(' ')]);\n    } catch (ign) {}\n    try {\n      this.proc = await this.sim.simctl.spawnSubProcess(spawnArgs);\n      await this.finishStartingLogCapture();\n    } catch (e) {\n      throw new Error(`Simulator log capture failed. Original error: ${e.message}`);\n    }\n  }\n\n  async finishStartingLogCapture () {\n    if (!this.proc) {\n      log.errorAndThrow('Could not capture simulator log');\n    }\n    let firstLine = true;\n    let logRow = '';\n    this.proc.on('output', (stdout, stderr) => {\n      if (stdout) {\n        if (firstLine) {\n          if (stdout.endsWith('\\n')) {\n            // don't store the first line of the log because it came before the sim was launched\n            firstLine = false;\n          }\n        } else {\n          logRow += stdout;\n          if (stdout.endsWith('\\n')) {\n            this.onOutput(logRow);\n            logRow = '';\n          }\n        }\n      }\n      if (stderr) {\n        this.onOutput(logRow, 'STDERR');\n      }\n    });\n\n    let sd = (stdout, stderr) => {\n      if (/execvp\\(\\)/.test(stderr)) {\n        throw new Error('iOS log capture process failed to start');\n      }\n      return stdout || stderr;\n    };\n    await this.proc.start(sd, START_TIMEOUT);\n  }\n\n  async stopCapture () {\n    if (!this.proc) {\n      return;\n    }\n    await this.killLogSubProcess();\n    this.proc = null;\n  }\n\n  async killLogSubProcess () {\n    if (!this.proc.isRunning) {\n      return;\n    }\n    log.debug('Stopping iOS log capture');\n    try {\n      await this.proc.stop('SIGTERM', 1000);\n    } catch (e) {\n      if (!this.proc.isRunning) {\n        return;\n      }\n      log.warn('Cannot stop log capture process. Sending SIGKILL');\n      await this.proc.stop('SIGKILL');\n    }\n  }\n\n  get isCapturing () {\n    return this.proc && this.proc.isRunning;\n  }\n\n  onOutput (logRow, prefix = '') {\n    const logs = _.cloneDeep(logRow.split('\\n'));\n    for (const logLine of logs) {\n      if (!logLine) continue; // eslint-disable-line curly\n      this.broadcast(logLine);\n      if (this.showLogs) {\n        const space = prefix.length > 0 ? ' ' : '';\n        log.info(`[IOS_SYSLOG_ROW${space}${prefix}] ${logLine}`);\n      }\n    }\n  }\n}\n\nexport { IOSSimulatorLog };\nexport default IOSSimulatorLog;\n"],"mappings":"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"}