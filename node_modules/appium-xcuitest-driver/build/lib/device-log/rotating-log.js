"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.RotatingLog = exports.MAX_LOG_ENTRIES_COUNT = void 0;
require("source-map-support/register");
var _lodash = _interopRequireDefault(require("lodash"));
var _support = require("appium/support");
const MAX_LOG_ENTRIES_COUNT = 10000;
exports.MAX_LOG_ENTRIES_COUNT = MAX_LOG_ENTRIES_COUNT;
class RotatingLog {
  constructor(showLogs = false, label = 'Log Label') {
    this.log = _support.logger.getLogger(label);
    this.showLogs = showLogs;
    this.logs = [];
    this.logIdxSinceLastRequest = 0;
    this.isCapturing = false;
  }
  async startCapture() {
    this.isCapturing = true;
  }
  async stopCapture() {
    this.isCapturing = false;
  }
  addLogLine() {}
  async getLogs() {
    if (this.logs.length && this.logIdxSinceLastRequest < this.logs.length) {
      let result = this.logs;
      if (this.logIdxSinceLastRequest > 0) {
        result = result.slice(this.logIdxSinceLastRequest);
      }
      this.logIdxSinceLastRequest = this.logs.length;
      return result;
    }
    return [];
  }
  async getAllLogs() {
    return _lodash.default.clone(this.logs);
  }
  get logs() {
    if (!this._logs) {
      this.logs = [];
    }
    return this._logs;
  }
  set logs(logs) {
    this._logs = logs;
  }
}
exports.RotatingLog = RotatingLog;
var _default = RotatingLog;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfbG9kYXNoIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfc3VwcG9ydCIsIk1BWF9MT0dfRU5UUklFU19DT1VOVCIsImV4cG9ydHMiLCJSb3RhdGluZ0xvZyIsImNvbnN0cnVjdG9yIiwic2hvd0xvZ3MiLCJsYWJlbCIsImxvZyIsImxvZ2dlciIsImdldExvZ2dlciIsImxvZ3MiLCJsb2dJZHhTaW5jZUxhc3RSZXF1ZXN0IiwiaXNDYXB0dXJpbmciLCJzdGFydENhcHR1cmUiLCJzdG9wQ2FwdHVyZSIsImFkZExvZ0xpbmUiLCJnZXRMb2dzIiwibGVuZ3RoIiwicmVzdWx0Iiwic2xpY2UiLCJnZXRBbGxMb2dzIiwiXyIsImNsb25lIiwiX2xvZ3MiLCJfZGVmYXVsdCIsImRlZmF1bHQiXSwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvZGV2aWNlLWxvZy9yb3RhdGluZy1sb2cuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IGxvZ2dlciB9IGZyb20gJ2FwcGl1bS9zdXBwb3J0JztcblxuXG5jb25zdCBNQVhfTE9HX0VOVFJJRVNfQ09VTlQgPSAxMDAwMDtcblxuY2xhc3MgUm90YXRpbmdMb2cge1xuICBjb25zdHJ1Y3RvciAoc2hvd0xvZ3MgPSBmYWxzZSwgbGFiZWwgPSAnTG9nIExhYmVsJykge1xuICAgIHRoaXMubG9nID0gbG9nZ2VyLmdldExvZ2dlcihsYWJlbCk7XG5cbiAgICB0aGlzLnNob3dMb2dzID0gc2hvd0xvZ3M7XG4gICAgdGhpcy5sb2dzID0gW107XG4gICAgdGhpcy5sb2dJZHhTaW5jZUxhc3RSZXF1ZXN0ID0gMDtcblxuICAgIHRoaXMuaXNDYXB0dXJpbmcgPSBmYWxzZTtcbiAgfVxuXG4gIGFzeW5jIHN0YXJ0Q2FwdHVyZSAoKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcmVxdWlyZS1hd2FpdFxuICAgIHRoaXMuaXNDYXB0dXJpbmcgPSB0cnVlO1xuICB9XG5cbiAgYXN5bmMgc3RvcENhcHR1cmUgKCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlcXVpcmUtYXdhaXRcbiAgICB0aGlzLmlzQ2FwdHVyaW5nID0gZmFsc2U7XG4gIH1cblxuICAvKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGFkZExvZ0xpbmUgKCkge1xuICB9XG5cbiAgYXN5bmMgZ2V0TG9ncyAoKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcmVxdWlyZS1hd2FpdFxuICAgIGlmICh0aGlzLmxvZ3MubGVuZ3RoICYmIHRoaXMubG9nSWR4U2luY2VMYXN0UmVxdWVzdCA8IHRoaXMubG9ncy5sZW5ndGgpIHtcbiAgICAgIGxldCByZXN1bHQgPSB0aGlzLmxvZ3M7XG4gICAgICBpZiAodGhpcy5sb2dJZHhTaW5jZUxhc3RSZXF1ZXN0ID4gMCkge1xuICAgICAgICByZXN1bHQgPSByZXN1bHQuc2xpY2UodGhpcy5sb2dJZHhTaW5jZUxhc3RSZXF1ZXN0KTtcbiAgICAgIH1cbiAgICAgIHRoaXMubG9nSWR4U2luY2VMYXN0UmVxdWVzdCA9IHRoaXMubG9ncy5sZW5ndGg7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICByZXR1cm4gW107XG4gIH1cblxuICBhc3luYyBnZXRBbGxMb2dzICgpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSByZXF1aXJlLWF3YWl0XG4gICAgcmV0dXJuIF8uY2xvbmUodGhpcy5sb2dzKTtcbiAgfVxuXG4gIGdldCBsb2dzICgpIHtcbiAgICBpZiAoIXRoaXMuX2xvZ3MpIHtcbiAgICAgIHRoaXMubG9ncyA9IFtdO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fbG9ncztcbiAgfVxuXG4gIHNldCBsb2dzIChsb2dzKSB7XG4gICAgdGhpcy5fbG9ncyA9IGxvZ3M7XG4gIH1cbn1cblxuZXhwb3J0IHsgUm90YXRpbmdMb2csIE1BWF9MT0dfRU5UUklFU19DT1VOVCB9O1xuZXhwb3J0IGRlZmF1bHQgUm90YXRpbmdMb2c7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEsSUFBQUEsT0FBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsUUFBQSxHQUFBRCxPQUFBO0FBR0EsTUFBTUUscUJBQXFCLEdBQUcsS0FBSztBQUFDQyxPQUFBLENBQUFELHFCQUFBLEdBQUFBLHFCQUFBO0FBRXBDLE1BQU1FLFdBQVcsQ0FBQztFQUNoQkMsV0FBV0EsQ0FBRUMsUUFBUSxHQUFHLEtBQUssRUFBRUMsS0FBSyxHQUFHLFdBQVcsRUFBRTtJQUNsRCxJQUFJLENBQUNDLEdBQUcsR0FBR0MsZUFBTSxDQUFDQyxTQUFTLENBQUNILEtBQUssQ0FBQztJQUVsQyxJQUFJLENBQUNELFFBQVEsR0FBR0EsUUFBUTtJQUN4QixJQUFJLENBQUNLLElBQUksR0FBRyxFQUFFO0lBQ2QsSUFBSSxDQUFDQyxzQkFBc0IsR0FBRyxDQUFDO0lBRS9CLElBQUksQ0FBQ0MsV0FBVyxHQUFHLEtBQUs7RUFDMUI7RUFFQSxNQUFNQyxZQUFZQSxDQUFBLEVBQUk7SUFDcEIsSUFBSSxDQUFDRCxXQUFXLEdBQUcsSUFBSTtFQUN6QjtFQUVBLE1BQU1FLFdBQVdBLENBQUEsRUFBSTtJQUNuQixJQUFJLENBQUNGLFdBQVcsR0FBRyxLQUFLO0VBQzFCO0VBS0FHLFVBQVVBLENBQUEsRUFBSSxDQUNkO0VBRUEsTUFBTUMsT0FBT0EsQ0FBQSxFQUFJO0lBQ2YsSUFBSSxJQUFJLENBQUNOLElBQUksQ0FBQ08sTUFBTSxJQUFJLElBQUksQ0FBQ04sc0JBQXNCLEdBQUcsSUFBSSxDQUFDRCxJQUFJLENBQUNPLE1BQU0sRUFBRTtNQUN0RSxJQUFJQyxNQUFNLEdBQUcsSUFBSSxDQUFDUixJQUFJO01BQ3RCLElBQUksSUFBSSxDQUFDQyxzQkFBc0IsR0FBRyxDQUFDLEVBQUU7UUFDbkNPLE1BQU0sR0FBR0EsTUFBTSxDQUFDQyxLQUFLLENBQUMsSUFBSSxDQUFDUixzQkFBc0IsQ0FBQztNQUNwRDtNQUNBLElBQUksQ0FBQ0Esc0JBQXNCLEdBQUcsSUFBSSxDQUFDRCxJQUFJLENBQUNPLE1BQU07TUFDOUMsT0FBT0MsTUFBTTtJQUNmO0lBQ0EsT0FBTyxFQUFFO0VBQ1g7RUFFQSxNQUFNRSxVQUFVQSxDQUFBLEVBQUk7SUFDbEIsT0FBT0MsZUFBQyxDQUFDQyxLQUFLLENBQUMsSUFBSSxDQUFDWixJQUFJLENBQUM7RUFDM0I7RUFFQSxJQUFJQSxJQUFJQSxDQUFBLEVBQUk7SUFDVixJQUFJLENBQUMsSUFBSSxDQUFDYSxLQUFLLEVBQUU7TUFDZixJQUFJLENBQUNiLElBQUksR0FBRyxFQUFFO0lBQ2hCO0lBQ0EsT0FBTyxJQUFJLENBQUNhLEtBQUs7RUFDbkI7RUFFQSxJQUFJYixJQUFJQSxDQUFFQSxJQUFJLEVBQUU7SUFDZCxJQUFJLENBQUNhLEtBQUssR0FBR2IsSUFBSTtFQUNuQjtBQUNGO0FBQUNSLE9BQUEsQ0FBQUMsV0FBQSxHQUFBQSxXQUFBO0FBQUEsSUFBQXFCLFFBQUEsR0FHY3JCLFdBQVc7QUFBQUQsT0FBQSxDQUFBdUIsT0FBQSxHQUFBRCxRQUFBIn0=