"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.SafariNetworkLog = void 0;
require("source-map-support/register");
var _lodash = _interopRequireDefault(require("lodash"));
var _url = _interopRequireDefault(require("url"));
var _support = require("appium/support");
var _rotatingLog = require("./rotating-log");
class SafariNetworkLog extends _rotatingLog.RotatingLog {
  constructor(showLogs) {
    super(showLogs, 'SafariNetwork');
  }
  getEntry(requestId) {
    let outputEntry;
    while (this.logs.length >= _rotatingLog.MAX_LOG_ENTRIES_COUNT) {
      const entry = this.logs.shift();
      if (entry && entry.requestId === requestId) {
        outputEntry = entry;
        this.logs.push(outputEntry);
        continue;
      }
      if (this.logIdxSinceLastRequest > 0) {
        this.logIdxSinceLastRequest--;
      }
    }
    if (!outputEntry) {
      for (let i = this.logs.length - 1; i >= 0; i--) {
        if (this.logs[i].requestId === requestId) {
          outputEntry = this.logs[i];
          this.logs.splice(i, 1);
          break;
        }
      }
      if (!outputEntry) {
        outputEntry = {
          requestId,
          logs: []
        };
      }
      this.logs.push(outputEntry);
    }
    return outputEntry;
  }
  addLogLine(method, out) {
    if (!this.isCapturing && !this.showLogs) {
      return;
    }
    if (['Network.dataReceived'].includes(method)) {
      return;
    }
    const outputEntry = this.getEntry(out.requestId);
    if (this.isCapturing) {
      outputEntry.logs = outputEntry.logs || [];
      outputEntry.logs.push(out);
    }
    if (!this.showLogs) {
      return;
    }
    if (method === 'Network.loadingFinished' || method === 'Network.loadingFailed') {
      this.printLogLine(outputEntry);
    }
  }
  getLogDetails(outputEntry) {
    const record = outputEntry.logs.reduce(function getRecord(record, entry) {
      record.requestId = entry.requestId;
      if (entry.response) {
        const url = _url.default.parse(entry.response.url);
        record.name = `${_lodash.default.last(url.pathname.split('/'))}${url.search ? `?${url.search}` : ''}` || url.host;
        record.status = entry.response.status;
        if (entry.response.timing) {
          record.time = entry.response.timing.receiveHeadersEnd || entry.response.timing.responseStart || 0;
        }
        record.source = entry.response.source;
      }
      if (entry.type) {
        record.type = entry.type;
      }
      if (entry.initiator) {
        record.initiator = entry.initiator;
      }
      if (entry.metrics) {
        record.size = entry.metrics.responseBodyBytesReceived || 0;
      }
      if (entry.errorText) {
        record.errorText = entry.errorText;
        record.cancelled = entry.canceled;
      }
      return record;
    }, {});
    return record;
  }
  printLogLine(outputEntry) {
    const {
      requestId,
      name,
      status,
      type,
      initiator = {},
      size = 0,
      time = 0,
      source,
      errorText,
      cancelled = false
    } = this.getLogDetails(outputEntry);
    this.log.debug(`Network event:`);
    this.log.debug(`  Id: ${requestId}`);
    this.log.debug(`  Name: ${name}`);
    this.log.debug(`  Status: ${status}`);
    this.log.debug(`  Type: ${type}`);
    this.log.debug(`  Initiator: ${initiator.type}`);
    for (const line of initiator.stackTrace || []) {
      const functionName = line.functionName || '(anonymous)';
      const url = !line.url || line.url === '[native code]' ? '' : `@${_lodash.default.last((_url.default.parse(line.url).pathname || '').split('/'))}:${line.lineNumber}`;
      this.log.debug(`    ${_lodash.default.padEnd(_lodash.default.truncate(functionName, {
        length: 20
      }), 21)} ${url}`);
    }
    const sizeStr = source.includes('cache') ? ` (from ${source.replace('-', ' ')})` : `${size}B`;
    this.log.debug(`  Size: ${sizeStr}`);
    this.log.debug(`  Time: ${Math.round(time)}ms`);
    if (errorText) {
      this.log.debug(`  Error: ${errorText}`);
    }
    if (_support.util.hasValue(cancelled)) {
      this.log.debug(`  Cancelled: ${cancelled}`);
    }
  }
  async getLogs() {
    const logs = await super.getLogs();
    return logs.map(function adjustEntry(entry) {
      return Object.assign({}, entry, {
        level: 'INFO',
        timestamp: Date.now(),
        message: JSON.stringify(entry)
      });
    });
  }
}
exports.SafariNetworkLog = SafariNetworkLog;
var _default = SafariNetworkLog;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,