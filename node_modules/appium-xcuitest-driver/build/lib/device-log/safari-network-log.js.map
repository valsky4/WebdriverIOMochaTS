{"version":3,"file":"safari-network-log.js","names":["_lodash","_interopRequireDefault","require","_url","_support","_rotatingLog","SafariNetworkLog","RotatingLog","constructor","showLogs","getEntry","requestId","outputEntry","logs","length","MAX_LOG_ENTRIES_COUNT","entry","shift","push","logIdxSinceLastRequest","i","splice","addLogLine","method","out","isCapturing","includes","printLogLine","getLogDetails","record","reduce","getRecord","response","url","URL","parse","name","_","last","pathname","split","search","host","status","timing","time","receiveHeadersEnd","responseStart","source","type","initiator","metrics","size","responseBodyBytesReceived","errorText","cancelled","canceled","log","debug","line","stackTrace","functionName","lineNumber","padEnd","truncate","sizeStr","replace","Math","round","util","hasValue","getLogs","map","adjustEntry","Object","assign","level","timestamp","Date","now","message","JSON","stringify","exports","_default","default"],"sources":["../../../lib/device-log/safari-network-log.js"],"sourcesContent":["import _ from 'lodash';\nimport URL from 'url';\nimport { util } from 'appium/support';\nimport { RotatingLog, MAX_LOG_ENTRIES_COUNT } from './rotating-log';\n\n\nclass SafariNetworkLog extends RotatingLog {\n  constructor (showLogs) {\n    super(showLogs, 'SafariNetwork');\n  }\n\n  getEntry (requestId) {\n    let outputEntry;\n    while (this.logs.length >= MAX_LOG_ENTRIES_COUNT) {\n      // pull the first entry, which is the oldest\n      const entry = this.logs.shift();\n      if (entry && entry.requestId === requestId) {\n        // we are adding to an existing entry, and it was almost removed\n        // add to the end of the list and try again\n        outputEntry = entry;\n        this.logs.push(outputEntry);\n        continue;\n      }\n      // we've removed an element, so the count is down one\n      if (this.logIdxSinceLastRequest > 0) {\n        this.logIdxSinceLastRequest--;\n      }\n    }\n\n\n    if (!outputEntry) {\n      // we do not yes have an entry to associate this bit of output with\n      // most likely the entry will be at the end of the list, so start there\n      for (let i = this.logs.length - 1; i >= 0; i--) {\n        if (this.logs[i].requestId === requestId) {\n          // found it!\n          outputEntry = this.logs[i];\n          // this is now the most current entry, so remove it from the list\n          // to be added to the end below\n          this.logs.splice(i, 1);\n          break;\n        }\n      }\n\n      // nothing has been found, so create a new entry\n      if (!outputEntry) {\n        outputEntry = {\n          requestId,\n          logs: [],\n        };\n      }\n\n      // finally, add the entry to the end of the list\n      this.logs.push(outputEntry);\n    }\n\n    return outputEntry;\n  }\n\n  addLogLine (method, out) {\n    if (!this.isCapturing && !this.showLogs) {\n      // neither capturing nor displaying, so do nothing\n      return;\n    }\n\n    if (['Network.dataReceived'].includes(method)) {\n      // status update, no need to handle\n      return;\n    }\n\n    // events we care about:\n    //   Network.requestWillBeSent\n    //   Network.responseReceived\n    //   Network.loadingFinished\n    //   Network.loadingFailed\n\n    const outputEntry = this.getEntry(out.requestId);\n    if (this.isCapturing) {\n      // now add the output we just received to the logs for this particular entry\n      outputEntry.logs = outputEntry.logs || [];\n\n      outputEntry.logs.push(out);\n    }\n\n    // if we are not displaying the logs,\n    // or we are not finished getting events for this network call,\n    // we are done\n    if (!this.showLogs) {\n      return;\n    }\n\n    if (method === 'Network.loadingFinished' || method === 'Network.loadingFailed') {\n      this.printLogLine(outputEntry);\n    }\n  }\n\n  getLogDetails (outputEntry) {\n    // extract the data\n    const record = outputEntry.logs.reduce(function getRecord (record, entry) {\n      record.requestId = entry.requestId;\n      if (entry.response) {\n        const url = URL.parse(entry.response.url);\n        // get the last part of the url, along with the query string, if possible\n        record.name = `${_.last(url.pathname.split('/'))}${url.search ? `?${url.search}` : ''}` || url.host;\n        record.status = entry.response.status;\n        if (entry.response.timing) {\n          record.time = entry.response.timing.receiveHeadersEnd\n            || entry.response.timing.responseStart\n            || 0;\n        }\n        record.source = entry.response.source;\n      }\n      if (entry.type) {\n        record.type = entry.type;\n      }\n      if (entry.initiator) {\n        record.initiator = entry.initiator;\n      }\n      if (entry.metrics) {\n        // Safari has a `metrics` object on it's `Network.loadingFinished` event\n        record.size = entry.metrics.responseBodyBytesReceived || 0;\n      }\n      if (entry.errorText) {\n        record.errorText = entry.errorText;\n        // When a network call is cancelled, Safari returns `cancelled` as error text\n        // but has a boolean `canceled`. Normalize the two spellings in favor of\n        // the text, which will also be displayed\n        record.cancelled = entry.canceled;\n      }\n      return record;\n    }, {});\n\n    return record;\n  }\n\n  printLogLine (outputEntry) {\n    const {\n      requestId,\n      name,\n      status,\n      type,\n      initiator = {},\n      size = 0,\n      time = 0,\n      source,\n      errorText,\n      cancelled = false,\n    } = this.getLogDetails(outputEntry);\n\n    // print out the record, formatted appropriately\n    this.log.debug(`Network event:`);\n    this.log.debug(`  Id: ${requestId}`);\n    this.log.debug(`  Name: ${name}`);\n    this.log.debug(`  Status: ${status}`);\n    this.log.debug(`  Type: ${type}`);\n    this.log.debug(`  Initiator: ${initiator.type}`);\n    for (const line of (initiator.stackTrace || [])) {\n      const functionName = line.functionName || '(anonymous)';\n\n      const url = (!line.url || line.url === '[native code]')\n        ? ''\n        : `@${_.last((URL.parse(line.url).pathname || '').split('/'))}:${line.lineNumber}`;\n      this.log.debug(`    ${_.padEnd(_.truncate(functionName, {length: 20}), 21)} ${url}`);\n    }\n    // get `memory-cache` or `disk-cache`, etc., right\n    const sizeStr = source.includes('cache') ? ` (from ${source.replace('-', ' ')})` : `${size}B`;\n    this.log.debug(`  Size: ${sizeStr}`);\n    this.log.debug(`  Time: ${Math.round(time)}ms`);\n    if (errorText) {\n      this.log.debug(`  Error: ${errorText}`);\n    }\n    if (util.hasValue(cancelled)) {\n      this.log.debug(`  Cancelled: ${cancelled}`);\n    }\n  }\n\n  async getLogs () {\n    const logs = await super.getLogs();\n    // in order to satisfy certain clients, we need to have a basic structure\n    // to the results, with `level`, `timestamp`, and `message`, which is\n    // all the information stringified\n    return logs.map(function adjustEntry (entry) {\n      return Object.assign({}, entry, {\n        level: 'INFO',\n        timestamp: Date.now(),\n        message: JSON.stringify(entry),\n      });\n    });\n  }\n}\n\nexport { SafariNetworkLog };\nexport default SafariNetworkLog;\n"],"mappings":"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"}