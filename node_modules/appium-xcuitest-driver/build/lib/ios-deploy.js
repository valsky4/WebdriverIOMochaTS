"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("source-map-support/register");
var _support = require("appium/support");
var _path = _interopRequireDefault(require("path"));
var _appiumIosDevice = require("appium-ios-device");
var _bluebird = _interopRequireDefault(require("bluebird"));
var _logger = _interopRequireDefault(require("./logger"));
var _lodash = _interopRequireDefault(require("lodash"));
var _teen_process = require("teen_process");
var _appUtils = require("./app-utils");
var _iosFsHelpers = require("./ios-fs-helpers");
const APPLICATION_INSTALLED_NOTIFICATION = 'com.apple.mobile.application_installed';
const INSTALLATION_STAGING_DIR = 'PublicStaging';
const APPLICATION_NOTIFICATION_TIMEOUT_MS = 30 * 1000;
const IOS_DEPLOY_TIMEOUT_MS = 4 * 60 * 1000;
const IOS_DEPLOY = 'ios-deploy';
const APP_INSTALL_STRATEGY = Object.freeze({
  SERIAL: 'serial',
  PARALLEL: 'parallel',
  IOS_DEPLOY
});
class IOSDeploy {
  constructor(udid) {
    this.udid = udid;
  }
  async remove(bundleId) {
    const service = await _appiumIosDevice.services.startInstallationProxyService(this.udid);
    try {
      await service.uninstallApplication(bundleId);
    } finally {
      service.close();
    }
  }
  async removeApp(bundleId) {
    await this.remove(bundleId);
  }
  async install(app, timeout, strategy = null) {
    if (strategy && !_lodash.default.values(APP_INSTALL_STRATEGY).includes(_lodash.default.toLower(strategy))) {
      throw new Error(`App installation strategy '${strategy}' is unknown. ` + `Only the following strategies are supported: ${_lodash.default.values(APP_INSTALL_STRATEGY)}`);
    }
    _logger.default.debug(`Using '${strategy ?? APP_INSTALL_STRATEGY.SERIAL}' app deployment strategy. ` + `You could change it by providing another value to the 'appInstallStrategy' capability`);
    const installWithIosDeploy = async () => {
      try {
        await _support.fs.which(IOS_DEPLOY);
      } catch (err) {
        throw new Error(`'${IOS_DEPLOY}' utility has not been found in PATH. Is it installed?`);
      }
      try {
        await (0, _teen_process.exec)(IOS_DEPLOY, ['--id', this.udid, '--bundle', app], {
          timeout: timeout ?? IOS_DEPLOY_TIMEOUT_MS
        });
      } catch (err) {
        throw new Error(err.stderr || err.stdout || err.message);
      }
    };
    const timer = new _support.timing.Timer().start();
    if (_lodash.default.toLower(strategy) === APP_INSTALL_STRATEGY.IOS_DEPLOY) {
      await installWithIosDeploy();
    } else {
      const afcService = await _appiumIosDevice.services.startAfcService(this.udid);
      try {
        const bundleId = await (0, _appUtils.extractBundleId)(app);
        const bundlePathOnPhone = _path.default.join(INSTALLATION_STAGING_DIR, bundleId);
        await (0, _iosFsHelpers.pushFolder)(afcService, app, bundlePathOnPhone, {
          timeoutMs: timeout,
          enableParallelPush: _lodash.default.toLower(strategy) === APP_INSTALL_STRATEGY.PARALLEL
        });
        await this.installOrUpgradeApplication(bundlePathOnPhone, await this.isAppInstalled(bundleId));
      } catch (err) {
        _logger.default.warn(`Error installing app '${app}': ${err.message}`);
        if (err instanceof _bluebird.default.TimeoutError) {
          _logger.default.warn(`Consider increasing the value of 'appPushTimeout' capability`);
        }
        _logger.default.warn(`Falling back to '${IOS_DEPLOY}' usage`);
        try {
          await installWithIosDeploy();
        } catch (err1) {
          throw new Error(`Could not install '${app}':\n` + `  - ${err.message}\n` + `  - ${err1.message}`);
        }
      } finally {
        afcService.close();
      }
    }
    _logger.default.info(`App installation succeeded after ${timer.getDuration().asMilliSeconds.toFixed(0)}ms`);
  }
  async installOrUpgradeApplication(bundlePathOnPhone, isUpgrade = false) {
    const notificationService = await _appiumIosDevice.services.startNotificationProxyService(this.udid);
    const installationService = await _appiumIosDevice.services.startInstallationProxyService(this.udid);
    const appInstalledNotification = new _bluebird.default(resolve => {
      notificationService.observeNotification(APPLICATION_INSTALLED_NOTIFICATION, {
        notification: resolve
      });
    });
    const clientOptions = {
      PackageType: 'Developer'
    };
    try {
      if (isUpgrade) {
        _logger.default.debug(`An upgrade of the existing application is going to be performed`);
        await installationService.upgradeApplication(bundlePathOnPhone, clientOptions);
      } else {
        _logger.default.debug(`A new application installation is going to be performed`);
        await installationService.installApplication(bundlePathOnPhone, clientOptions);
      }
      try {
        await appInstalledNotification.timeout(APPLICATION_NOTIFICATION_TIMEOUT_MS, `Could not get the application installed notification within ` + `${APPLICATION_NOTIFICATION_TIMEOUT_MS}ms but we will continue`);
      } catch (e) {
        _logger.default.warn(`Failed to receive the notification. Error: ${e.message}`);
      }
    } finally {
      installationService.close();
      notificationService.close();
    }
  }
  async installApp(...args) {
    return await this.install(...args);
  }
  async isAppInstalled(bundleId) {
    return Boolean(await this.fetchAppInfo(bundleId));
  }
  async fetchAppInfo(bundleId) {
    const service = await _appiumIosDevice.services.startInstallationProxyService(this.udid);
    try {
      return (await service.lookupApplications({
        bundleIds: bundleId
      }))[bundleId];
    } finally {
      service.close();
    }
  }
  async terminateApp(bundleId) {
    let instrumentService;
    let installProxyService;
    try {
      installProxyService = await _appiumIosDevice.services.startInstallationProxyService(this.udid);
      const apps = await installProxyService.listApplications();
      if (!apps[bundleId]) {
        _logger.default.info(`The bundle id '${bundleId}' did not exist`);
        return false;
      }
      const executableName = apps[bundleId].CFBundleExecutable;
      _logger.default.debug(`The executable name for the bundle id '${bundleId}' was '${executableName}'`);
      instrumentService = await _appiumIosDevice.services.startInstrumentService(this.udid);
      const processes = await instrumentService.callChannel(_appiumIosDevice.INSTRUMENT_CHANNEL.DEVICE_INFO, 'runningProcesses');
      const process = processes.selector.find(process => process.name === executableName);
      if (!process) {
        _logger.default.info(`The process of the bundle id '${bundleId}' was not running`);
        return false;
      }
      await instrumentService.callChannel(_appiumIosDevice.INSTRUMENT_CHANNEL.PROCESS_CONTROL, 'killPid:', `${process.pid}`);
      return true;
    } catch (err) {
      _logger.default.warn(`Failed to kill '${bundleId}'. Original error: ${err.stderr || err.message}`);
      return false;
    } finally {
      if (installProxyService) {
        installProxyService.close();
      }
      if (instrumentService) {
        instrumentService.close();
      }
    }
  }
  async getUserInstalledBundleIdsByBundleName(bundleName) {
    const service = await _appiumIosDevice.services.startInstallationProxyService(this.udid);
    try {
      const applications = await service.listApplications({
        applicationType: 'User'
      });
      return _lodash.default.reduce(applications, (acc, {
        CFBundleName
      }, key) => {
        if (CFBundleName === bundleName) {
          acc.push(key);
        }
        return acc;
      }, []);
    } finally {
      service.close();
    }
  }
  async getPlatformVersion() {
    return await _appiumIosDevice.utilities.getOSVersion(this.udid);
  }
}
var _default = IOSDeploy;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,