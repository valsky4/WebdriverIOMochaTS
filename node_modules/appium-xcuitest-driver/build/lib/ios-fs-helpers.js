"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.pullFile = pullFile;
exports.pullFolder = pullFolder;
exports.pushFile = pushFile;
exports.pushFolder = pushFolder;
require("source-map-support/register");
var _lodash = _interopRequireDefault(require("lodash"));
var _bluebird = _interopRequireDefault(require("bluebird"));
var _support = require("appium/support");
var _path = _interopRequireDefault(require("path"));
var _logger = _interopRequireDefault(require("./logger"));
const IO_TIMEOUT_MS = 4 * 60 * 1000;
const MAX_IO_CHUNK_SIZE = 8;
async function pullFile(afcService, remotePath) {
  const stream = await afcService.createReadStream(remotePath, {
    autoDestroy: true
  });
  const pullPromise = new _bluebird.default((resolve, reject) => {
    stream.on('close', resolve);
    stream.on('error', reject);
  }).timeout(IO_TIMEOUT_MS);
  const buffers = [];
  stream.on('data', data => buffers.push(data));
  await pullPromise;
  return Buffer.concat(buffers);
}
async function folderExists(folderPath) {
  try {
    return (await _support.fs.stat(folderPath)).isDirectory();
  } catch (e) {
    return false;
  }
}
async function pullFolder(afcService, remoteRootPath) {
  const tmpFolder = await _support.tempDir.openDir();
  try {
    let localTopItem = null;
    let countFilesSuccess = 0;
    let countFilesFail = 0;
    let countFolders = 0;
    const pullPromises = [];
    await afcService.walkDir(remoteRootPath, true, async (remotePath, isDir) => {
      const localPath = _path.default.join(tmpFolder, remotePath);
      const dirname = isDir ? localPath : _path.default.dirname(localPath);
      if (!(await folderExists(dirname))) {
        await (0, _support.mkdirp)(dirname);
      }
      if (!localTopItem || localPath.split(_path.default.sep).length < localTopItem.split(_path.default.sep).length) {
        localTopItem = localPath;
      }
      if (isDir) {
        ++countFolders;
        return;
      }
      const readStream = await afcService.createReadStream(remotePath, {
        autoDestroy: true
      });
      const writeStream = _support.fs.createWriteStream(localPath, {
        autoClose: true
      });
      pullPromises.push(new _bluebird.default(resolve => {
        writeStream.on('close', () => {
          ++countFilesSuccess;
          resolve();
        });
        const onStreamingError = e => {
          readStream.unpipe(writeStream);
          _logger.default.warn(`Cannot pull '${remotePath}' to '${localPath}'. ` + `The file will be skipped. Original error: ${e.message}`);
          ++countFilesFail;
          resolve();
        };
        writeStream.on('error', onStreamingError);
        readStream.on('error', onStreamingError);
      }).timeout(IO_TIMEOUT_MS));
      readStream.pipe(writeStream);
      if (pullPromises.length >= MAX_IO_CHUNK_SIZE) {
        await _bluebird.default.any(pullPromises);
      }
      _lodash.default.remove(pullPromises, p => p.isFulfilled());
    });
    if (!_lodash.default.isEmpty(pullPromises)) {
      await _bluebird.default.all(pullPromises);
    }
    _logger.default.info(`Pulled ${_support.util.pluralize('file', countFilesSuccess, true)} out of ` + `${countFilesSuccess + countFilesFail} and ${_support.util.pluralize('folder', countFolders, true)} ` + `from '${remoteRootPath}'`);
    return await _support.zip.toInMemoryZip(localTopItem ? _path.default.dirname(localTopItem) : tmpFolder, {
      encodeToBase64: true
    });
  } finally {
    await _support.fs.rimraf(tmpFolder);
  }
}
async function remoteMkdirp(afcService, remoteRoot) {
  if (remoteRoot === '.' || remoteRoot === '/') {
    return;
  }
  try {
    await afcService.listDirectory(remoteRoot);
    return;
  } catch (e) {
    await remoteMkdirp(afcService, _path.default.dirname(remoteRoot));
  }
  await afcService.createDirectory(remoteRoot);
}
async function pushFile(afcService, remotePath, base64Data) {
  await remoteMkdirp(afcService, _path.default.dirname(remotePath));
  const stream = await afcService.createWriteStream(remotePath, {
    autoDestroy: true
  });
  let pushError = null;
  const pushPromise = new _bluebird.default((resolve, reject) => {
    stream.on('error', e => {
      pushError = e;
    });
    stream.on('close', () => {
      if (pushError) {
        reject(pushError);
      } else {
        resolve();
      }
    });
  }).timeout(IO_TIMEOUT_MS);
  stream.write(Buffer.from(base64Data, 'base64'));
  stream.end();
  await pushPromise;
}
async function pushFolder(afcService, srcRootPath, dstRootPath, opts = {}) {
  const {
    timeoutMs = IO_TIMEOUT_MS,
    enableParallelPush = false
  } = opts;
  const timer = new _support.timing.Timer().start();
  const itemsToPush = await _support.fs.glob('**', {
    cwd: srcRootPath,
    nosort: true,
    mark: true
  });
  _logger.default.debug(`Successfully scanned the tree structure of '${srcRootPath}'`);
  const [foldersToPush, filesToPush] = itemsToPush.reduce((acc, x) => {
    acc[_lodash.default.endsWith(x, _path.default.sep) ? 0 : 1].push(x);
    return acc;
  }, [[], []]);
  _logger.default.debug(`Got ${_support.util.pluralize('folder', foldersToPush.length, true)} and ` + `${_support.util.pluralize('file', filesToPush.length, true)} to push`);
  try {
    await afcService.deleteDirectory(dstRootPath);
  } catch (ign) {}
  await afcService.createDirectory(dstRootPath);
  const foldersToPushByHierarchy = foldersToPush.sort((a, b) => a.split(_path.default.sep).length - b.split(_path.default.sep).length);
  for (const relativeFolderPath of foldersToPushByHierarchy) {
    const absoluteFolderPath = _lodash.default.trimEnd(_path.default.join(dstRootPath, relativeFolderPath), _path.default.sep);
    if (absoluteFolderPath) {
      await afcService.createDirectory(absoluteFolderPath);
    }
  }
  _logger.default.debug(`Successfully created the remote folder structure ` + `(${_support.util.pluralize('item', foldersToPush.length + 1, true)})`);
  const pushFile = async relativePath => {
    const absoluteSourcePath = _path.default.join(srcRootPath, relativePath);
    const readStream = _support.fs.createReadStream(absoluteSourcePath, {
      autoClose: true
    });
    const absoluteDestinationPath = _path.default.join(dstRootPath, relativePath);
    const writeStream = await afcService.createWriteStream(absoluteDestinationPath, {
      autoDestroy: true
    });
    writeStream.on('finish', writeStream.destroy);
    let pushError = null;
    const filePushPromise = new _bluebird.default((resolve, reject) => {
      writeStream.on('close', () => {
        if (pushError) {
          reject(pushError);
        } else {
          resolve();
        }
      });
      const onStreamError = e => {
        readStream.unpipe(writeStream);
        _logger.default.debug(e);
        pushError = e;
      };
      writeStream.on('error', onStreamError);
      readStream.on('error', onStreamError);
    });
    readStream.pipe(writeStream);
    await filePushPromise.timeout(timeoutMs);
  };
  if (enableParallelPush) {
    _logger.default.debug(`Proceeding to parallel files push (max ${MAX_IO_CHUNK_SIZE} writers)`);
    const pushPromises = [];
    for (const relativeFilePath of _lodash.default.shuffle(filesToPush)) {
      pushPromises.push(_bluebird.default.resolve(pushFile(relativeFilePath)));
      if (pushPromises.length >= MAX_IO_CHUNK_SIZE) {
        await _bluebird.default.any(pushPromises);
      }
      _lodash.default.remove(pushPromises, p => p.isFulfilled());
    }
    if (!_lodash.default.isEmpty(pushPromises)) {
      await _bluebird.default.all(pushPromises);
    }
  } else {
    _logger.default.debug(`Proceeding to serial files push`);
    for (const relativeFilePath of filesToPush) {
      await pushFile(relativeFilePath);
    }
  }
  _logger.default.debug(`Successfully pushed ${_support.util.pluralize('folder', foldersToPush.length, true)} ` + `and ${_support.util.pluralize('file', filesToPush.length, true)} ` + `within ${timer.getDuration().asMilliSeconds.toFixed(0)}ms`);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,