"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Pyidevice = void 0;
require("source-map-support/register");
var _teen_process = require("teen_process");
var _support = require("appium/support");
var _logger = _interopRequireDefault(require("./logger"));
var _path = _interopRequireDefault(require("path"));
const BINARY_NAME = 'pyidevice';
class Pyidevice {
  constructor(udid) {
    this.udid = udid;
    this.binaryPath = null;
  }
  async assertExists(isStrict = true) {
    if (this.binaryPath) {
      return true;
    }
    try {
      this.binaryPath = await _support.fs.which(BINARY_NAME);
      return true;
    } catch (e) {
      if (isStrict) {
        throw new Error(`${BINARY_NAME} binary cannot be found in PATH. ` + `Please make sure it is installed. Visit https://github.com/YueChen-C/py-ios-device for ` + `more details.`);
      }
      return false;
    }
  }
  async execute(args, opts = {}) {
    await this.assertExists();
    const {
      cwd,
      format = 'json',
      logStdout = false,
      asynchronous = false
    } = opts;
    const finalArgs = [...args, '--udid', this.udid];
    if (format) {
      finalArgs.push('--format', format);
    }
    const cmdStr = _support.util.quote([this.binaryPath, ...finalArgs]);
    _logger.default.debug(`Executing ${cmdStr}`);
    try {
      if (asynchronous) {
        const result = new _teen_process.SubProcess(this.binaryPath, finalArgs, {
          cwd
        });
        await result.start(0);
        return result;
      }
      const result = await (0, _teen_process.exec)(this.binaryPath, finalArgs, {
        cwd
      });
      if (logStdout) {
        _logger.default.debug(`Command output: ${result.stdout}`);
      }
      return result;
    } catch (e) {
      throw new Error(`'${cmdStr}' failed. Original error: ${e.stderr || e.stdout || e.message}`);
    }
  }
  async listProfiles() {
    const {
      stdout
    } = await this.execute(['profiles', 'list']);
    return JSON.parse(stdout);
  }
  async installProfile({
    profilePath,
    payload
  } = {}) {
    if (!profilePath && !payload) {
      throw new Error('Either the full path to the profile or its payload must be provided');
    }
    let tmpRoot;
    let srcPath = profilePath;
    try {
      if (!srcPath) {
        tmpRoot = await _support.tempDir.openDir();
        srcPath = _path.default.join(tmpRoot, 'cert.pem');
        await _support.fs.writeFile(srcPath, payload, 'utf8');
      }
      await this.execute(['profiles', 'install', '--path', srcPath], {
        logStdout: true
      });
    } finally {
      if (tmpRoot) {
        await _support.fs.rimraf(tmpRoot);
      }
    }
  }
  async removeProfile(name) {
    await this.execute(['profiles', 'remove', name], {
      logStdout: true
    });
  }
  async listCrashes() {
    const {
      stdout
    } = await this.execute(['crash', 'list']);
    return JSON.parse(stdout.replace(/'/g, '"')).filter(x => !['.', '..'].includes(x));
  }
  async exportCrash(name, dstFolder) {
    await this.execute(['crash', 'export', '--name', name], {
      logStdout: true,
      cwd: dstFolder
    });
  }
  async collectPcap(dstFile) {
    return await this.execute(['pcapd', dstFile], {
      format: null,
      asynchronous: true
    });
  }
}
exports.Pyidevice = Pyidevice;
var _default = Pyidevice;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfdGVlbl9wcm9jZXNzIiwicmVxdWlyZSIsIl9zdXBwb3J0IiwiX2xvZ2dlciIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfcGF0aCIsIkJJTkFSWV9OQU1FIiwiUHlpZGV2aWNlIiwiY29uc3RydWN0b3IiLCJ1ZGlkIiwiYmluYXJ5UGF0aCIsImFzc2VydEV4aXN0cyIsImlzU3RyaWN0IiwiZnMiLCJ3aGljaCIsImUiLCJFcnJvciIsImV4ZWN1dGUiLCJhcmdzIiwib3B0cyIsImN3ZCIsImZvcm1hdCIsImxvZ1N0ZG91dCIsImFzeW5jaHJvbm91cyIsImZpbmFsQXJncyIsInB1c2giLCJjbWRTdHIiLCJ1dGlsIiwicXVvdGUiLCJsb2ciLCJkZWJ1ZyIsInJlc3VsdCIsIlN1YlByb2Nlc3MiLCJzdGFydCIsImV4ZWMiLCJzdGRvdXQiLCJzdGRlcnIiLCJtZXNzYWdlIiwibGlzdFByb2ZpbGVzIiwiSlNPTiIsInBhcnNlIiwiaW5zdGFsbFByb2ZpbGUiLCJwcm9maWxlUGF0aCIsInBheWxvYWQiLCJ0bXBSb290Iiwic3JjUGF0aCIsInRlbXBEaXIiLCJvcGVuRGlyIiwicGF0aCIsImpvaW4iLCJ3cml0ZUZpbGUiLCJyaW1yYWYiLCJyZW1vdmVQcm9maWxlIiwibmFtZSIsImxpc3RDcmFzaGVzIiwicmVwbGFjZSIsImZpbHRlciIsIngiLCJpbmNsdWRlcyIsImV4cG9ydENyYXNoIiwiZHN0Rm9sZGVyIiwiY29sbGVjdFBjYXAiLCJkc3RGaWxlIiwiZXhwb3J0cyIsIl9kZWZhdWx0IiwiZGVmYXVsdCJdLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9weS1pb3MtZGV2aWNlLWNsaWVudC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBleGVjLCBTdWJQcm9jZXNzIH0gZnJvbSAndGVlbl9wcm9jZXNzJztcbmltcG9ydCB7IGZzLCB1dGlsLCB0ZW1wRGlyIH0gZnJvbSAnYXBwaXVtL3N1cHBvcnQnO1xuaW1wb3J0IGxvZyBmcm9tICcuL2xvZ2dlcic7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL1l1ZUNoZW4tQy9weS1pb3MtZGV2aWNlXG5cbmNvbnN0IEJJTkFSWV9OQU1FID0gJ3B5aWRldmljZSc7XG5cbmNsYXNzIFB5aWRldmljZSB7XG4gIGNvbnN0cnVjdG9yICh1ZGlkKSB7XG4gICAgdGhpcy51ZGlkID0gdWRpZDtcbiAgICB0aGlzLmJpbmFyeVBhdGggPSBudWxsO1xuICB9XG5cbiAgYXN5bmMgYXNzZXJ0RXhpc3RzIChpc1N0cmljdCA9IHRydWUpIHtcbiAgICBpZiAodGhpcy5iaW5hcnlQYXRoKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgdGhpcy5iaW5hcnlQYXRoID0gYXdhaXQgZnMud2hpY2goQklOQVJZX05BTUUpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaWYgKGlzU3RyaWN0KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgJHtCSU5BUllfTkFNRX0gYmluYXJ5IGNhbm5vdCBiZSBmb3VuZCBpbiBQQVRILiBgICtcbiAgICAgICAgICBgUGxlYXNlIG1ha2Ugc3VyZSBpdCBpcyBpbnN0YWxsZWQuIFZpc2l0IGh0dHBzOi8vZ2l0aHViLmNvbS9ZdWVDaGVuLUMvcHktaW9zLWRldmljZSBmb3IgYCArXG4gICAgICAgICAgYG1vcmUgZGV0YWlscy5gKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBleGVjdXRlIChhcmdzLCBvcHRzID0ge30pIHtcbiAgICBhd2FpdCB0aGlzLmFzc2VydEV4aXN0cygpO1xuICAgIGNvbnN0IHtcbiAgICAgIGN3ZCxcbiAgICAgIGZvcm1hdCA9ICdqc29uJyxcbiAgICAgIGxvZ1N0ZG91dCA9IGZhbHNlLFxuICAgICAgYXN5bmNocm9ub3VzID0gZmFsc2UsXG4gICAgfSA9IG9wdHM7XG5cbiAgICBjb25zdCBmaW5hbEFyZ3MgPSBbLi4uYXJncywgJy0tdWRpZCcsIHRoaXMudWRpZF07XG4gICAgaWYgKGZvcm1hdCkge1xuICAgICAgZmluYWxBcmdzLnB1c2goJy0tZm9ybWF0JywgZm9ybWF0KTtcbiAgICB9XG4gICAgY29uc3QgY21kU3RyID0gdXRpbC5xdW90ZShbdGhpcy5iaW5hcnlQYXRoLCAuLi5maW5hbEFyZ3NdKTtcbiAgICBsb2cuZGVidWcoYEV4ZWN1dGluZyAke2NtZFN0cn1gKTtcbiAgICB0cnkge1xuICAgICAgaWYgKGFzeW5jaHJvbm91cykge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBuZXcgU3ViUHJvY2Vzcyh0aGlzLmJpbmFyeVBhdGgsIGZpbmFsQXJncywge2N3ZH0pO1xuICAgICAgICBhd2FpdCByZXN1bHQuc3RhcnQoMCk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBleGVjKHRoaXMuYmluYXJ5UGF0aCwgZmluYWxBcmdzLCB7Y3dkfSk7XG4gICAgICBpZiAobG9nU3Rkb3V0KSB7XG4gICAgICAgIGxvZy5kZWJ1ZyhgQ29tbWFuZCBvdXRwdXQ6ICR7cmVzdWx0LnN0ZG91dH1gKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGAnJHtjbWRTdHJ9JyBmYWlsZWQuIE9yaWdpbmFsIGVycm9yOiAke2Uuc3RkZXJyIHx8IGUuc3Rkb3V0IHx8IGUubWVzc2FnZX1gKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBsaXN0UHJvZmlsZXMgKCkge1xuICAgIGNvbnN0IHtzdGRvdXR9ID0gYXdhaXQgdGhpcy5leGVjdXRlKFsncHJvZmlsZXMnLCAnbGlzdCddKTtcbiAgICByZXR1cm4gSlNPTi5wYXJzZShzdGRvdXQpO1xuICB9XG5cbiAgYXN5bmMgaW5zdGFsbFByb2ZpbGUgKHtwcm9maWxlUGF0aCwgcGF5bG9hZH0gPSB7fSkge1xuICAgIGlmICghcHJvZmlsZVBhdGggJiYgIXBheWxvYWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRWl0aGVyIHRoZSBmdWxsIHBhdGggdG8gdGhlIHByb2ZpbGUgb3IgaXRzIHBheWxvYWQgbXVzdCBiZSBwcm92aWRlZCcpO1xuICAgIH1cblxuICAgIGxldCB0bXBSb290O1xuICAgIGxldCBzcmNQYXRoID0gcHJvZmlsZVBhdGg7XG4gICAgdHJ5IHtcbiAgICAgIGlmICghc3JjUGF0aCkge1xuICAgICAgICB0bXBSb290ID0gYXdhaXQgdGVtcERpci5vcGVuRGlyKCk7XG4gICAgICAgIHNyY1BhdGggPSBwYXRoLmpvaW4odG1wUm9vdCwgJ2NlcnQucGVtJyk7XG4gICAgICAgIGF3YWl0IGZzLndyaXRlRmlsZShzcmNQYXRoLCBwYXlsb2FkLCAndXRmOCcpO1xuICAgICAgfVxuICAgICAgYXdhaXQgdGhpcy5leGVjdXRlKFsncHJvZmlsZXMnLCAnaW5zdGFsbCcsICctLXBhdGgnLCBzcmNQYXRoXSwge1xuICAgICAgICBsb2dTdGRvdXQ6IHRydWVcbiAgICAgIH0pO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpZiAodG1wUm9vdCkge1xuICAgICAgICBhd2FpdCBmcy5yaW1yYWYodG1wUm9vdCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgcmVtb3ZlUHJvZmlsZSAobmFtZSkge1xuICAgIGF3YWl0IHRoaXMuZXhlY3V0ZShbJ3Byb2ZpbGVzJywgJ3JlbW92ZScsIG5hbWVdLCB7bG9nU3Rkb3V0OiB0cnVlfSk7XG4gIH1cblxuICBhc3luYyBsaXN0Q3Jhc2hlcyAoKSB7XG4gICAgY29uc3Qge3N0ZG91dH0gPSBhd2FpdCB0aGlzLmV4ZWN1dGUoWydjcmFzaCcsICdsaXN0J10pO1xuICAgIHJldHVybiBKU09OLnBhcnNlKHN0ZG91dC5yZXBsYWNlKC8nL2csICdcIicpKS5maWx0ZXIoKHgpID0+ICFbJy4nLCAnLi4nXS5pbmNsdWRlcyh4KSk7XG4gIH1cblxuICBhc3luYyBleHBvcnRDcmFzaCAobmFtZSwgZHN0Rm9sZGVyKSB7XG4gICAgYXdhaXQgdGhpcy5leGVjdXRlKFsnY3Jhc2gnLCAnZXhwb3J0JywgJy0tbmFtZScsIG5hbWVdLCB7XG4gICAgICBsb2dTdGRvdXQ6IHRydWUsXG4gICAgICAvLyBUaGUgdG9vbCBleHBvcnRzIGNyYXNoIHJlcG9ydHMgdG8gdGhlIGN1cnJlbnQgd29ya2luZyBkaXJcbiAgICAgIGN3ZDogZHN0Rm9sZGVyXG4gICAgfSk7XG4gIH1cblxuICBhc3luYyBjb2xsZWN0UGNhcCAoZHN0RmlsZSkge1xuICAgIHJldHVybiBhd2FpdCB0aGlzLmV4ZWN1dGUoWydwY2FwZCcsIGRzdEZpbGVdLCB7XG4gICAgICBmb3JtYXQ6IG51bGwsXG4gICAgICBhc3luY2hyb25vdXM6IHRydWVcbiAgICB9KTtcbiAgfVxufVxuXG5leHBvcnQgeyBQeWlkZXZpY2UgfTtcbmV4cG9ydCBkZWZhdWx0IFB5aWRldmljZTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQSxJQUFBQSxhQUFBLEdBQUFDLE9BQUE7QUFDQSxJQUFBQyxRQUFBLEdBQUFELE9BQUE7QUFDQSxJQUFBRSxPQUFBLEdBQUFDLHNCQUFBLENBQUFILE9BQUE7QUFDQSxJQUFBSSxLQUFBLEdBQUFELHNCQUFBLENBQUFILE9BQUE7QUFJQSxNQUFNSyxXQUFXLEdBQUcsV0FBVztBQUUvQixNQUFNQyxTQUFTLENBQUM7RUFDZEMsV0FBV0EsQ0FBRUMsSUFBSSxFQUFFO0lBQ2pCLElBQUksQ0FBQ0EsSUFBSSxHQUFHQSxJQUFJO0lBQ2hCLElBQUksQ0FBQ0MsVUFBVSxHQUFHLElBQUk7RUFDeEI7RUFFQSxNQUFNQyxZQUFZQSxDQUFFQyxRQUFRLEdBQUcsSUFBSSxFQUFFO0lBQ25DLElBQUksSUFBSSxDQUFDRixVQUFVLEVBQUU7TUFDbkIsT0FBTyxJQUFJO0lBQ2I7SUFFQSxJQUFJO01BQ0YsSUFBSSxDQUFDQSxVQUFVLEdBQUcsTUFBTUcsV0FBRSxDQUFDQyxLQUFLLENBQUNSLFdBQVcsQ0FBQztNQUM3QyxPQUFPLElBQUk7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