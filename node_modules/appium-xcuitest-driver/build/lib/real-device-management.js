"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getConnectedDevices = getConnectedDevices;
exports.getOSVersion = getOSVersion;
exports.getRealDeviceObj = getRealDeviceObj;
exports.installToRealDevice = installToRealDevice;
exports.runRealDeviceReset = runRealDeviceReset;
require("source-map-support/register");
var _appiumIosDevice = require("appium-ios-device");
var _iosDeploy = _interopRequireDefault(require("./ios-deploy"));
var _logger = _interopRequireDefault(require("./logger"));
var _appUtils = require("./app-utils");
async function getConnectedDevices() {
  return await _appiumIosDevice.utilities.getConnectedDevices();
}
async function getOSVersion(udid) {
  return await _appiumIosDevice.utilities.getOSVersion(udid);
}
async function resetRealDevice(device, opts) {
  const {
    bundleId,
    fullReset
  } = opts;
  if (!bundleId) {
    return;
  }
  if (bundleId === _appUtils.SAFARI_BUNDLE_ID) {
    _logger.default.debug('Reset requested. About to terminate Safari');
    await device.terminateApp(bundleId);
    return;
  }
  if (!fullReset) {
    return;
  }
  _logger.default.debug(`Reset: fullReset requested. Will try to uninstall the app '${bundleId}'.`);
  if (!(await device.isAppInstalled(bundleId))) {
    _logger.default.debug('Reset: app not installed. No need to uninstall');
    return;
  }
  try {
    await device.remove(bundleId);
  } catch (err) {
    _logger.default.error(`Reset: could not remove '${bundleId}' from device: ${err.message}`);
    throw err;
  }
  _logger.default.debug(`Reset: removed '${bundleId}'`);
}
async function runRealDeviceReset(device, opts) {
  if (!opts.noReset || opts.fullReset) {
    _logger.default.debug('Reset: running ios real device reset flow');
    if (!opts.noReset) {
      await resetRealDevice(device, opts);
    }
  } else {
    _logger.default.debug('Reset: fullReset not set. Leaving as is');
  }
}
async function installToRealDevice(device, app, bundleId, opts = {}) {
  if (!device.udid || !app) {
    _logger.default.debug('No device id or app, not installing to real device.');
    return;
  }
  const {
    skipUninstall,
    strategy,
    timeout
  } = opts;
  if (!skipUninstall && bundleId && (await device.isAppInstalled(bundleId))) {
    _logger.default.debug(`Reset requested. Removing app with id '${bundleId}' from the device`);
    await device.remove(bundleId);
  }
  _logger.default.debug(`Installing '${app}' on device with UUID '${device.udid}'...`);
  await device.install(app, timeout, strategy);
  _logger.default.debug('The app has been installed successfully.');
}
function getRealDeviceObj(udid) {
  _logger.default.debug(`Creating iDevice object with udid '${udid}'`);
  return new _iosDeploy.default(udid);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfYXBwaXVtSW9zRGV2aWNlIiwicmVxdWlyZSIsIl9pb3NEZXBsb3kiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX2xvZ2dlciIsIl9hcHBVdGlscyIsImdldENvbm5lY3RlZERldmljZXMiLCJ1dGlsaXRpZXMiLCJnZXRPU1ZlcnNpb24iLCJ1ZGlkIiwicmVzZXRSZWFsRGV2aWNlIiwiZGV2aWNlIiwib3B0cyIsImJ1bmRsZUlkIiwiZnVsbFJlc2V0IiwiU0FGQVJJX0JVTkRMRV9JRCIsImxvZyIsImRlYnVnIiwidGVybWluYXRlQXBwIiwiaXNBcHBJbnN0YWxsZWQiLCJyZW1vdmUiLCJlcnIiLCJlcnJvciIsIm1lc3NhZ2UiLCJydW5SZWFsRGV2aWNlUmVzZXQiLCJub1Jlc2V0IiwiaW5zdGFsbFRvUmVhbERldmljZSIsImFwcCIsInNraXBVbmluc3RhbGwiLCJzdHJhdGVneSIsInRpbWVvdXQiLCJpbnN0YWxsIiwiZ2V0UmVhbERldmljZU9iaiIsIklPU0RlcGxveSJdLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9yZWFsLWRldmljZS1tYW5hZ2VtZW50LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHV0aWxpdGllcyB9IGZyb20gJ2FwcGl1bS1pb3MtZGV2aWNlJztcbmltcG9ydCBJT1NEZXBsb3kgZnJvbSAnLi9pb3MtZGVwbG95JztcbmltcG9ydCBsb2cgZnJvbSAnLi9sb2dnZXInO1xuaW1wb3J0IHsgU0FGQVJJX0JVTkRMRV9JRCB9IGZyb20gJy4vYXBwLXV0aWxzJztcblxuXG5hc3luYyBmdW5jdGlvbiBnZXRDb25uZWN0ZWREZXZpY2VzICgpIHtcbiAgcmV0dXJuIGF3YWl0IHV0aWxpdGllcy5nZXRDb25uZWN0ZWREZXZpY2VzKCk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldE9TVmVyc2lvbiAodWRpZCkge1xuICByZXR1cm4gYXdhaXQgdXRpbGl0aWVzLmdldE9TVmVyc2lvbih1ZGlkKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gcmVzZXRSZWFsRGV2aWNlIChkZXZpY2UsIG9wdHMpIHtcbiAgY29uc3QgeyBidW5kbGVJZCwgZnVsbFJlc2V0IH0gPSBvcHRzO1xuICBpZiAoIWJ1bmRsZUlkKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGJ1bmRsZUlkID09PSBTQUZBUklfQlVORExFX0lEKSB7XG4gICAgbG9nLmRlYnVnKCdSZXNldCByZXF1ZXN0ZWQuIEFib3V0IHRvIHRlcm1pbmF0ZSBTYWZhcmknKTtcbiAgICBhd2FpdCBkZXZpY2UudGVybWluYXRlQXBwKGJ1bmRsZUlkKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoIWZ1bGxSZXNldCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGxvZy5kZWJ1ZyhgUmVzZXQ6IGZ1bGxSZXNldCByZXF1ZXN0ZWQuIFdpbGwgdHJ5IHRvIHVuaW5zdGFsbCB0aGUgYXBwICcke2J1bmRsZUlkfScuYCk7XG4gIGlmICghYXdhaXQgZGV2aWNlLmlzQXBwSW5zdGFsbGVkKGJ1bmRsZUlkKSkge1xuICAgIGxvZy5kZWJ1ZygnUmVzZXQ6IGFwcCBub3QgaW5zdGFsbGVkLiBObyBuZWVkIHRvIHVuaW5zdGFsbCcpO1xuICAgIHJldHVybjtcbiAgfVxuICB0cnkge1xuICAgIGF3YWl0IGRldmljZS5yZW1vdmUoYnVuZGxlSWQpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBsb2cuZXJyb3IoYFJlc2V0OiBjb3VsZCBub3QgcmVtb3ZlICcke2J1bmRsZUlkfScgZnJvbSBkZXZpY2U6ICR7ZXJyLm1lc3NhZ2V9YCk7XG4gICAgdGhyb3cgZXJyO1xuICB9XG4gIGxvZy5kZWJ1ZyhgUmVzZXQ6IHJlbW92ZWQgJyR7YnVuZGxlSWR9J2ApO1xufVxuXG5hc3luYyBmdW5jdGlvbiBydW5SZWFsRGV2aWNlUmVzZXQgKGRldmljZSwgb3B0cykge1xuICBpZiAoIW9wdHMubm9SZXNldCB8fCBvcHRzLmZ1bGxSZXNldCkge1xuICAgIGxvZy5kZWJ1ZygnUmVzZXQ6IHJ1bm5pbmcgaW9zIHJlYWwgZGV2aWNlIHJlc2V0IGZsb3cnKTtcbiAgICBpZiAoIW9wdHMubm9SZXNldCkge1xuICAgICAgYXdhaXQgcmVzZXRSZWFsRGV2aWNlKGRldmljZSwgb3B0cyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGxvZy5kZWJ1ZygnUmVzZXQ6IGZ1bGxSZXNldCBub3Qgc2V0LiBMZWF2aW5nIGFzIGlzJyk7XG4gIH1cbn1cblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBJbnN0YWxsT3B0aW9uc1xuICpcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbj99IHNraXBVbmluc3RhbGwgV2hldGhlciB0byBza2lwIGFwcCB1bmluc3RhbGwgYmVmb3JlIGluc3RhbGxpbmcgaXRcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBzdHJhdGVneSBbc2VyaWFsXSBPbmUgb2YgcG9zc2libGUgaW5zdGFsbCBzdHJhdGVnaWVzICgnc2VyaWFsJywgJ3BhcmFsbGVsJywgJ2lvcy1kZXBsb3knKVxuICogQHByb3BlcnR5IHtudW1iZXI/fSB0aW1lb3V0IEFwcCBpbnN0YWxsIHRpbWVvdXRcbiAqL1xuXG4vKipcbiAqIEBwYXJhbSB7SU9TRGVwbG95fSBkZXZpY2UgVGhlIGRldmljZSBpbnN0YW5jZVxuICogQHBhcmFtIHtzdHJpbmc/fSBhcHAgVGhlIGFwcCB0byB0aGUgcGF0aFxuICogQHBhcmFtIHtzdHJpbmc/fSBidW5kbGVJZCBUaGUgYnVuZGxlIGlkIHRvIGVuc3VyZSBpdCBpcyBhbHJlYWR5IGluc3RhbGxlZCBhbmQgdW5pbnN0YWxsIGl0XG4gKiBAcGFyYW0ge0luc3RhbGxPcHRpb25zP30gb3B0c1xuICovXG5hc3luYyBmdW5jdGlvbiBpbnN0YWxsVG9SZWFsRGV2aWNlIChkZXZpY2UsIGFwcCwgYnVuZGxlSWQsIG9wdHMgPSB7fSkge1xuICBpZiAoIWRldmljZS51ZGlkIHx8ICFhcHApIHtcbiAgICBsb2cuZGVidWcoJ05vIGRldmljZSBpZCBvciBhcHAsIG5vdCBpbnN0YWxsaW5nIHRvIHJlYWwgZGV2aWNlLicpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IHtcbiAgICBza2lwVW5pbnN0YWxsLFxuICAgIHN0cmF0ZWd5LFxuICAgIHRpbWVvdXQsXG4gIH0gPSBvcHRzO1xuXG4gIGlmICghc2tpcFVuaW5zdGFsbCAmJiBidW5kbGVJZCAmJiBhd2FpdCBkZXZpY2UuaXNBcHBJbnN0YWxsZWQoYnVuZGxlSWQpKSB7XG4gICAgbG9nLmRlYnVnKGBSZXNldCByZXF1ZXN0ZWQuIFJlbW92aW5nIGFwcCB3aXRoIGlkICcke2J1bmRsZUlkfScgZnJvbSB0aGUgZGV2aWNlYCk7XG4gICAgYXdhaXQgZGV2aWNlLnJlbW92ZShidW5kbGVJZCk7XG4gIH1cbiAgbG9nLmRlYnVnKGBJbnN0YWxsaW5nICcke2FwcH0nIG9uIGRldmljZSB3aXRoIFVVSUQgJyR7ZGV2aWNlLnVkaWR9Jy4uLmApO1xuICBhd2FpdCBkZXZpY2UuaW5zdGFsbChhcHAsIHRpbWVvdXQsIHN0cmF0ZWd5KTtcbiAgbG9nLmRlYnVnKCdUaGUgYXBwIGhhcyBiZWVuIGluc3RhbGxlZCBzdWNjZXNzZnVsbHkuJyk7XG59XG5cbmZ1bmN0aW9uIGdldFJlYWxEZXZpY2VPYmogKHVkaWQpIHtcbiAgbG9nLmRlYnVnKGBDcmVhdGluZyBpRGV2aWNlIG9iamVjdCB3aXRoIHVkaWQgJyR7dWRpZH0nYCk7XG4gIHJldHVybiBuZXcgSU9TRGVwbG95KHVkaWQpO1xufVxuXG5leHBvcnQgeyBnZXRDb25uZWN0ZWREZXZpY2VzLCBnZXRPU1ZlcnNpb24sIHJ1blJlYWxEZXZpY2VSZXNldCwgaW5zdGFsbFRvUmVhbERldmljZSxcbiAgZ2V0UmVhbERldmljZU9iaiB9O1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQSxJQUFBQSxnQkFBQSxHQUFBQyxPQUFBO0FBQ0EsSUFBQUMsVUFBQSxHQUFBQyxzQkFBQSxDQUFBRixPQUFBO0FBQ0EsSUFBQUcsT0FBQSxHQUFBRCxzQkFBQSxDQUFBRixPQUFBO0FBQ0EsSUFBQUksU0FBQSxHQUFBSixPQUFBO0FBR0EsZUFBZUssbUJBQW1C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