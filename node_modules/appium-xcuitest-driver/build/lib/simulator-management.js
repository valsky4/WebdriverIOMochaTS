"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createSim = createSim;
exports.getExistingSim = getExistingSim;
exports.installToSimulator = installToSimulator;
exports.runSimulatorReset = runSimulatorReset;
exports.setLocalizationPrefs = setLocalizationPrefs;
exports.setSafariPrefs = setSafariPrefs;
exports.shutdownOtherSimulators = shutdownOtherSimulators;
exports.shutdownSimulator = shutdownSimulator;
require("source-map-support/register");
var _appiumIosSimulator = require("appium-ios-simulator");
var _nodeSimctl = _interopRequireDefault(require("node-simctl"));
var _appiumWebdriveragent = require("appium-webdriveragent");
var _lodash = _interopRequireDefault(require("lodash"));
var _logger = _interopRequireDefault(require("./logger"));
var _support = require("appium/support");
var _desiredCaps = require("./desired-caps");
const APPIUM_SIM_PREFIX = 'appiumTest';
const SAFARI_OPTS_ALIASES_MAP = {
  safariAllowPopups: [['WebKitJavaScriptCanOpenWindowsAutomatically', 'JavaScriptCanOpenWindowsAutomatically'], x => Number(Boolean(x))],
  safariIgnoreFraudWarning: [['WarnAboutFraudulentWebsites'], x => Number(!x)],
  safariOpenLinksInBackground: [['OpenLinksInBackground'], x => Number(Boolean(x))]
};
async function createSim(caps, platform = _desiredCaps.PLATFORM_NAME_IOS) {
  const devicesSetPath = caps.simulatorDevicesSetPath;
  const udid = await new _nodeSimctl.default({
    devicesSetPath
  }).createDevice(`${APPIUM_SIM_PREFIX}-${_support.util.uuidV4().toUpperCase()}-${caps.deviceName}`, caps.deviceName, caps.platformVersion, {
    platform
  });
  return await (0, _appiumIosSimulator.getSimulator)(udid, {
    platform,
    checkExistence: false,
    devicesSetPath
  });
}
async function getExistingSim(opts = {}) {
  const {
    platformVersion,
    deviceName,
    simulatorDevicesSetPath: devicesSetPath
  } = opts;
  let appiumTestDevice;
  const simctl = new _nodeSimctl.default({
    devicesSetPath
  });
  for (const device of _lodash.default.values(await simctl.getDevices(platformVersion))) {
    if (deviceName && device.name === deviceName || !deviceName) {
      return await (0, _appiumIosSimulator.getSimulator)(device.udid, {
        platform: device.platform,
        checkExistence: false,
        devicesSetPath
      });
    }
    if (device.name.startsWith(APPIUM_SIM_PREFIX) && (deviceName && device.name.endsWith(deviceName) || !deviceName)) {
      appiumTestDevice = device;
      if (device.state === 'Booted') {
        break;
      }
    }
  }
  if (appiumTestDevice) {
    _logger.default.warn(`Unable to find device '${deviceName}'. ` + `Found '${appiumTestDevice.name}' (udid: '${appiumTestDevice.udid}') instead`);
    return await (0, _appiumIosSimulator.getSimulator)(appiumTestDevice.udid, {
      platform: appiumTestDevice.platform,
      checkExistence: false,
      devicesSetPath
    });
  }
  return null;
}
async function shutdownSimulator(device) {
  await (0, _appiumWebdriveragent.resetTestProcesses)(device.udid, true);
  await device.shutdown();
}
async function runSimulatorReset(device, opts) {
  const {
    noReset,
    fullReset,
    keychainsExcludePatterns,
    keepKeyChains,
    bundleId,
    app,
    browserName,
    enforceSimulatorShutdown
  } = opts;
  if (noReset && !fullReset) {
    _logger.default.debug('Reset: noReset is on. Leaving simulator as is');
    return;
  }
  if (!device) {
    _logger.default.debug('Reset: no device available. Skipping');
    return;
  }
  if (fullReset) {
    _logger.default.debug('Reset: fullReset is on. Cleaning simulator');
    await shutdownSimulator(device);
    const isKeychainsBackupSuccessful = (keychainsExcludePatterns || keepKeyChains) && (await device.backupKeychains());
    await device.clean();
    if (isKeychainsBackupSuccessful) {
      await device.restoreKeychains(keychainsExcludePatterns || []);
      _logger.default.info(`Successfully restored keychains after full reset`);
    } else if (keychainsExcludePatterns || keepKeyChains) {
      _logger.default.warn('Cannot restore keychains after full reset, because ' + 'the backup operation did not succeed');
    }
  } else if (bundleId) {
    try {
      await device.terminateApp(bundleId);
    } catch (err) {
      _logger.default.warn(`Reset: failed to terminate Simulator application with id "${bundleId}"`);
    }
    if (app) {
      _logger.default.info('Not scrubbing third party app in anticipation of uninstall');
    } else {
      const isSafari = _lodash.default.toLower(browserName) === 'safari';
      try {
        if (isSafari) {
          await device.scrubSafari();
        } else {
          await device.scrubApp(bundleId);
        }
      } catch (err) {
        _logger.default.debug(err.stack);
        _logger.default.warn(err.message);
        _logger.default.warn(`Reset: could not scrub ${isSafari ? 'Safari browser' : 'application with id "' + opts.bundleId + '"'}. ` + `Leaving as is.`);
      }
    }
    if (enforceSimulatorShutdown && (await device.isRunning())) {
      await shutdownSimulator(device);
    }
  }
}
async function installToSimulator(device, app, bundleId, opts = {}) {
  if (!app) {
    _logger.default.debug('No app path is given. Nothing to install.');
    return;
  }
  const {
    skipUninstall,
    newSimulator = false
  } = opts;
  if (!skipUninstall && !newSimulator && bundleId && (await device.isAppInstalled(bundleId))) {
    _logger.default.debug(`Reset requested. Removing app with id '${bundleId}' from the device`);
    await device.removeApp(bundleId);
  }
  _logger.default.debug(`Installing '${app}' on Simulator with UUID '${device.udid}'...`);
  try {
    await device.installApp(app);
  } catch (e) {
    _logger.default.info(`Got an error on '${app}' install: ${e.message}`);
    _logger.default.info('Retrying application install');
    await device.installApp(app);
  }
  _logger.default.debug('The app has been installed successfully.');
}
async function shutdownOtherSimulators(currentDevice) {
  const simctl = new _nodeSimctl.default({
    devicesSetPath: currentDevice.devicesSetPath
  });
  const allDevices = _lodash.default.flatMap(_lodash.default.values(await simctl.getDevices()));
  const otherBootedDevices = allDevices.filter(device => device.udid !== currentDevice.udid && device.state === 'Booted');
  if (_lodash.default.isEmpty(otherBootedDevices)) {
    _logger.default.info('No other running simulators have been detected');
    return;
  }
  _logger.default.info(`Detected ${otherBootedDevices.length} other running ${_support.util.pluralize('Simulator', otherBootedDevices.length)}.` + `Shutting them down...`);
  for (const {
    udid
  } of otherBootedDevices) {
    await (0, _appiumWebdriveragent.resetTestProcesses)(udid, true);
    simctl.udid = udid;
    await simctl.shutdownDevice();
  }
}
async function setSafariPrefs(sim, opts = {}) {
  const safariSettings = _lodash.default.cloneDeep(opts.safariGlobalPreferences ?? {});
  for (const [name, [aliases, valueConverter]] of _lodash.default.toPairs(SAFARI_OPTS_ALIASES_MAP)) {
    if (!_lodash.default.has(opts, name)) {
      continue;
    }
    for (const alias of aliases) {
      safariSettings[alias] = valueConverter(opts[name]);
    }
  }
  if (_lodash.default.isEmpty(safariSettings)) {
    return false;
  }
  _logger.default.debug(`About to update Safari preferences: ${JSON.stringify(safariSettings)}`);
  await sim.updateSafariSettings(safariSettings);
  return true;
}
async function setLocalizationPrefs(sim, opts = {}) {
  const {
    language,
    locale,
    calendarFormat
  } = opts;
  const l10nConfig = {};
  if (language) {
    l10nConfig.language = {
      name: language
    };
  }
  if (locale) {
    l10nConfig.locale = {
      name: locale
    };
    if (calendarFormat) {
      l10nConfig.locale.calendar = calendarFormat;
    }
  }
  if (_lodash.default.isEmpty(l10nConfig)) {
    return false;
  }
  _logger.default.debug(`About to update localization preferences: ${JSON.stringify(l10nConfig)}`);
  await sim.configureLocalization(l10nConfig);
  return true;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,