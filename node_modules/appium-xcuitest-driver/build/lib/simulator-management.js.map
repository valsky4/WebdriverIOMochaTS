{"version":3,"file":"simulator-management.js","names":["_appiumIosSimulator","require","_nodeSimctl","_interopRequireDefault","_appiumWebdriveragent","_lodash","_logger","_support","_desiredCaps","APPIUM_SIM_PREFIX","SAFARI_OPTS_ALIASES_MAP","safariAllowPopups","x","Number","Boolean","safariIgnoreFraudWarning","safariOpenLinksInBackground","createSim","caps","platform","PLATFORM_NAME_IOS","devicesSetPath","simulatorDevicesSetPath","udid","Simctl","createDevice","util","uuidV4","toUpperCase","deviceName","platformVersion","getSimulator","checkExistence","getExistingSim","opts","appiumTestDevice","simctl","device","_","values","getDevices","name","startsWith","endsWith","state","log","warn","shutdownSimulator","resetTestProcesses","shutdown","runSimulatorReset","noReset","fullReset","keychainsExcludePatterns","keepKeyChains","bundleId","app","browserName","enforceSimulatorShutdown","debug","isKeychainsBackupSuccessful","backupKeychains","clean","restoreKeychains","info","terminateApp","err","isSafari","toLower","scrubSafari","scrubApp","stack","message","isRunning","installToSimulator","skipUninstall","newSimulator","isAppInstalled","removeApp","installApp","e","shutdownOtherSimulators","currentDevice","allDevices","flatMap","otherBootedDevices","filter","isEmpty","length","pluralize","shutdownDevice","setSafariPrefs","sim","safariSettings","cloneDeep","safariGlobalPreferences","aliases","valueConverter","toPairs","has","alias","JSON","stringify","updateSafariSettings","setLocalizationPrefs","language","locale","calendarFormat","l10nConfig","calendar","configureLocalization"],"sources":["../../lib/simulator-management.js"],"sourcesContent":["import { getSimulator } from 'appium-ios-simulator';\nimport Simctl from 'node-simctl';\nimport { resetTestProcesses } from 'appium-webdriveragent';\nimport _ from 'lodash';\nimport log from './logger';\nimport { util } from 'appium/support';\nimport { PLATFORM_NAME_IOS } from './desired-caps';\n\n\nconst APPIUM_SIM_PREFIX = 'appiumTest';\nconst SAFARI_OPTS_ALIASES_MAP = {\n  safariAllowPopups: [\n    ['WebKitJavaScriptCanOpenWindowsAutomatically', 'JavaScriptCanOpenWindowsAutomatically'],\n    (x) => Number(Boolean(x)),\n  ],\n  safariIgnoreFraudWarning: [\n    ['WarnAboutFraudulentWebsites'],\n    (x) => Number(!x),\n  ],\n  safariOpenLinksInBackground: [\n    ['OpenLinksInBackground'],\n    (x) => Number(Boolean(x)),\n  ]\n};\n\n/**\n * Capability set by a user\n *\n * @property {string} deviceName - A name for the device\n * @property {string} platformVersion - The version of iOS to use\n */\n/**\n * Create a new simulator with `appiumTest-` prefix and return the object.\n *\n * @param {object} SimCreationCaps - Capability set by a user. The options available are:\n * @property {string} platform [iOS] - Platform name in order to specify runtime such as 'iOS', 'tvOS', 'watchOS'\n * @returns {object} Simulator object associated with the udid passed in.\n */\nasync function createSim (caps, platform = PLATFORM_NAME_IOS) {\n  const devicesSetPath = caps.simulatorDevicesSetPath;\n  const udid = await new Simctl({devicesSetPath}).createDevice(\n    `${APPIUM_SIM_PREFIX}-${util.uuidV4().toUpperCase()}-${caps.deviceName}`,\n    caps.deviceName,\n    caps.platformVersion,\n    {platform},\n  );\n  return await getSimulator(udid, {\n    platform,\n    checkExistence: false,\n    devicesSetPath,\n  });\n}\n\n/**\n * @typedef {Object} SimulatorLookupOptions\n * @property {string?} deviceName - The name of the device to lookup\n * @property {string!} platformVersion - The platform version string\n * @property {string?} simulatorDevicesSetPath - The full path to the simulator devices set\n */\n\n/**\n * Get a simulator which is already running.\n *\n * @param {SimulatorLookupOptions?} opts\n * @returns {Simulator?} The matched Simulator instance or `null` if no matching  device is found.\n */\nasync function getExistingSim (opts = {}) {\n  const {\n    platformVersion,\n    deviceName,\n    simulatorDevicesSetPath: devicesSetPath,\n  } = opts;\n\n  let appiumTestDevice;\n  const simctl = new Simctl({devicesSetPath});\n  for (const device of _.values(await simctl.getDevices(platformVersion))) {\n    if ((deviceName && device.name === deviceName) || !deviceName) {\n      return await getSimulator(device.udid, {\n        platform: device.platform,\n        checkExistence: false,\n        devicesSetPath,\n      });\n    }\n\n    if (device.name.startsWith(APPIUM_SIM_PREFIX)\n      && ((deviceName && device.name.endsWith(deviceName)) || !deviceName)) {\n      appiumTestDevice = device;\n      // choose the first booted simulator\n      if (device.state === 'Booted') {\n        break;\n      }\n    }\n  }\n\n  if (appiumTestDevice) {\n    log.warn(`Unable to find device '${deviceName}'. ` +\n      `Found '${appiumTestDevice.name}' (udid: '${appiumTestDevice.udid}') instead`);\n    return await getSimulator(appiumTestDevice.udid, {\n      platform: appiumTestDevice.platform,\n      checkExistence: false,\n      devicesSetPath,\n    });\n  }\n  return null;\n}\n\nasync function shutdownSimulator (device) {\n  // stop XCTest processes if running to avoid unexpected side effects\n  await resetTestProcesses(device.udid, true);\n  await device.shutdown();\n}\n\nasync function runSimulatorReset (device, opts) {\n  const {\n    noReset,\n    fullReset,\n    keychainsExcludePatterns,\n    keepKeyChains,\n    bundleId,\n    app,\n    browserName,\n    enforceSimulatorShutdown,\n  } = opts;\n  if (noReset && !fullReset) {\n    // noReset === true && fullReset === false\n    log.debug('Reset: noReset is on. Leaving simulator as is');\n    return;\n  }\n  if (!device) {\n    log.debug('Reset: no device available. Skipping');\n    return;\n  }\n\n  if (fullReset) {\n    log.debug('Reset: fullReset is on. Cleaning simulator');\n    await shutdownSimulator(device);\n    const isKeychainsBackupSuccessful = (keychainsExcludePatterns || keepKeyChains)\n      && await device.backupKeychains();\n    await device.clean();\n    if (isKeychainsBackupSuccessful) {\n      await device.restoreKeychains(keychainsExcludePatterns || []);\n      log.info(`Successfully restored keychains after full reset`);\n    } else if (keychainsExcludePatterns || keepKeyChains) {\n      log.warn('Cannot restore keychains after full reset, because ' +\n        'the backup operation did not succeed');\n    }\n  } else if (bundleId) {\n    // fastReset or noReset\n\n    // Terminate the app under test if it is still running on Simulator\n    try {\n      await device.terminateApp(bundleId);\n    } catch (err) {\n      log.warn(`Reset: failed to terminate Simulator application with id \"${bundleId}\"`);\n    }\n\n    if (app) {\n      log.info('Not scrubbing third party app in anticipation of uninstall');\n    } else {\n      const isSafari = _.toLower(browserName) === 'safari';\n      try {\n        if (isSafari) {\n          await device.scrubSafari();\n        } else {\n          await device.scrubApp(bundleId);\n        }\n      } catch (err) {\n        log.debug(err.stack);\n        log.warn(err.message);\n        log.warn(\n          `Reset: could not scrub ${isSafari ? 'Safari browser' : 'application with id \"' + opts.bundleId + '\"'}. ` +\n          `Leaving as is.`\n        );\n      }\n    }\n\n    if (enforceSimulatorShutdown && await device.isRunning()) {\n      await shutdownSimulator(device);\n    }\n  }\n}\n\n/**\n * @typedef {Object} InstallOptions\n *\n * @property {boolean?} skipUninstall Whether to skip app uninstall before installing it\n * @property {boolean?} newSimulator [false] Whether the simulator is brand new\n */\n\n/**\n * @param {Object} device The simulator device object\n * @param {string?} app The app to the path\n * @param {string?} bundleId The bundle id to ensure it is already installed and uninstall it\n * @param {InstallOptions?} opts\n */\nasync function installToSimulator (device, app, bundleId, opts = {}) {\n  if (!app) {\n    log.debug('No app path is given. Nothing to install.');\n    return;\n  }\n\n  const {\n    skipUninstall,\n    newSimulator = false,\n  } = opts;\n\n  if (!skipUninstall && !newSimulator && bundleId && await device.isAppInstalled(bundleId)) {\n    log.debug(`Reset requested. Removing app with id '${bundleId}' from the device`);\n    await device.removeApp(bundleId);\n  }\n\n  log.debug(`Installing '${app}' on Simulator with UUID '${device.udid}'...`);\n  try {\n    await device.installApp(app);\n  } catch (e) {\n    // it sometimes fails on Xcode 10 because of a race condition\n    log.info(`Got an error on '${app}' install: ${e.message}`);\n    log.info('Retrying application install');\n    await device.installApp(app);\n  }\n  log.debug('The app has been installed successfully.');\n}\n\nasync function shutdownOtherSimulators (currentDevice) {\n  const simctl = new Simctl({\n    devicesSetPath: currentDevice.devicesSetPath\n  });\n  const allDevices = _.flatMap(_.values(await simctl.getDevices()));\n  const otherBootedDevices = allDevices.filter((device) => device.udid !== currentDevice.udid && device.state === 'Booted');\n  if (_.isEmpty(otherBootedDevices)) {\n    log.info('No other running simulators have been detected');\n    return;\n  }\n  log.info(`Detected ${otherBootedDevices.length} other running ${util.pluralize('Simulator', otherBootedDevices.length)}.` +\n    `Shutting them down...`);\n  for (const {udid} of otherBootedDevices) {\n    // It is necessary to stop the corresponding xcodebuild process before killing\n    // the simulator, otherwise it will be automatically restarted\n    await resetTestProcesses(udid, true);\n    simctl.udid = udid;\n    await simctl.shutdownDevice();\n  }\n}\n\n/**\n * Configures Safari options based on the given session capabilities\n *\n * @param {*} sim Simulator instance\n * @param {object} opts Session capabilities\n * @return {boolean} true if any preferences have been updated\n */\nasync function setSafariPrefs (sim, opts = {}) {\n  const safariSettings = _.cloneDeep(opts.safariGlobalPreferences ?? {});\n\n  for (const [name, [aliases, valueConverter]] of _.toPairs(SAFARI_OPTS_ALIASES_MAP)) {\n    if (!_.has(opts, name)) {\n      continue;\n    }\n\n    for (const alias of aliases) {\n      safariSettings[alias] = valueConverter(opts[name]);\n    }\n  }\n  if (_.isEmpty(safariSettings)) {\n    return false;\n  }\n\n  log.debug(`About to update Safari preferences: ${JSON.stringify(safariSettings)}`);\n  await sim.updateSafariSettings(safariSettings);\n  return true;\n}\n\n/**\n * Changes Simulator localization preferences\n *\n * @param {*} sim Simulator instance\n * @param {object} opts Session capabilities\n * @returns {boolean} True if preferences were changed\n */\nasync function setLocalizationPrefs (sim, opts = {}) {\n  const {\n    language,\n    locale,\n    calendarFormat,\n  } = opts;\n  const l10nConfig = {};\n  if (language) {\n    l10nConfig.language = {name: language};\n  }\n  if (locale) {\n    l10nConfig.locale = {name: locale};\n    if (calendarFormat) {\n      l10nConfig.locale.calendar = calendarFormat;\n    }\n  }\n  if (_.isEmpty(l10nConfig)) {\n    return false;\n  }\n\n  log.debug(`About to update localization preferences: ${JSON.stringify(l10nConfig)}`);\n  await sim.configureLocalization(l10nConfig);\n  return true;\n}\n\n\nexport {\n  createSim, getExistingSim, runSimulatorReset, installToSimulator,\n  shutdownSimulator, shutdownOtherSimulators, setSafariPrefs, setLocalizationPrefs\n};\n"],"mappings":"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"}