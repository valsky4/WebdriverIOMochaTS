{"version":3,"file":"utils.js","names":["_bluebird","_interopRequireDefault","require","_appiumIosDevice","_support","_path","_teen_process","_appiumXcode","_lodash","_logger","_iosGenericSimulators","_url","_os","_semver","_driver","DEFAULT_TIMEOUT_KEY","exports","XCTEST_LOG_FILES_PATTERNS","XCTEST_LOGS_CACHE_FOLDER_PREFIX","detectUdid","log","debug","udids","utilities","getConnectedDevices","_","isEmpty","Error","udid","last","length","warn","join","getAndCheckXcodeVersion","version","xcode","getVersion","err","errorAndThrow","message","versionFloat","versionString","getAndCheckIosSdkVersion","getMaxIOSSDK","getGenericSimulatorForIosVersion","platformVersion","deviceName","genericSimulators","iosGenericSimulators","result","compareVersions","simOne","simTwo","util","platformVersionFromList","iosSimulator","sort","translateDeviceName","deviceNameTranslated","toLowerCase","trim","clearLogs","locations","cleanupPromises","location","fs","exists","push","size","stdout","exec","split","ign","rimraf","B","all","derivedDataCleanupMarkers","Map","markSystemFilesForCleanup","wda","retrieveDerivedDataPath","logsRoot","path","resolve","markersCount","has","get","set","clearSystemFiles","info","globPattern","os","tmpdir","dstFolders","glob","dstFolder","scheduledFilesCount","walkDir","itemPath","isDir","fileName","basename","some","p","test","unlink","catch","e","finally","pluralize","checkAppPresent","app","getDriverInfo","stat","__dirname","built","mtime","getTime","pkg","__filename","includes","normalizeCommandTimeouts","value","isNaN","toInteger","JSON","parse","isPlainObject","cmd","timeout","toPairs","isInteger","printUser","getPIDsListeningOnPort","port","filteringFunc","isFunction","filter","x","encodeBase64OrUpload","localPath","remotePath","uploadOptions","toReadableSizeString","toInMemoryBase64","toString","user","pass","method","headers","fileFieldName","formFields","options","auth","net","uploadFile","removeAllSessionWebSocketHandlers","server","sessionId","getWebSocketHandlers","activeHandlers","pathname","keys","removeWebSocketHandler","isLocalHost","urlString","hostname","url","normalizePlatformVersion","originalVersion","normalizedVersion","semver","coerce","major","minor","requireArgs","argNames","opts","argName","isArray","errors","InvalidArgumentError"],"sources":["../../lib/utils.js"],"sourcesContent":["import B from 'bluebird';\nimport { utilities } from 'appium-ios-device';\nimport { fs, util, net } from 'appium/support';\nimport path from 'path';\nimport { exec } from 'teen_process';\nimport xcode from 'appium-xcode';\nimport _ from 'lodash';\nimport log from './logger';\nimport iosGenericSimulators from './ios-generic-simulators';\nimport url from 'url';\nimport os from 'os';\nimport semver from 'semver';\nimport { errors } from 'appium/driver';\n\n\nconst DEFAULT_TIMEOUT_KEY = 'default';\nconst XCTEST_LOG_FILES_PATTERNS = [\n  /^Session-WebDriverAgentRunner.*\\.log$/i,\n  /^StandardOutputAndStandardError\\.txt$/i,\n];\nconst XCTEST_LOGS_CACHE_FOLDER_PREFIX = 'com.apple.dt.XCTest';\n\n\nasync function detectUdid () {\n  log.debug('Auto-detecting real device udid...');\n  const udids = await utilities.getConnectedDevices();\n  if (_.isEmpty(udids)) {\n    throw new Error('No device is connected to the host');\n  }\n  const udid = _.last(udids);\n  if (udids.length > 1) {\n    log.warn(`Multiple devices found: ${udids.join(', ')}`);\n    log.warn(`Choosing '${udid}'. If this is wrong, manually set with 'udid' desired capability`);\n  }\n  log.debug(`Detected real device udid: '${udid}'`);\n  return udid;\n}\n\nasync function getAndCheckXcodeVersion () {\n  let version;\n  try {\n    version = await xcode.getVersion(true);\n  } catch (err) {\n    log.debug(err);\n    log.errorAndThrow(`Could not determine Xcode version: ${err.message}`);\n  }\n\n  // we do not support Xcodes < 7.3,\n  if (version.versionFloat < 7.3) {\n    log.errorAndThrow(`Xcode version '${version.versionString}'. Support for ` +\n                      `Xcode ${version.versionString} is not supported. ` +\n                      `Please upgrade to version 7.3 or higher`);\n  }\n  return version;\n}\n\nasync function getAndCheckIosSdkVersion () {\n  try {\n    return await xcode.getMaxIOSSDK();\n  } catch (err) {\n    log.errorAndThrow(`Could not determine iOS SDK version: ${err.message}`);\n  }\n}\n\n/**\n * Get the generic simulator for a given IOS version and device type (iPhone, iPad)\n *\n * @param {string|number} platformVersion IOS version. e.g.) 13.0\n * @param {string} deviceName Type of IOS device. Can be iPhone, iPad (possibly more in the future)\n *\n * @returns {string?} Generic iPhone or iPad simulator (if applicable)\n */\nfunction getGenericSimulatorForIosVersion (platformVersion, deviceName) {\n  const genericSimulators = iosGenericSimulators[deviceName];\n  if (!genericSimulators) {\n    return null;\n  }\n\n  // Find the highest iOS version in the list that is below the provided version\n  let result = null;\n  const compareVersions = ([simOne], [simTwo]) => util.compareVersions(simOne, '<', simTwo) ? -1 : 1;\n  for (const [platformVersionFromList, iosSimulator] of genericSimulators.sort(compareVersions)) {\n    if (util.compareVersions(platformVersionFromList, '>', platformVersion)) {\n      break;\n    }\n    result = iosSimulator;\n  }\n  return result;\n}\n\nfunction translateDeviceName (platformVersion, deviceName) {\n  if (!deviceName) {\n    return deviceName;\n  }\n  const deviceNameTranslated = getGenericSimulatorForIosVersion(platformVersion, `${deviceName}`.toLowerCase().trim());\n  if (!deviceNameTranslated) {\n    return deviceName;\n  }\n\n  log.debug(`Changing deviceName from '${deviceName}' to '${deviceNameTranslated}'`);\n  return deviceNameTranslated;\n}\n\nasync function clearLogs (locations) {\n  log.debug('Clearing log files');\n  const cleanupPromises = [];\n  for (const location of locations) {\n    if (!await fs.exists(location)) {\n      continue;\n    }\n\n    cleanupPromises.push((async () => {\n      let size;\n      try {\n        const {stdout} = await exec('du', ['-sh', location]);\n        size = stdout.trim().split(/\\s+/)[0];\n      } catch (ign) {}\n      try {\n        log.debug(`Deleting '${location}'. ${size ? `Freeing ${size}.` : ''}`);\n        await fs.rimraf(location);\n      } catch (err) {\n        log.warn(`Unable to delete '${location}': ${err.message}`);\n      }\n    })());\n  }\n  if (!_.isEmpty(cleanupPromises)) {\n    await B.all(cleanupPromises);\n  }\n  log.debug('Finished clearing log files');\n}\n\n// This map contains derived data logs folders as keys\n// and values are the count of times the particular\n// folder has been scheduled for removal\nconst derivedDataCleanupMarkers = new Map();\n\nasync function markSystemFilesForCleanup (wda) {\n  if (!wda || !await wda.retrieveDerivedDataPath()) {\n    log.warn('No WebDriverAgent derived data available, so unable to mark system files for cleanup');\n    return;\n  }\n\n  const logsRoot = path.resolve(await wda.retrieveDerivedDataPath(), 'Logs');\n  let markersCount = 0;\n  if (derivedDataCleanupMarkers.has(logsRoot)) {\n    markersCount = derivedDataCleanupMarkers.get(logsRoot);\n  }\n  derivedDataCleanupMarkers.set(logsRoot, ++markersCount);\n}\n\nasync function clearSystemFiles (wda) {\n  // only want to clear the system files for the particular WDA xcode run\n  if (!wda || !await wda.retrieveDerivedDataPath()) {\n    log.warn('No WebDriverAgent derived data available, so unable to clear system files');\n    return;\n  }\n\n  const logsRoot = path.resolve(await wda.retrieveDerivedDataPath(), 'Logs');\n  if (derivedDataCleanupMarkers.has(logsRoot)) {\n    let markersCount = derivedDataCleanupMarkers.get(logsRoot);\n    derivedDataCleanupMarkers.set(logsRoot, --markersCount);\n    if (markersCount > 0) {\n      log.info(`Not cleaning '${logsRoot}' folder, because the other session does not expect it to be cleaned`);\n      return;\n    }\n  }\n  derivedDataCleanupMarkers.set(logsRoot, 0);\n\n  // Cleaning up big temporary files created by XCTest: https://github.com/appium/appium/issues/9410\n  const globPattern = `${os.tmpdir()}/${XCTEST_LOGS_CACHE_FOLDER_PREFIX}*/`;\n  const dstFolders = await fs.glob(globPattern);\n  if (_.isEmpty(dstFolders)) {\n    log.debug(`Did not find the temporary XCTest logs root at '${globPattern}'`);\n  } else {\n    // perform the cleanup asynchronously\n    for (const dstFolder of dstFolders) {\n      let scheduledFilesCount = 0;\n      B.resolve(fs.walkDir(dstFolder, true, (itemPath, isDir) => {\n        if (isDir) {\n          return;\n        }\n        const fileName = path.basename(itemPath);\n        if (!XCTEST_LOG_FILES_PATTERNS.some((p) => p.test(fileName))) {\n          return;\n        }\n\n        // delete the file asynchronously\n        // eslint-disable-next-line promise/prefer-await-to-then\n        fs.unlink(itemPath).catch((e) => {\n          log.info(e.message);\n        });\n        scheduledFilesCount++;\n        // eslint-disable-next-line promise/prefer-await-to-then\n      })).finally(() => {\n        if (scheduledFilesCount > 0) {\n          log.info(`Scheduled ${scheduledFilesCount} temporary XCTest log ` +\n            `${util.pluralize('file', scheduledFilesCount)} for cleanup in '${dstFolder}'`);\n        }\n        // eslint-disable-next-line promise/prefer-await-to-then\n      }).catch((e) => {\n        log.info(e.message);\n      });\n    }\n    log.debug(`Started background XCTest logs cleanup in '${dstFolders}'`);\n  }\n\n  if (await fs.exists(logsRoot)) {\n    log.info(`Cleaning test logs in '${logsRoot}' folder`);\n    await clearLogs([logsRoot]);\n    return;\n  }\n  log.info(`There is no ${logsRoot} folder, so not cleaning files`);\n}\n\nasync function checkAppPresent (app) {\n  log.debug(`Checking whether app '${app}' is actually present on file system`);\n  if (!(await fs.exists(app))) {\n    log.errorAndThrow(`Could not find app at '${app}'`);\n  }\n  log.debug('App is present');\n}\n\nasync function getDriverInfo () {\n  const stat = await fs.stat(path.resolve(__dirname, '..'));\n  const built = stat.mtime.getTime();\n\n  // get the package.json and the version from it\n  const pkg = require(__filename.includes('build/lib/utils') ? '../../package.json' : '../package.json');\n  const version = pkg.version;\n\n  return {\n    built,\n    version,\n  };\n}\n\nfunction normalizeCommandTimeouts (value) {\n  // The value is normalized already\n  if (typeof value !== 'string') {\n    return value;\n  }\n\n  let result = {};\n  // Use as default timeout for all commands if a single integer value is provided\n  if (!isNaN(value)) {\n    result[DEFAULT_TIMEOUT_KEY] = _.toInteger(value);\n    return result;\n  }\n\n  // JSON object has been provided. Let's parse it\n  try {\n    result = JSON.parse(value);\n    if (!_.isPlainObject(result)) {\n      throw new Error();\n    }\n  } catch (err) {\n    log.errorAndThrow(`\"commandTimeouts\" capability should be a valid JSON object. \"${value}\" was given instead`);\n  }\n  for (let [cmd, timeout] of _.toPairs(result)) {\n    if (!_.isInteger(timeout) || timeout <= 0) {\n      log.errorAndThrow(`The timeout for \"${cmd}\" should be a valid natural number of milliseconds. \"${timeout}\" was given instead`);\n    }\n  }\n  return result;\n}\n\nasync function printUser () {\n  try {\n    let {stdout} = await exec('whoami');\n    log.debug(`Current user: '${stdout.trim()}'`);\n  } catch (err) {\n    log.debug(`Unable to get username running server: ${err.message}`);\n  }\n}\n\n/**\n * Get the IDs of processes listening on the particular system port.\n * It is also possible to apply additional filtering based on the\n * process command line.\n *\n * @param {string|number} port - The port number.\n * @param {?Function} filteringFunc - Optional lambda function, which\n *                                    receives command line string of the particular process\n *                                    listening on given port, and is expected to return\n *                                    either true or false to include/exclude the corresponding PID\n *                                    from the resulting array.\n * @returns {Array<string>} - the list of matched process ids.\n */\nasync function getPIDsListeningOnPort (port, filteringFunc = null) {\n  const result = [];\n  try {\n    // This only works since Mac OS X El Capitan\n    const {stdout} = await exec('lsof', ['-ti', `tcp:${port}`]);\n    result.push(...(stdout.trim().split(/\\n+/)));\n  } catch (e) {\n    return result;\n  }\n\n  if (!_.isFunction(filteringFunc)) {\n    return result;\n  }\n  return await B.filter(result, async (x) => {\n    const {stdout} = await exec('ps', ['-p', x, '-o', 'command']);\n    return await filteringFunc(stdout);\n  });\n}\n\n/**\n * @typedef {Object} UploadOptions\n *\n * @property {?string} user - The name of the user for the remote authentication. Only works if `remotePath` is provided.\n * @property {?string} pass - The password for the remote authentication. Only works if `remotePath` is provided.\n * @property {?string} method - The http multipart upload method name. The 'PUT' one is used by default.\n *                              Only works if `remotePath` is provided.\n * @property {?Object} headers - Additional headers mapping for multipart http(s) uploads\n * @property {?string} fileFieldName [file] - The name of the form field, where the file content BLOB should be stored for\n *                                            http(s) uploads\n * @property {?Object|Array<Pair>} formFields - Additional form fields for multipart http(s) uploads\n */\n\n\n/**\n * Encodes the given local file to base64 and returns the resulting string\n * or uploads it to a remote server using http/https or ftp protocols\n * if `remotePath` is set\n *\n * @param {string} localPath - The path to an existing local file\n * @param {?string} remotePath - The path to the remote location, where\n *                               this file should be uploaded\n * @param {?UploadOptions} uploadOptions - Set of upload options\n * @returns {string} Either an empty string if the upload was successful or\n * base64-encoded file representation if `remotePath` is falsy\n */\nasync function encodeBase64OrUpload (localPath, remotePath = null, uploadOptions = {}) {\n  if (!await fs.exists(localPath)) {\n    log.errorAndThrow(`The file at '${localPath}' does not exist or is not accessible`);\n  }\n\n  if (_.isEmpty(remotePath)) {\n    const {size} = await fs.stat(localPath);\n    log.debug(`The size of the file is ${util.toReadableSizeString(size)}`);\n    return (await util.toInMemoryBase64(localPath)).toString();\n  }\n\n  const {user, pass, method, headers, fileFieldName, formFields} = uploadOptions;\n  const options = {\n    method: method || 'PUT',\n    headers,\n    fileFieldName,\n    formFields,\n  };\n  if (user && pass) {\n    options.auth = {user, pass};\n  }\n  await net.uploadFile(localPath, remotePath, options);\n  return '';\n}\n\n/**\n * Stops and removes all web socket handlers that are listening\n * in scope of the currect session.\n *\n * @param {Object} server - The instance of NodeJs HTTP server,\n * which hosts Appium\n * @param {string} sessionId - The id of the current session\n */\nasync function removeAllSessionWebSocketHandlers (server, sessionId) {\n  if (!server || !_.isFunction(server.getWebSocketHandlers)) {\n    return;\n  }\n\n  const activeHandlers = await server.getWebSocketHandlers(sessionId);\n  for (const pathname of _.keys(activeHandlers)) {\n    await server.removeWebSocketHandler(pathname);\n  }\n}\n\n/**\n * Returns true if the urlString is localhost\n * @param {?string} urlString\n * @returns {boolean} Return true if the urlString is localhost\n */\nfunction isLocalHost (urlString) {\n  try {\n    const {hostname} = url.parse(urlString);\n    return ['localhost', '127.0.0.1', '::1', '::ffff:127.0.0.1'].includes(hostname);\n  } catch (ign) {\n    log.warn(`'${urlString}' cannot be parsed as a valid URL`);\n  }\n  return false;\n}\n\n/**\n * Normalizes platformVersion to a valid iOS version string\n *\n * @param {string} originalVersion - Loose version number, that can be parsed by semver\n * @return {string} iOS version number in <major>.<minor> format\n * @throws {Error} if the version number cannot be parsed\n */\nfunction normalizePlatformVersion (originalVersion) {\n  const normalizedVersion = semver.coerce(originalVersion);\n  if (!normalizedVersion) {\n    throw new Error(`The platform version '${originalVersion}' should be a valid version number`);\n  }\n  return `${normalizedVersion.major}.${normalizedVersion.minor}`;\n}\n\n/**\n  * Assert the presence of particular keys in the given object\n  *\n  * @param {string|Array<string>} argNames one or more key names\n  * @param {Object} opts the object to check\n  * @returns {Object} the same given object\n  */\nfunction requireArgs (argNames, opts = {}) {\n  for (const argName of (_.isArray(argNames) ? argNames : [argNames])) {\n    if (!_.has(opts, argName)) {\n      throw new errors.InvalidArgumentError(`'${argName}' argument must be provided`);\n    }\n  }\n  return opts;\n}\n\n\nexport {\n  detectUdid, getAndCheckXcodeVersion, getAndCheckIosSdkVersion,\n  checkAppPresent, getDriverInfo,\n  clearSystemFiles, translateDeviceName, normalizeCommandTimeouts,\n  DEFAULT_TIMEOUT_KEY, markSystemFilesForCleanup, printUser,\n  getPIDsListeningOnPort, encodeBase64OrUpload, removeAllSessionWebSocketHandlers,\n  isLocalHost, normalizePlatformVersion, clearLogs, requireArgs\n};\n"],"mappings":"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"}