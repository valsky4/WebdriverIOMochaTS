"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.IDB_EXECUTABLE = exports.IDB_COMPANION_EXECUTABLE = exports.DEFAULT_IDB_PORT = exports.DEFAULT_IDB_EXEC_TIMEOUT = exports.DEFAULT_COMPANION_PORT = void 0;
exports.convertToIDBEnv = convertToIDBEnv;
exports.fixOutputToArray = fixOutputToArray;
exports.getPids = getPids;
require("source-map-support/register");
var _lodash = _interopRequireDefault(require("lodash"));
var _teen_process = require("teen_process");
const DEFAULT_IDB_EXEC_TIMEOUT = 20000;
exports.DEFAULT_IDB_EXEC_TIMEOUT = DEFAULT_IDB_EXEC_TIMEOUT;
const DEFAULT_IDB_PORT = 9889;
exports.DEFAULT_IDB_PORT = DEFAULT_IDB_PORT;
const IDB_EXECUTABLE = 'idb';
exports.IDB_EXECUTABLE = IDB_EXECUTABLE;
const IDB_COMPANION_EXECUTABLE = 'idb_companion';
exports.IDB_COMPANION_EXECUTABLE = IDB_COMPANION_EXECUTABLE;
const DEFAULT_COMPANION_PORT = 10880;
exports.DEFAULT_COMPANION_PORT = DEFAULT_COMPANION_PORT;
const IDB_ENV_PREFIX = 'IDB_';
async function getPids(pattern, opts = {}) {
  const {
    multi = true,
    ignoreCase = true
  } = opts;
  const args = [`-${ignoreCase ? 'i' : ''}f${multi ? '' : 'n'}`, pattern];
  try {
    const {
      stdout
    } = await (0, _teen_process.exec)('pgrep', args);
    const result = stdout.split('\n').filter(Number).map(x => `${x}`);
    return multi ? result : _lodash.default.isEmpty(result) ? [] : _lodash.default.first(result);
  } catch (err) {
    return [];
  }
}
function convertToIDBEnv(env) {
  if (!_lodash.default.isPlainObject(env) || _lodash.default.isEmpty(env)) {
    return null;
  }
  return _lodash.default.reduce(env, (result, value, key) => {
    result[IDB_ENV_PREFIX + key] = value;
    return result;
  }, {});
}
function fixOutputToArray(output) {
  if (!_lodash.default.trim(output)) {
    return [];
  }
  return output.split('\n').reduce((acc, x) => {
    try {
      return [...acc, JSON.parse(x)];
    } catch (e) {
      return acc;
    }
  }, []);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJERUZBVUxUX0lEQl9FWEVDX1RJTUVPVVQiLCJERUZBVUxUX0lEQl9QT1JUIiwiSURCX0VYRUNVVEFCTEUiLCJJREJfQ09NUEFOSU9OX0VYRUNVVEFCTEUiLCJERUZBVUxUX0NPTVBBTklPTl9QT1JUIiwiSURCX0VOVl9QUkVGSVgiLCJnZXRQaWRzIiwicGF0dGVybiIsIm9wdHMiLCJtdWx0aSIsImlnbm9yZUNhc2UiLCJhcmdzIiwic3Rkb3V0IiwiZXhlYyIsInJlc3VsdCIsInNwbGl0IiwiZmlsdGVyIiwiTnVtYmVyIiwibWFwIiwieCIsIl8iLCJpc0VtcHR5IiwiZmlyc3QiLCJlcnIiLCJjb252ZXJ0VG9JREJFbnYiLCJlbnYiLCJpc1BsYWluT2JqZWN0IiwicmVkdWNlIiwidmFsdWUiLCJrZXkiLCJmaXhPdXRwdXRUb0FycmF5Iiwib3V0cHV0IiwidHJpbSIsImFjYyIsIkpTT04iLCJwYXJzZSIsImUiXSwic291cmNlcyI6WyIuLi8uLi9saWIvaGVscGVycy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgZXhlYyB9IGZyb20gJ3RlZW5fcHJvY2Vzcyc7XG5cbmNvbnN0IERFRkFVTFRfSURCX0VYRUNfVElNRU9VVCA9IDIwMDAwOyAvLyBpbiBtaWxsaXNlY29uZHNcbmNvbnN0IERFRkFVTFRfSURCX1BPUlQgPSA5ODg5O1xuY29uc3QgSURCX0VYRUNVVEFCTEUgPSAnaWRiJztcbmNvbnN0IElEQl9DT01QQU5JT05fRVhFQ1VUQUJMRSA9ICdpZGJfY29tcGFuaW9uJztcbmNvbnN0IERFRkFVTFRfQ09NUEFOSU9OX1BPUlQgPSAxMDg4MDtcbmNvbnN0IElEQl9FTlZfUFJFRklYID0gJ0lEQl8nO1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IFBpZExvb2t1cE9wdGlvbnNcbiAqXG4gKiBAcHJvcGVydHkgez9ib29sZWFufSBtdWx0aSBbdHJ1ZV0gLSBTZXQgaXQgdG8gdHJ1ZSBpZiBtdWx0aXBsZSBtYXRjaGluZ1xuICogcGlkcyBhcmUgZXhwZWN0ZWQgdG8gYmUgZm91bmQuIE9ubHkgdGhlIG5ld2VzdCBwcm9jZXNzIGlkIGlzIGdvaW5nIHRvXG4gKiBiZSByZXR1cm5lZCBpbnN0ZWFkXG4gKiBAcHJvcGVydHkgez9ib29sZWFufSBpZ25vcmVDYXNlIFt0cnVlXSAtIFNldCBpdCB0byBmYWxzZSB0byBtYWtlIHRoZSBzZWFyY2hcbiAqIGNhc2Utc2Vuc2l0aXZlXG4gKi9cblxuLyoqXG4gKiBHZXQgdGhlIHByb2Nlc3MgaWQgb2YgdGhlIG1vc3QgcmVjZW50IHJ1bm5pbmcgYXBwbGljYXRpb25cbiAqIGhhdmluZyB0aGUgcGFydGljdWxhciBjb21tYW5kIGxpbmUgcGF0dGVybi5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0dGVybiAtIHBncmVwLWNvbXBhdGlibGUgc2VhcmNoIHBhdHRlcm4uXG4gKiBAcGFyYW0gez9QaWRMb29rdXBPcHRpb25zfSBvcHRzXG4gKiBAcmV0dXJuIHtBcnJheTxzdHJpbmc+fSBBbiBhcnJheSBvZiBwcm9jZXNzIGlkcyBhcyBzdHJpbmdzXG4gKiBvciBhbiBlbXB0eSBhcnJheVxuICovXG5hc3luYyBmdW5jdGlvbiBnZXRQaWRzIChwYXR0ZXJuLCBvcHRzID0ge30pIHtcbiAgY29uc3Qge1xuICAgIG11bHRpID0gdHJ1ZSxcbiAgICBpZ25vcmVDYXNlID0gdHJ1ZSxcbiAgfSA9IG9wdHM7XG4gIGNvbnN0IGFyZ3MgPSBbYC0ke2lnbm9yZUNhc2UgPyAnaScgOiAnJ31mJHttdWx0aSA/ICcnIDogJ24nfWAsIHBhdHRlcm5dO1xuICB0cnkge1xuICAgIGNvbnN0IHtzdGRvdXR9ID0gYXdhaXQgZXhlYygncGdyZXAnLCBhcmdzKTtcbiAgICBjb25zdCByZXN1bHQgPSBzdGRvdXQuc3BsaXQoJ1xcbicpXG4gICAgICAuZmlsdGVyKE51bWJlcilcbiAgICAgIC5tYXAoKHgpID0+IGAke3h9YCk7XG4gICAgcmV0dXJuIG11bHRpID8gcmVzdWx0IDogKF8uaXNFbXB0eShyZXN1bHQpID8gW10gOiBfLmZpcnN0KHJlc3VsdCkpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbn1cbi8qKlxuICogQ29udmVydHMgYW4gZW52IG9iamVjdCB0byB0aGUgZm9ybWF0IHdoYXQgSURCIHByb2Nlc3MgZXhwZWN0c1xuICogQHBhcmFtIHtPYmplY3R9IGVudiBUaGUgb2JqZWN0IG9mIGVudmlyb25tZW50IHZhcmlhYmxlc1xuICogQHJldHVybiB7T2JqZWN0fVxuICovXG5mdW5jdGlvbiBjb252ZXJ0VG9JREJFbnYgKGVudikge1xuICBpZiAoIV8uaXNQbGFpbk9iamVjdChlbnYpIHx8IF8uaXNFbXB0eShlbnYpKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIF8ucmVkdWNlKGVudiwgKHJlc3VsdCwgdmFsdWUsIGtleSkgPT4ge1xuICAgIHJlc3VsdFtJREJfRU5WX1BSRUZJWCArIGtleV0gPSB2YWx1ZTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9LCB7fSk7XG59XG5cbi8qKlxuICogU29tZSBpZGIgY29tbWFuZHMgZG9uJ3QgcHJvcGVybHkgZm9ybWF0IHRoZWlyXG4gKiBvdXRwdXQgaWYgYC0tanNvbmAgYXJndW1lbnQgaXMgcHJvdmlkZWQuIFRoaXMgaGVscGVyXG4gKiBmaXhlcyB0aGUgb3JpZ2luYWwgb3V0cHV0LCBzbyBpdCBjYW4gYmUgcmVwcmVzZW50ZWQgYXNcbiAqIGEgdmFsaWQgYXJyYXkuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG91dHB1dCBUaGUgb3JpZ2luYWwgY29tbWFuZCBvdXRwdXRcbiAqIEByZXR1cm5zIHtBcnJheTxvYmplY3Q+fSBBcnJheSBvZiBvYmplY3RzIG9yIGFuIGVtcHR5IGFycmF5XG4gKi9cbmZ1bmN0aW9uIGZpeE91dHB1dFRvQXJyYXkgKG91dHB1dCkge1xuICBpZiAoIV8udHJpbShvdXRwdXQpKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgcmV0dXJuIG91dHB1dC5zcGxpdCgnXFxuJylcbiAgICAucmVkdWNlKChhY2MsIHgpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBbLi4uYWNjLCBKU09OLnBhcnNlKHgpXTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgIH1cbiAgICB9LCBbXSk7XG59XG5cbmV4cG9ydCB7XG4gIERFRkFVTFRfSURCX0VYRUNfVElNRU9VVCwgZ2V0UGlkcywgSURCX0VYRUNVVEFCTEUsXG4gIElEQl9DT01QQU5JT05fRVhFQ1VUQUJMRSwgREVGQVVMVF9JREJfUE9SVCxcbiAgREVGQVVMVF9DT01QQU5JT05fUE9SVCxcbiAgZml4T3V0cHV0VG9BcnJheSwgY29udmVydFRvSURCRW52XG59O1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFFQSxNQUFNQSx3QkFBd0IsR0FBRyxLQUFLO0FBQUM7QUFDdkMsTUFBTUMsZ0JBQWdCLEdBQUcsSUFBSTtBQUFDO0FBQzlCLE1BQU1DLGNBQWMsR0FBRyxLQUFLO0FBQUM7QUFDN0IsTUFBTUMsd0JBQXdCLEdBQUcsZUFBZTtBQUFDO0FBQ2pELE1BQU1DLHNCQUFzQixHQUFHLEtBQUs7QUFBQztBQUNyQyxNQUFNQyxjQUFjLEdBQUcsTUFBTTtBQXFCN0IsZUFBZUMsT0FBTyxDQUFFQyxPQUFPLEVBQUVDLElBQUksR0FBRyxDQUFDLENBQUMsRUFBRTtFQUMxQyxNQUFNO0lBQ0pDLEtBQUssR0FBRyxJQUFJO0lBQ1pDLFVBQVUsR0FBRztFQUNmLENBQUMsR0FBR0YsSUFBSTtFQUNSLE1BQU1HLElBQUksR0FBRyxDQUFFLElBQUdELFVBQVUsR0FBRyxHQUFHLEdBQUcsRUFBRyxJQUFHRCxLQUFLLEdBQUcsRUFBRSxHQUFHLEdBQUksRUFBQyxFQUFFRixPQUFPLENBQUM7RUFDdkUsSUFBSTtJQUNGLE1BQU07TUFBQ0s7SUFBTSxDQUFDLEdBQUcsTUFBTSxJQUFBQyxrQkFBSSxFQUFDLE9BQU8sRUFBRUYsSUFBSSxDQUFDO0lBQzFDLE1BQU1HLE1BQU0sR0FBR0YsTUFBTSxDQUFDRyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQzlCQyxNQUFNLENBQUNDLE1BQU0sQ0FBQyxDQUNkQyxHQUFHLENBQUVDLENBQUMsSUFBTSxHQUFFQSxDQUFFLEVBQUMsQ0FBQztJQUNyQixPQUFPVixLQUFLLEdBQUdLLE1BQU0sR0FBSU0sZUFBQyxDQUFDQyxPQUFPLENBQUNQLE1BQU0sQ0FBQyxHQUFHLEVBQUUsR0FBR00sZUFBQyxDQUFDRSxLQUFLLENBQUNSLE1BQU0sQ0FBRTtFQUNwRSxDQUFDLENBQUMsT0FBT1MsR0FBRyxFQUFFO0lBQ1osT0FBTyxFQUFFO0VBQ1g7QUFDRjtBQU1BLFNBQVNDLGVBQWUsQ0FBRUMsR0FBRyxFQUFFO0VBQzdCLElBQUksQ0FBQ0wsZUFBQyxDQUFDTSxhQUFhLENBQUNELEdBQUcsQ0FBQyxJQUFJTCxlQUFDLENBQUNDLE9BQU8sQ0FBQ0ksR0FBRyxDQUFDLEVBQUU7SUFDM0MsT0FBTyxJQUFJO0VBQ2I7RUFDQSxPQUFPTCxlQUFDLENBQUNPLE1BQU0sQ0FBQ0YsR0FBRyxFQUFFLENBQUNYLE1BQU0sRUFBRWMsS0FBSyxFQUFFQyxHQUFHLEtBQUs7SUFDM0NmLE1BQU0sQ0FBQ1QsY0FBYyxHQUFHd0IsR0FBRyxDQUFDLEdBQUdELEtBQUs7SUFDcEMsT0FBT2QsTUFBTTtFQUNmLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUNSO0FBV0EsU0FBU2dCLGdCQUFnQixDQUFFQyxNQUFNLEVBQUU7RUFDakMsSUFBSSxDQUFDWCxlQUFDLENBQUNZLElBQUksQ0FBQ0QsTUFBTSxDQUFDLEVBQUU7SUFDbkIsT0FBTyxFQUFFO0VBQ1g7RUFFQSxPQUFPQSxNQUFNLENBQUNoQixLQUFLLENBQUMsSUFBSSxDQUFDLENBQ3RCWSxNQUFNLENBQUMsQ0FBQ00sR0FBRyxFQUFFZCxDQUFDLEtBQUs7SUFDbEIsSUFBSTtNQUNGLE9BQU8sQ0FBQyxHQUFHYyxHQUFHLEVBQUVDLElBQUksQ0FBQ0MsS0FBSyxDQUFDaEIsQ0FBQyxDQUFDLENBQUM7SUFDaEMsQ0FBQyxDQUFDLE9BQU9pQixDQUFDLEVBQUU7TUFDVixPQUFPSCxHQUFHO0lBQ1o7RUFDRixDQUFDLEVBQUUsRUFBRSxDQUFDO0FBQ1YifQ==