"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("source-map-support/register");
var _logger = _interopRequireDefault(require("../logger.js"));
var _helpers = require("../helpers");
const appCommands = {};
appCommands.listApps = async function listApps() {
  _logger.default.debug(`Listing the info about installed apps on the device '${this.udid}'`);
  return (0, _helpers.fixOutputToArray)(await this.exec(['list-apps'], ['--json']));
};
appCommands.installApp = async function installApp(appPath) {
  _logger.default.debug(`Installing '${appPath}' to the device '${this.udid}'`);
  await this.exec(['install'], [appPath]);
};
appCommands.launchApp = async function launchApp(bundleId, opts = {}) {
  const {
    foregroundIfRunning = true,
    wait = false
  } = opts;
  _logger.default.debug(`Launching '${bundleId}' on the device '${this.udid}'`);
  const args = [];
  if (foregroundIfRunning) {
    args.push('--foreground-if-running');
  }
  if (!wait) {
    await this.exec(['launch'], [...args, bundleId]);
    return null;
  }
  const processMonitor = this.createSubProcess(['launch'], [...args, '--wait-for', bundleId]);
  await processMonitor.start(0);
  return processMonitor;
};
appCommands.terminateApp = async function terminateApp(bundleId) {
  _logger.default.debug(`Terminating '${bundleId}' on the device '${this.udid}'`);
  await this.exec(['terminate'], [bundleId]);
};
appCommands.uninstallApp = async function uninstallApp(bundleId) {
  _logger.default.debug(`Uninstalling '${bundleId}' from the device '${this.udid}'`);
  await this.exec(['uninstall'], [bundleId]);
};
var _default = appCommands;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJhcHBDb21tYW5kcyIsImxpc3RBcHBzIiwibG9nIiwiZGVidWciLCJ1ZGlkIiwiZml4T3V0cHV0VG9BcnJheSIsImV4ZWMiLCJpbnN0YWxsQXBwIiwiYXBwUGF0aCIsImxhdW5jaEFwcCIsImJ1bmRsZUlkIiwib3B0cyIsImZvcmVncm91bmRJZlJ1bm5pbmciLCJ3YWl0IiwiYXJncyIsInB1c2giLCJwcm9jZXNzTW9uaXRvciIsImNyZWF0ZVN1YlByb2Nlc3MiLCJzdGFydCIsInRlcm1pbmF0ZUFwcCIsInVuaW5zdGFsbEFwcCJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi90b29scy9hcHAtY29tbWFuZHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGxvZyBmcm9tICcuLi9sb2dnZXIuanMnO1xuaW1wb3J0IHsgZml4T3V0cHV0VG9BcnJheSB9IGZyb20gJy4uL2hlbHBlcnMnO1xuXG5jb25zdCBhcHBDb21tYW5kcyA9IHt9O1xuXG4vKipcbiAqIExpc3RzIHRoZSB0YXJnZXRzIGluc3RhbGxlZCBhcHBsaWNhdGlvbnMgYW5kIHRoZWlyIG1ldGFkYXRhLlxuICogRXhhbXBsZSBvdXRwdXQ6XG4gKiB7XCJidW5kbGVfaWRcIjogXCJjb20uYXBwbGUudGVzdC5JbnRlZ3JhdGlvblRlc3RzXzEtUnVubmVyXCIsIFwibmFtZVwiOiBcIkludGVncmF0aW9uVGVzdHNfMS1SdW5uZXJcIiwgXCJpbnN0YWxsX3R5cGVcIjogXCJ1c2VyXCIsIFwiYXJjaGl0ZWN0dXJlc1wiOiBbXCJ4ODZfNjRcIiwgXCJpMzg2XCJdLCBcInByb2Nlc3Nfc3RhdGVcIjogXCJVbmtub3duXCIsIFwiZGVidWdnYWJsZVwiOiBmYWxzZX1cbiAqIHtcImJ1bmRsZV9pZFwiOiBcImNvbS5hcHBsZS5tb2JpbGVzYWZhcmlcIiwgXCJuYW1lXCI6IFwiTW9iaWxlU2FmYXJpXCIsIFwiaW5zdGFsbF90eXBlXCI6IFwic3lzdGVtXCIsIFwiYXJjaGl0ZWN0dXJlc1wiOiBbXCJ4ODZfNjRcIl0sIFwicHJvY2Vzc19zdGF0ZVwiOiBcIlVua25vd25cIiwgXCJkZWJ1Z2dhYmxlXCI6IGZhbHNlfVxuICpcbiAqIEByZXR1cm5zIHtBcnJheTxvYmplY3Q+fVxuICovXG5hcHBDb21tYW5kcy5saXN0QXBwcyA9IGFzeW5jIGZ1bmN0aW9uIGxpc3RBcHBzICgpIHtcbiAgbG9nLmRlYnVnKGBMaXN0aW5nIHRoZSBpbmZvIGFib3V0IGluc3RhbGxlZCBhcHBzIG9uIHRoZSBkZXZpY2UgJyR7dGhpcy51ZGlkfSdgKTtcbiAgcmV0dXJuIGZpeE91dHB1dFRvQXJyYXkoYXdhaXQgdGhpcy5leGVjKFsnbGlzdC1hcHBzJ10sIFsnLS1qc29uJ10pKTtcbn07XG5cbi8qKlxuICogSW5zdGFsbHMgdGhlIGdpdmVuIGFwcGxpY2F0aW9uIHRvIHRoZSBkZXZpY2UgdW5kZXIgdGVzdC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYXBwUGF0aCBGdWxsIHBhdGggdG8gdGhlIC5hcHAgb3IgLmlwYVxuICovXG5hcHBDb21tYW5kcy5pbnN0YWxsQXBwID0gYXN5bmMgZnVuY3Rpb24gaW5zdGFsbEFwcCAoYXBwUGF0aCkge1xuICBsb2cuZGVidWcoYEluc3RhbGxpbmcgJyR7YXBwUGF0aH0nIHRvIHRoZSBkZXZpY2UgJyR7dGhpcy51ZGlkfSdgKTtcbiAgYXdhaXQgdGhpcy5leGVjKFsnaW5zdGFsbCddLCBbYXBwUGF0aF0pO1xufTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBMYXVuY2hPcHRpb25zXG4gKlxuICogQHByb3BlcnR5IHs/Ym9vbGVhbn0gZm9yZWdyb3VuZElmUnVubmluZyBbdHJ1ZV0gLSBJZiBzZXQgdG8gdHJ1ZSB0aGVuXG4gKiB0aGUgbWV0aG9kIGNhbGwgd2lsbCBwdXQgdGhlIGdpdmVuIGFwcCBpbiBmb3JlZ3JvdW5kIGlmIGl0IGlzXG4gKiBhbHJlYWR5IHJ1bm5pbmdcbiAqIEBwcm9wZXJ0eSB7P2Jvb2xlYW59IHdhaXQgW2ZhbHNlXSAtIFNldCBpdCB0byB0cnVlIGlmIHByb2Nlc3NcbiAqIG1vbml0b3JpbmcgaXMgbmVlZGVkLiBTZWUgdGhlIGRlc2NyaXB0aW9uIG9mIHRoZSByZXR1cm5lZCByZXN1bHRcbiAqIGZvciBtb3JlIGRldGFpbHNcbiAqL1xuXG4vKipcbiAqIFN0YXJ0cyBhbiBpbnN0YWxsZWQgYXBwIG9uIHRoZSBkZXZpY2UgdW5kZXIgdGVzdC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYnVuZGxlSWQgQnVuZGxlIGlkZW50aWZpZXIgb2YgdGhlIGFwcGxpY2F0aW9uIHRvIGxhdW5jaC5cbiAqIEBwYXJhbSB7P0xhdW5jaE9wdGlvbnN9IG9wdHNcbiAqIEByZXR1cm5zIHs/U3ViUHJvY2Vzc30gSWYgYG9wdHMud2FpdGAgaXMgc2V0IHRvIHRydWUgdGhlbiBTdWJQcm9jZXNzIGluc3RhbmNlXG4gKiBpcyByZXR1cm5lZCwgd2hpY2ggcmVwcmVzZW50cyB0aGUgZXhlY3V0ZWQgcHJvY2VzcyBtb25pdG9yLiBUaGUgbW9uaXRvclxuICogd2lsbCBiZSB0ZXJtaW5hdGVkIHdoZW4gdGhlIGxhdW5jaGVkIGlzIGNsb3NlZC4gc3Rkb3V0IGFuZCBzdGRlcnIgb2YgdGhlXG4gKiByZW1vdGUgcHJvY2VzcyB3aWxsIGFsc28gYmUgZm9yd2FyZGVkLiBgbnVsbGAgaXMgcmV0dXJuZWQgb3RoZXJ3aXNlLlxuICovXG5hcHBDb21tYW5kcy5sYXVuY2hBcHAgPSBhc3luYyBmdW5jdGlvbiBsYXVuY2hBcHAgKGJ1bmRsZUlkLCBvcHRzID0ge30pIHtcbiAgY29uc3Qge1xuICAgIGZvcmVncm91bmRJZlJ1bm5pbmcgPSB0cnVlLFxuICAgIHdhaXQgPSBmYWxzZSxcbiAgfSA9IG9wdHM7XG4gIGxvZy5kZWJ1ZyhgTGF1bmNoaW5nICcke2J1bmRsZUlkfScgb24gdGhlIGRldmljZSAnJHt0aGlzLnVkaWR9J2ApO1xuICBjb25zdCBhcmdzID0gW107XG4gIGlmIChmb3JlZ3JvdW5kSWZSdW5uaW5nKSB7XG4gICAgYXJncy5wdXNoKCctLWZvcmVncm91bmQtaWYtcnVubmluZycpO1xuICB9XG4gIGlmICghd2FpdCkge1xuICAgIGF3YWl0IHRoaXMuZXhlYyhbJ2xhdW5jaCddLCBbLi4uYXJncywgYnVuZGxlSWRdKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGNvbnN0IHByb2Nlc3NNb25pdG9yID0gdGhpcy5jcmVhdGVTdWJQcm9jZXNzKFxuICAgIFsnbGF1bmNoJ10sXG4gICAgWy4uLmFyZ3MsICctLXdhaXQtZm9yJywgYnVuZGxlSWRdLFxuICApO1xuICBhd2FpdCBwcm9jZXNzTW9uaXRvci5zdGFydCgwKTtcbiAgcmV0dXJuIHByb2Nlc3NNb25pdG9yO1xufTtcblxuLyoqXG4gKiBLaWxscyBhbiBhcHAgd2l0aCB0aGUgZ2l2ZW4gYnVuZGxlIElEXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJ1bmRsZUlkIEJ1bmRsZSBpZGVudGlmaWVyIG9mIHRoZSBhcHBsaWNhdGlvbiB0byB0ZXJtaW5hdGVcbiAqL1xuYXBwQ29tbWFuZHMudGVybWluYXRlQXBwID0gYXN5bmMgZnVuY3Rpb24gdGVybWluYXRlQXBwIChidW5kbGVJZCkge1xuICBsb2cuZGVidWcoYFRlcm1pbmF0aW5nICcke2J1bmRsZUlkfScgb24gdGhlIGRldmljZSAnJHt0aGlzLnVkaWR9J2ApO1xuICBhd2FpdCB0aGlzLmV4ZWMoWyd0ZXJtaW5hdGUnXSwgW2J1bmRsZUlkXSk7XG59O1xuXG4vKipcbiAqIFVuaW5zdGFsbHMgYW4gYXBwIHdpdGggdGhlIGdpdmVuIGJ1bmRsZSBJRFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBidW5kbGVJZCBCdW5kbGUgaWRlbnRpZmllciBvZiB0aGUgYXBwbGljYXRpb24gdG8gdW5pbnN0YWxsXG4gKi9cbmFwcENvbW1hbmRzLnVuaW5zdGFsbEFwcCA9IGFzeW5jIGZ1bmN0aW9uIHVuaW5zdGFsbEFwcCAoYnVuZGxlSWQpIHtcbiAgbG9nLmRlYnVnKGBVbmluc3RhbGxpbmcgJyR7YnVuZGxlSWR9JyBmcm9tIHRoZSBkZXZpY2UgJyR7dGhpcy51ZGlkfSdgKTtcbiAgYXdhaXQgdGhpcy5leGVjKFsndW5pbnN0YWxsJ10sIFtidW5kbGVJZF0pO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgYXBwQ29tbWFuZHM7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7QUFDQTtBQUVBLE1BQU1BLFdBQVcsR0FBRyxDQUFDLENBQUM7QUFVdEJBLFdBQVcsQ0FBQ0MsUUFBUSxHQUFHLGVBQWVBLFFBQVEsR0FBSTtFQUNoREMsZUFBRyxDQUFDQyxLQUFLLENBQUUsd0RBQXVELElBQUksQ0FBQ0MsSUFBSyxHQUFFLENBQUM7RUFDL0UsT0FBTyxJQUFBQyx5QkFBZ0IsRUFBQyxNQUFNLElBQUksQ0FBQ0MsSUFBSSxDQUFDLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0FBQ3JFLENBQUM7QUFPRE4sV0FBVyxDQUFDTyxVQUFVLEdBQUcsZUFBZUEsVUFBVSxDQUFFQyxPQUFPLEVBQUU7RUFDM0ROLGVBQUcsQ0FBQ0MsS0FBSyxDQUFFLGVBQWNLLE9BQVEsb0JBQW1CLElBQUksQ0FBQ0osSUFBSyxHQUFFLENBQUM7RUFDakUsTUFBTSxJQUFJLENBQUNFLElBQUksQ0FBQyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUNFLE9BQU8sQ0FBQyxDQUFDO0FBQ3pDLENBQUM7QUF1QkRSLFdBQVcsQ0FBQ1MsU0FBUyxHQUFHLGVBQWVBLFNBQVMsQ0FBRUMsUUFBUSxFQUFFQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLEVBQUU7RUFDckUsTUFBTTtJQUNKQyxtQkFBbUIsR0FBRyxJQUFJO0lBQzFCQyxJQUFJLEdBQUc7RUFDVCxDQUFDLEdBQUdGLElBQUk7RUFDUlQsZUFBRyxDQUFDQyxLQUFLLENBQUUsY0FBYU8sUUFBUyxvQkFBbUIsSUFBSSxDQUFDTixJQUFLLEdBQUUsQ0FBQztFQUNqRSxNQUFNVSxJQUFJLEdBQUcsRUFBRTtFQUNmLElBQUlGLG1CQUFtQixFQUFFO0lBQ3ZCRSxJQUFJLENBQUNDLElBQUksQ0FBQyx5QkFBeUIsQ0FBQztFQUN0QztFQUNBLElBQUksQ0FBQ0YsSUFBSSxFQUFFO0lBQ1QsTUFBTSxJQUFJLENBQUNQLElBQUksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsR0FBR1EsSUFBSSxFQUFFSixRQUFRLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7RUFDYjtFQUVBLE1BQU1NLGNBQWMsR0FBRyxJQUFJLENBQUNDLGdCQUFnQixDQUMxQyxDQUFDLFFBQVEsQ0FBQyxFQUNWLENBQUMsR0FBR0gsSUFBSSxFQUFFLFlBQVksRUFBRUosUUFBUSxDQUFDLENBQ2xDO0VBQ0QsTUFBTU0sY0FBYyxDQUFDRSxLQUFLLENBQUMsQ0FBQyxDQUFDO0VBQzdCLE9BQU9GLGNBQWM7QUFDdkIsQ0FBQztBQU9EaEIsV0FBVyxDQUFDbUIsWUFBWSxHQUFHLGVBQWVBLFlBQVksQ0FBRVQsUUFBUSxFQUFFO0VBQ2hFUixlQUFHLENBQUNDLEtBQUssQ0FBRSxnQkFBZU8sUUFBUyxvQkFBbUIsSUFBSSxDQUFDTixJQUFLLEdBQUUsQ0FBQztFQUNuRSxNQUFNLElBQUksQ0FBQ0UsSUFBSSxDQUFDLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQ0ksUUFBUSxDQUFDLENBQUM7QUFDNUMsQ0FBQztBQU9EVixXQUFXLENBQUNvQixZQUFZLEdBQUcsZUFBZUEsWUFBWSxDQUFFVixRQUFRLEVBQUU7RUFDaEVSLGVBQUcsQ0FBQ0MsS0FBSyxDQUFFLGlCQUFnQk8sUUFBUyxzQkFBcUIsSUFBSSxDQUFDTixJQUFLLEdBQUUsQ0FBQztFQUN0RSxNQUFNLElBQUksQ0FBQ0UsSUFBSSxDQUFDLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQ0ksUUFBUSxDQUFDLENBQUM7QUFDNUMsQ0FBQztBQUFDLGVBRWFWLFdBQVc7QUFBQSJ9