{"version":3,"file":"app-commands.js","names":["appCommands","listApps","log","debug","udid","fixOutputToArray","exec","installApp","appPath","launchApp","bundleId","opts","foregroundIfRunning","wait","args","push","processMonitor","createSubProcess","start","terminateApp","uninstallApp"],"sources":["../../../lib/tools/app-commands.js"],"sourcesContent":["import log from '../logger.js';\nimport { fixOutputToArray } from '../helpers';\n\nconst appCommands = {};\n\n/**\n * Lists the targets installed applications and their metadata.\n * Example output:\n * {\"bundle_id\": \"com.apple.test.IntegrationTests_1-Runner\", \"name\": \"IntegrationTests_1-Runner\", \"install_type\": \"user\", \"architectures\": [\"x86_64\", \"i386\"], \"process_state\": \"Unknown\", \"debuggable\": false}\n * {\"bundle_id\": \"com.apple.mobilesafari\", \"name\": \"MobileSafari\", \"install_type\": \"system\", \"architectures\": [\"x86_64\"], \"process_state\": \"Unknown\", \"debuggable\": false}\n *\n * @returns {Array<object>}\n */\nappCommands.listApps = async function listApps () {\n  log.debug(`Listing the info about installed apps on the device '${this.udid}'`);\n  return fixOutputToArray(await this.exec(['list-apps'], ['--json']));\n};\n\n/**\n * Installs the given application to the device under test.\n *\n * @param {string} appPath Full path to the .app or .ipa\n */\nappCommands.installApp = async function installApp (appPath) {\n  log.debug(`Installing '${appPath}' to the device '${this.udid}'`);\n  await this.exec(['install'], [appPath]);\n};\n\n/**\n * @typedef {Object} LaunchOptions\n *\n * @property {?boolean} foregroundIfRunning [true] - If set to true then\n * the method call will put the given app in foreground if it is\n * already running\n * @property {?boolean} wait [false] - Set it to true if process\n * monitoring is needed. See the description of the returned result\n * for more details\n */\n\n/**\n * Starts an installed app on the device under test.\n *\n * @param {string} bundleId Bundle identifier of the application to launch.\n * @param {?LaunchOptions} opts\n * @returns {?SubProcess} If `opts.wait` is set to true then SubProcess instance\n * is returned, which represents the executed process monitor. The monitor\n * will be terminated when the launched is closed. stdout and stderr of the\n * remote process will also be forwarded. `null` is returned otherwise.\n */\nappCommands.launchApp = async function launchApp (bundleId, opts = {}) {\n  const {\n    foregroundIfRunning = true,\n    wait = false,\n  } = opts;\n  log.debug(`Launching '${bundleId}' on the device '${this.udid}'`);\n  const args = [];\n  if (foregroundIfRunning) {\n    args.push('--foreground-if-running');\n  }\n  if (!wait) {\n    await this.exec(['launch'], [...args, bundleId]);\n    return null;\n  }\n\n  const processMonitor = this.createSubProcess(\n    ['launch'],\n    [...args, '--wait-for', bundleId],\n  );\n  await processMonitor.start(0);\n  return processMonitor;\n};\n\n/**\n * Kills an app with the given bundle ID\n *\n * @param {string} bundleId Bundle identifier of the application to terminate\n */\nappCommands.terminateApp = async function terminateApp (bundleId) {\n  log.debug(`Terminating '${bundleId}' on the device '${this.udid}'`);\n  await this.exec(['terminate'], [bundleId]);\n};\n\n/**\n * Uninstalls an app with the given bundle ID\n *\n * @param {string} bundleId Bundle identifier of the application to uninstall\n */\nappCommands.uninstallApp = async function uninstallApp (bundleId) {\n  log.debug(`Uninstalling '${bundleId}' from the device '${this.udid}'`);\n  await this.exec(['uninstall'], [bundleId]);\n};\n\nexport default appCommands;\n"],"mappings":";;;;;;;;AAAA;AACA;AAEA,MAAMA,WAAW,GAAG,CAAC,CAAC;AAUtBA,WAAW,CAACC,QAAQ,GAAG,eAAeA,QAAQ,GAAI;EAChDC,eAAG,CAACC,KAAK,CAAE,wDAAuD,IAAI,CAACC,IAAK,GAAE,CAAC;EAC/E,OAAO,IAAAC,yBAAgB,EAAC,MAAM,IAAI,CAACC,IAAI,CAAC,CAAC,WAAW,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC;AACrE,CAAC;AAODN,WAAW,CAACO,UAAU,GAAG,eAAeA,UAAU,CAAEC,OAAO,EAAE;EAC3DN,eAAG,CAACC,KAAK,CAAE,eAAcK,OAAQ,oBAAmB,IAAI,CAACJ,IAAK,GAAE,CAAC;EACjE,MAAM,IAAI,CAACE,IAAI,CAAC,CAAC,SAAS,CAAC,EAAE,CAACE,OAAO,CAAC,CAAC;AACzC,CAAC;AAuBDR,WAAW,CAACS,SAAS,GAAG,eAAeA,SAAS,CAAEC,QAAQ,EAAEC,IAAI,GAAG,CAAC,CAAC,EAAE;EACrE,MAAM;IACJC,mBAAmB,GAAG,IAAI;IAC1BC,IAAI,GAAG;EACT,CAAC,GAAGF,IAAI;EACRT,eAAG,CAACC,KAAK,CAAE,cAAaO,QAAS,oBAAmB,IAAI,CAACN,IAAK,GAAE,CAAC;EACjE,MAAMU,IAAI,GAAG,EAAE;EACf,IAAIF,mBAAmB,EAAE;IACvBE,IAAI,CAACC,IAAI,CAAC,yBAAyB,CAAC;EACtC;EACA,IAAI,CAACF,IAAI,EAAE;IACT,MAAM,IAAI,CAACP,IAAI,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,GAAGQ,IAAI,EAAEJ,QAAQ,CAAC,CAAC;IAChD,OAAO,IAAI;EACb;EAEA,MAAMM,cAAc,GAAG,IAAI,CAACC,gBAAgB,CAC1C,CAAC,QAAQ,CAAC,EACV,CAAC,GAAGH,IAAI,EAAE,YAAY,EAAEJ,QAAQ,CAAC,CAClC;EACD,MAAMM,cAAc,CAACE,KAAK,CAAC,CAAC,CAAC;EAC7B,OAAOF,cAAc;AACvB,CAAC;AAODhB,WAAW,CAACmB,YAAY,GAAG,eAAeA,YAAY,CAAET,QAAQ,EAAE;EAChER,eAAG,CAACC,KAAK,CAAE,gBAAeO,QAAS,oBAAmB,IAAI,CAACN,IAAK,GAAE,CAAC;EACnE,MAAM,IAAI,CAACE,IAAI,CAAC,CAAC,WAAW,CAAC,EAAE,CAACI,QAAQ,CAAC,CAAC;AAC5C,CAAC;AAODV,WAAW,CAACoB,YAAY,GAAG,eAAeA,YAAY,CAAEV,QAAQ,EAAE;EAChER,eAAG,CAACC,KAAK,CAAE,iBAAgBO,QAAS,sBAAqB,IAAI,CAACN,IAAK,GAAE,CAAC;EACtE,MAAM,IAAI,CAACE,IAAI,CAAC,CAAC,WAAW,CAAC,EAAE,CAACI,QAAQ,CAAC,CAAC;AAC5C,CAAC;AAAC,eAEaV,WAAW;AAAA"}