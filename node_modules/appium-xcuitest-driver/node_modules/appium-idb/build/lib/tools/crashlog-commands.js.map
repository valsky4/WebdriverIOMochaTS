{"version":3,"file":"crashlog-commands.js","names":["logCommands","listCrashLogs","opts","bundleId","before","since","log","debug","udid","command","args","push","fixOutputToArray","exec","fetchCrashLog","name","deleteCrashLogs","all"],"sources":["../../../lib/tools/crashlog-commands.js"],"sourcesContent":["import log from '../logger.js';\nimport { fixOutputToArray } from '../helpers';\n\n\nconst logCommands = {};\n\n/**\n * Fetches a list of crash logs present on the target\n *\n * @returns {Array<object>} The list of fetched logs or an empty array\n */\nlogCommands.listCrashLogs = async function listCrashLogs (opts = {}) {\n  const {\n    bundleId,\n    before,\n    since,\n  } = opts;\n  log.debug(`Listing crash logs on the device '${this.udid}'`);\n  const command = ['crash', 'list'];\n  const args = ['--json'];\n  if (bundleId) {\n    args.push('--bundle-id', bundleId);\n  }\n  if (before) {\n    args.push('--before', before);\n  }\n  if (since) {\n    args.push('--since', since);\n  }\n  return fixOutputToArray(await this.exec(command, args));\n};\n\n/**\n * Fetches the crash log with the specified name\n *\n * @param {string} name The name of the log to fetch\n * @returns {string} The content of the log\n */\nlogCommands.fetchCrashLog = async function fetchCrashLog (name) {\n  log.debug(`Fetching the crash log '${name}' from the device '${this.udid}'`);\n  return await this.exec(['crash', 'show'], [name]);\n};\n\n/**\n * @typedef {Object} DeleteCrashLogOptions\n *\n * @property {string} name - If present then only\n * this particular log is going to be deleted\n * @property {string} before - If set then only logs\n * before this date will be deleted\n * @property {string} since - If set then only logs\n * after this date will be deleted\n * @property {boolean} all - If set then all crash logs\n * are going to be deleted\n */\n\n/**\n * Deletes crash logs\n *\n * @param {DeleteCrashLogOptions} opts\n */\nlogCommands.deleteCrashLogs = async function deleteCrashLogs (opts = {}) {\n  const {\n    name,\n    before,\n    since,\n    all,\n  } = opts;\n  log.debug(`Deleting crash logs from the device '${this.udid}'`);\n  const command = ['crash', 'delete'];\n  const args = [];\n  if (before) {\n    args.push('--before', before);\n  }\n  if (since) {\n    args.push('--since', since);\n  }\n  if (all) {\n    args.push('--all');\n  }\n  if (name) {\n    args.push(name);\n  }\n  await this.exec(command, args);\n};\n\nexport default logCommands;\n"],"mappings":";;;;;;;;AAAA;AACA;AAGA,MAAMA,WAAW,GAAG,CAAC,CAAC;AAOtBA,WAAW,CAACC,aAAa,GAAG,eAAeA,aAAa,CAAEC,IAAI,GAAG,CAAC,CAAC,EAAE;EACnE,MAAM;IACJC,QAAQ;IACRC,MAAM;IACNC;EACF,CAAC,GAAGH,IAAI;EACRI,eAAG,CAACC,KAAK,CAAE,qCAAoC,IAAI,CAACC,IAAK,GAAE,CAAC;EAC5D,MAAMC,OAAO,GAAG,CAAC,OAAO,EAAE,MAAM,CAAC;EACjC,MAAMC,IAAI,GAAG,CAAC,QAAQ,CAAC;EACvB,IAAIP,QAAQ,EAAE;IACZO,IAAI,CAACC,IAAI,CAAC,aAAa,EAAER,QAAQ,CAAC;EACpC;EACA,IAAIC,MAAM,EAAE;IACVM,IAAI,CAACC,IAAI,CAAC,UAAU,EAAEP,MAAM,CAAC;EAC/B;EACA,IAAIC,KAAK,EAAE;IACTK,IAAI,CAACC,IAAI,CAAC,SAAS,EAAEN,KAAK,CAAC;EAC7B;EACA,OAAO,IAAAO,yBAAgB,EAAC,MAAM,IAAI,CAACC,IAAI,CAACJ,OAAO,EAAEC,IAAI,CAAC,CAAC;AACzD,CAAC;AAQDV,WAAW,CAACc,aAAa,GAAG,eAAeA,aAAa,CAAEC,IAAI,EAAE;EAC9DT,eAAG,CAACC,KAAK,CAAE,2BAA0BQ,IAAK,sBAAqB,IAAI,CAACP,IAAK,GAAE,CAAC;EAC5E,OAAO,MAAM,IAAI,CAACK,IAAI,CAAC,CAAC,OAAO,EAAE,MAAM,CAAC,EAAE,CAACE,IAAI,CAAC,CAAC;AACnD,CAAC;AAoBDf,WAAW,CAACgB,eAAe,GAAG,eAAeA,eAAe,CAAEd,IAAI,GAAG,CAAC,CAAC,EAAE;EACvE,MAAM;IACJa,IAAI;IACJX,MAAM;IACNC,KAAK;IACLY;EACF,CAAC,GAAGf,IAAI;EACRI,eAAG,CAACC,KAAK,CAAE,wCAAuC,IAAI,CAACC,IAAK,GAAE,CAAC;EAC/D,MAAMC,OAAO,GAAG,CAAC,OAAO,EAAE,QAAQ,CAAC;EACnC,MAAMC,IAAI,GAAG,EAAE;EACf,IAAIN,MAAM,EAAE;IACVM,IAAI,CAACC,IAAI,CAAC,UAAU,EAAEP,MAAM,CAAC;EAC/B;EACA,IAAIC,KAAK,EAAE;IACTK,IAAI,CAACC,IAAI,CAAC,SAAS,EAAEN,KAAK,CAAC;EAC7B;EACA,IAAIY,GAAG,EAAE;IACPP,IAAI,CAACC,IAAI,CAAC,OAAO,CAAC;EACpB;EACA,IAAII,IAAI,EAAE;IACRL,IAAI,CAACC,IAAI,CAACI,IAAI,CAAC;EACjB;EACA,MAAM,IAAI,CAACF,IAAI,CAACJ,OAAO,EAAEC,IAAI,CAAC;AAChC,CAAC;AAAC,eAEaV,WAAW;AAAA"}