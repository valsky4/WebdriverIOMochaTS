"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("source-map-support/register");
var _logger = _interopRequireDefault(require("../logger.js"));
var _lodash = _interopRequireDefault(require("lodash"));
var _support = require("@appium/support");
const interactionCommands = {};
interactionCommands.tap = async function tap(x, y) {
  _logger.default.debug(`Performing tap at (${x}, ${y}) on the device '${this.udid}'`);
  await this.exec(['ui', 'tap'], [x, y]);
};
interactionCommands.pressButton = async function pressButton(name) {
  _logger.default.debug(`Performing button press of '${name}' on the device '${this.udid}'`);
  await this.exec(['ui', 'button'], [name]);
};
interactionCommands.typeText = async function typeText(text) {
  _logger.default.debug(`Typing '${text}' on the device '${this.udid}'`);
  await this.exec(['ui', 'text'], [text]);
};
interactionCommands.pressKeycode = async function pressKeycode(codeOrCodes, opts = {}) {
  const {
    duration
  } = opts;
  _logger.default.debug(`Performing key code(s) ${JSON.stringify(codeOrCodes)} press ` + `on the device '${this.udid}'`);
  const command = ['ui', _lodash.default.isArray(codeOrCodes) ? 'key-sequence' : 'key'];
  const args = [];
  if (_lodash.default.isArray(codeOrCodes)) {
    args.push(...codeOrCodes);
  } else {
    if (_support.util.hasValue(duration)) {
      args.push('--duration', duration);
    }
    args.push(codeOrCodes);
  }
  await this.exec(command, args);
};
var _default = interactionCommands;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJpbnRlcmFjdGlvbkNvbW1hbmRzIiwidGFwIiwieCIsInkiLCJsb2ciLCJkZWJ1ZyIsInVkaWQiLCJleGVjIiwicHJlc3NCdXR0b24iLCJuYW1lIiwidHlwZVRleHQiLCJ0ZXh0IiwicHJlc3NLZXljb2RlIiwiY29kZU9yQ29kZXMiLCJvcHRzIiwiZHVyYXRpb24iLCJKU09OIiwic3RyaW5naWZ5IiwiY29tbWFuZCIsIl8iLCJpc0FycmF5IiwiYXJncyIsInB1c2giLCJ1dGlsIiwiaGFzVmFsdWUiXSwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvdG9vbHMvaW50ZXJhY3Rpb24tY29tbWFuZHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGxvZyBmcm9tICcuLi9sb2dnZXIuanMnO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IHV0aWwgfSBmcm9tICdAYXBwaXVtL3N1cHBvcnQnO1xuXG5cbmNvbnN0IGludGVyYWN0aW9uQ29tbWFuZHMgPSB7fTtcblxuLyoqXG4gKiBUYXBzIGF0IGdpdmVuIGNvb3JkaW5hdGVzXG4gKlxuICogQHBhcmFtIHtudW1iZXJ8c3RyaW5nfSB4IFRhcCBYIGNvb3JkaW5hdGVcbiAqIEBwYXJhbSB7bnVtYmVyfHN0cmluZ30geSBUYXAgWSBjb29yZGluYXRlXG4gKi9cbmludGVyYWN0aW9uQ29tbWFuZHMudGFwID0gYXN5bmMgZnVuY3Rpb24gdGFwICh4LCB5KSB7XG4gIGxvZy5kZWJ1ZyhgUGVyZm9ybWluZyB0YXAgYXQgKCR7eH0sICR7eX0pIG9uIHRoZSBkZXZpY2UgJyR7dGhpcy51ZGlkfSdgKTtcbiAgYXdhaXQgdGhpcy5leGVjKFsndWknLCAndGFwJ10sIFt4LCB5XSk7XG59O1xuXG4vKipcbiAqIFByZXNzZXMgYSBoYXJkd2FyZSBidXR0b24gb24gZGV2aWNlIHVuZGVyIHRlc3RcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBPbmUgb2Yge0FQUExFX1BBWSxIT01FLExPQ0ssU0lERV9CVVRUT04sU0lSSX1cbiAqL1xuaW50ZXJhY3Rpb25Db21tYW5kcy5wcmVzc0J1dHRvbiA9IGFzeW5jIGZ1bmN0aW9uIHByZXNzQnV0dG9uIChuYW1lKSB7XG4gIGxvZy5kZWJ1ZyhgUGVyZm9ybWluZyBidXR0b24gcHJlc3Mgb2YgJyR7bmFtZX0nIG9uIHRoZSBkZXZpY2UgJyR7dGhpcy51ZGlkfSdgKTtcbiAgYXdhaXQgdGhpcy5leGVjKFsndWknLCAnYnV0dG9uJ10sIFtuYW1lXSk7XG59O1xuXG4vKipcbiAqIFR5cGVzIHRoZSBnaXZlbiB0ZXh0IG9uIHRoZSBkZXZpY2UgdW5kZXIgdGVzdFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0IFRoZSB0ZXh0IHRvIHR5cGVcbiAqL1xuaW50ZXJhY3Rpb25Db21tYW5kcy50eXBlVGV4dCA9IGFzeW5jIGZ1bmN0aW9uIHR5cGVUZXh0ICh0ZXh0KSB7XG4gIGxvZy5kZWJ1ZyhgVHlwaW5nICcke3RleHR9JyBvbiB0aGUgZGV2aWNlICcke3RoaXMudWRpZH0nYCk7XG4gIGF3YWl0IHRoaXMuZXhlYyhbJ3VpJywgJ3RleHQnXSwgW3RleHRdKTtcbn07XG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gS2V5Y29kZU9wdHNcbiAqXG4gKiBAcHJvcGVydHkge251bWJlcnxzdHJpbmd9IGR1cmF0aW9uIC0gVGhlIGtleSBwcmVzcyBkdXJhdGlvbiBpbiBmbG9hdCBzZWNvbmRzLlxuICogVGhlIG9wdGlvbiBpcyBpZ25vcmVkIGlmIG11bHRpcGxlIGtleSBjb2RlcyBhcmUgc2V0LlxuICovXG5cbi8qKlxuICogU2VuZCBhIGtleWNvZGUgb3Iga2V5IGNvZGVzIHNlcXVlbmNlIHRvIHRoZSBkZXZpY2UgdW5kZXIgdGVzdFxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfHN0cmluZ3xBcnJheTxzdHJpbmc+fEFycmF5PG51bWJlcj59IGNvZGVPckNvZGVzIFNpbmdsZSBrZXkgY29kZVxuICogb3IgYXJyYXkgb2YgY29kZXNcbiAqIEBwYXJhbSB7S2V5Y29kZU9wdHN9IG9wdHNcbiAqL1xuaW50ZXJhY3Rpb25Db21tYW5kcy5wcmVzc0tleWNvZGUgPSBhc3luYyBmdW5jdGlvbiBwcmVzc0tleWNvZGUgKGNvZGVPckNvZGVzLCBvcHRzID0ge30pIHtcbiAgY29uc3Qge1xuICAgIGR1cmF0aW9uLFxuICB9ID0gb3B0cztcbiAgbG9nLmRlYnVnKGBQZXJmb3JtaW5nIGtleSBjb2RlKHMpICR7SlNPTi5zdHJpbmdpZnkoY29kZU9yQ29kZXMpfSBwcmVzcyBgICtcbiAgICBgb24gdGhlIGRldmljZSAnJHt0aGlzLnVkaWR9J2ApO1xuICBjb25zdCBjb21tYW5kID0gWyd1aScsIF8uaXNBcnJheShjb2RlT3JDb2RlcykgPyAna2V5LXNlcXVlbmNlJyA6ICdrZXknXTtcbiAgY29uc3QgYXJncyA9IFtdO1xuICBpZiAoXy5pc0FycmF5KGNvZGVPckNvZGVzKSkge1xuICAgIGFyZ3MucHVzaCguLi5jb2RlT3JDb2Rlcyk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHV0aWwuaGFzVmFsdWUoZHVyYXRpb24pKSB7XG4gICAgICBhcmdzLnB1c2goJy0tZHVyYXRpb24nLCBkdXJhdGlvbik7XG4gICAgfVxuICAgIGFyZ3MucHVzaChjb2RlT3JDb2Rlcyk7XG4gIH1cbiAgYXdhaXQgdGhpcy5leGVjKGNvbW1hbmQsIGFyZ3MpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgaW50ZXJhY3Rpb25Db21tYW5kcztcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFHQSxNQUFNQSxtQkFBbUIsR0FBRyxDQUFDLENBQUM7QUFROUJBLG1CQUFtQixDQUFDQyxHQUFHLEdBQUcsZUFBZUEsR0FBRyxDQUFFQyxDQUFDLEVBQUVDLENBQUMsRUFBRTtFQUNsREMsZUFBRyxDQUFDQyxLQUFLLENBQUUsc0JBQXFCSCxDQUFFLEtBQUlDLENBQUUsb0JBQW1CLElBQUksQ0FBQ0csSUFBSyxHQUFFLENBQUM7RUFDeEUsTUFBTSxJQUFJLENBQUNDLElBQUksQ0FBQyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsRUFBRSxDQUFDTCxDQUFDLEVBQUVDLENBQUMsQ0FBQyxDQUFDO0FBQ3hDLENBQUM7QUFPREgsbUJBQW1CLENBQUNRLFdBQVcsR0FBRyxlQUFlQSxXQUFXLENBQUVDLElBQUksRUFBRTtFQUNsRUwsZUFBRyxDQUFDQyxLQUFLLENBQUUsK0JBQThCSSxJQUFLLG9CQUFtQixJQUFJLENBQUNILElBQUssR0FBRSxDQUFDO0VBQzlFLE1BQU0sSUFBSSxDQUFDQyxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLEVBQUUsQ0FBQ0UsSUFBSSxDQUFDLENBQUM7QUFDM0MsQ0FBQztBQU9EVCxtQkFBbUIsQ0FBQ1UsUUFBUSxHQUFHLGVBQWVBLFFBQVEsQ0FBRUMsSUFBSSxFQUFFO0VBQzVEUCxlQUFHLENBQUNDLEtBQUssQ0FBRSxXQUFVTSxJQUFLLG9CQUFtQixJQUFJLENBQUNMLElBQUssR0FBRSxDQUFDO0VBQzFELE1BQU0sSUFBSSxDQUFDQyxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLEVBQUUsQ0FBQ0ksSUFBSSxDQUFDLENBQUM7QUFDekMsQ0FBQztBQWdCRFgsbUJBQW1CLENBQUNZLFlBQVksR0FBRyxlQUFlQSxZQUFZLENBQUVDLFdBQVcsRUFBRUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxFQUFFO0VBQ3RGLE1BQU07SUFDSkM7RUFDRixDQUFDLEdBQUdELElBQUk7RUFDUlYsZUFBRyxDQUFDQyxLQUFLLENBQUUsMEJBQXlCVyxJQUFJLENBQUNDLFNBQVMsQ0FBQ0osV0FBVyxDQUFFLFNBQVEsR0FDckUsa0JBQWlCLElBQUksQ0FBQ1AsSUFBSyxHQUFFLENBQUM7RUFDakMsTUFBTVksT0FBTyxHQUFHLENBQUMsSUFBSSxFQUFFQyxlQUFDLENBQUNDLE9BQU8sQ0FBQ1AsV0FBVyxDQUFDLEdBQUcsY0FBYyxHQUFHLEtBQUssQ0FBQztFQUN2RSxNQUFNUSxJQUFJLEdBQUcsRUFBRTtFQUNmLElBQUlGLGVBQUMsQ0FBQ0MsT0FBTyxDQUFDUCxXQUFXLENBQUMsRUFBRTtJQUMxQlEsSUFBSSxDQUFDQyxJQUFJLENBQUMsR0FBR1QsV0FBVyxDQUFDO0VBQzNCLENBQUMsTUFBTTtJQUNMLElBQUlVLGFBQUksQ0FBQ0MsUUFBUSxDQUFDVCxRQUFRLENBQUMsRUFBRTtNQUMzQk0sSUFBSSxDQUFDQyxJQUFJLENBQUMsWUFBWSxFQUFFUCxRQUFRLENBQUM7SUFDbkM7SUFDQU0sSUFBSSxDQUFDQyxJQUFJLENBQUNULFdBQVcsQ0FBQztFQUN4QjtFQUNBLE1BQU0sSUFBSSxDQUFDTixJQUFJLENBQUNXLE9BQU8sRUFBRUcsSUFBSSxDQUFDO0FBQ2hDLENBQUM7QUFBQyxlQUVhckIsbUJBQW1CO0FBQUEifQ==