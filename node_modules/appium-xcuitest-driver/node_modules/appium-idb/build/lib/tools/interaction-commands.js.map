{"version":3,"file":"interaction-commands.js","names":["interactionCommands","tap","x","y","log","debug","udid","exec","pressButton","name","typeText","text","pressKeycode","codeOrCodes","opts","duration","JSON","stringify","command","_","isArray","args","push","util","hasValue"],"sources":["../../../lib/tools/interaction-commands.js"],"sourcesContent":["import log from '../logger.js';\nimport _ from 'lodash';\nimport { util } from '@appium/support';\n\n\nconst interactionCommands = {};\n\n/**\n * Taps at given coordinates\n *\n * @param {number|string} x Tap X coordinate\n * @param {number|string} y Tap Y coordinate\n */\ninteractionCommands.tap = async function tap (x, y) {\n  log.debug(`Performing tap at (${x}, ${y}) on the device '${this.udid}'`);\n  await this.exec(['ui', 'tap'], [x, y]);\n};\n\n/**\n * Presses a hardware button on device under test\n *\n * @param {string} name One of {APPLE_PAY,HOME,LOCK,SIDE_BUTTON,SIRI}\n */\ninteractionCommands.pressButton = async function pressButton (name) {\n  log.debug(`Performing button press of '${name}' on the device '${this.udid}'`);\n  await this.exec(['ui', 'button'], [name]);\n};\n\n/**\n * Types the given text on the device under test\n *\n * @param {string} text The text to type\n */\ninteractionCommands.typeText = async function typeText (text) {\n  log.debug(`Typing '${text}' on the device '${this.udid}'`);\n  await this.exec(['ui', 'text'], [text]);\n};\n\n/**\n * @typedef {Object} KeycodeOpts\n *\n * @property {number|string} duration - The key press duration in float seconds.\n * The option is ignored if multiple key codes are set.\n */\n\n/**\n * Send a keycode or key codes sequence to the device under test\n *\n * @param {number|string|Array<string>|Array<number>} codeOrCodes Single key code\n * or array of codes\n * @param {KeycodeOpts} opts\n */\ninteractionCommands.pressKeycode = async function pressKeycode (codeOrCodes, opts = {}) {\n  const {\n    duration,\n  } = opts;\n  log.debug(`Performing key code(s) ${JSON.stringify(codeOrCodes)} press ` +\n    `on the device '${this.udid}'`);\n  const command = ['ui', _.isArray(codeOrCodes) ? 'key-sequence' : 'key'];\n  const args = [];\n  if (_.isArray(codeOrCodes)) {\n    args.push(...codeOrCodes);\n  } else {\n    if (util.hasValue(duration)) {\n      args.push('--duration', duration);\n    }\n    args.push(codeOrCodes);\n  }\n  await this.exec(command, args);\n};\n\nexport default interactionCommands;\n"],"mappings":";;;;;;;;AAAA;AACA;AACA;AAGA,MAAMA,mBAAmB,GAAG,CAAC,CAAC;AAQ9BA,mBAAmB,CAACC,GAAG,GAAG,eAAeA,GAAG,CAAEC,CAAC,EAAEC,CAAC,EAAE;EAClDC,eAAG,CAACC,KAAK,CAAE,sBAAqBH,CAAE,KAAIC,CAAE,oBAAmB,IAAI,CAACG,IAAK,GAAE,CAAC;EACxE,MAAM,IAAI,CAACC,IAAI,CAAC,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,CAACL,CAAC,EAAEC,CAAC,CAAC,CAAC;AACxC,CAAC;AAODH,mBAAmB,CAACQ,WAAW,GAAG,eAAeA,WAAW,CAAEC,IAAI,EAAE;EAClEL,eAAG,CAACC,KAAK,CAAE,+BAA8BI,IAAK,oBAAmB,IAAI,CAACH,IAAK,GAAE,CAAC;EAC9E,MAAM,IAAI,CAACC,IAAI,CAAC,CAAC,IAAI,EAAE,QAAQ,CAAC,EAAE,CAACE,IAAI,CAAC,CAAC;AAC3C,CAAC;AAODT,mBAAmB,CAACU,QAAQ,GAAG,eAAeA,QAAQ,CAAEC,IAAI,EAAE;EAC5DP,eAAG,CAACC,KAAK,CAAE,WAAUM,IAAK,oBAAmB,IAAI,CAACL,IAAK,GAAE,CAAC;EAC1D,MAAM,IAAI,CAACC,IAAI,CAAC,CAAC,IAAI,EAAE,MAAM,CAAC,EAAE,CAACI,IAAI,CAAC,CAAC;AACzC,CAAC;AAgBDX,mBAAmB,CAACY,YAAY,GAAG,eAAeA,YAAY,CAAEC,WAAW,EAAEC,IAAI,GAAG,CAAC,CAAC,EAAE;EACtF,MAAM;IACJC;EACF,CAAC,GAAGD,IAAI;EACRV,eAAG,CAACC,KAAK,CAAE,0BAAyBW,IAAI,CAACC,SAAS,CAACJ,WAAW,CAAE,SAAQ,GACrE,kBAAiB,IAAI,CAACP,IAAK,GAAE,CAAC;EACjC,MAAMY,OAAO,GAAG,CAAC,IAAI,EAAEC,eAAC,CAACC,OAAO,CAACP,WAAW,CAAC,GAAG,cAAc,GAAG,KAAK,CAAC;EACvE,MAAMQ,IAAI,GAAG,EAAE;EACf,IAAIF,eAAC,CAACC,OAAO,CAACP,WAAW,CAAC,EAAE;IAC1BQ,IAAI,CAACC,IAAI,CAAC,GAAGT,WAAW,CAAC;EAC3B,CAAC,MAAM;IACL,IAAIU,aAAI,CAACC,QAAQ,CAACT,QAAQ,CAAC,EAAE;MAC3BM,IAAI,CAACC,IAAI,CAAC,YAAY,EAAEP,QAAQ,CAAC;IACnC;IACAM,IAAI,CAACC,IAAI,CAACT,WAAW,CAAC;EACxB;EACA,MAAM,IAAI,CAACN,IAAI,CAACW,OAAO,EAAEG,IAAI,CAAC;AAChC,CAAC;AAAC,eAEarB,mBAAmB;AAAA"}