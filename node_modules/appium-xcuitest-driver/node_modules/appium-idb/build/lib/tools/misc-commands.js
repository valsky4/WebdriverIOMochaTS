"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("source-map-support/register");
var _logger = _interopRequireDefault(require("../logger.js"));
var _lodash = _interopRequireDefault(require("lodash"));
const miscCommands = {};
miscCommands.describeDevice = async function describeDevice() {
  _logger.default.debug(`Describing the device '${this.udid}'`);
  const output = await this.exec(['describe'], ['--json']);
  return JSON.parse(output);
};
miscCommands.focusSimulator = async function focusSimulator() {
  _logger.default.debug(`Focusing Simulator '${this.udid}'`);
  await this.exec(['focus']);
};
miscCommands.openUrl = async function openUrl(url) {
  _logger.default.debug(`Opening URL '${url}' on the device '${this.udid}'`);
  await this.exec(['open'], [url]);
};
miscCommands.clearKeychain = async function clearKeychain() {
  _logger.default.debug(`Clearing keychain on the device '${this.udid}'`);
  await this.exec(['clear-keychain']);
};
miscCommands.setLocation = async function setLocation(latitude, longitude) {
  _logger.default.debug(`Setting location (${latitude}, ${longitude}) on the device '${this.udid}'`);
  await this.exec(['set-location'], [latitude, longitude]);
};
miscCommands.approve = async function approve(bundleId, permissions) {
  _logger.default.debug(`Approving permissions (${JSON.stringify(permissions)}) for '${bundleId}' ` + `on the device '${this.udid}'`);
  const command = ['approve'];
  const args = [];
  if (_lodash.default.isArray(permissions)) {
    args.push(...permissions);
  } else {
    args.push(permissions);
  }
  args.push(bundleId);
  await this.exec(command, args);
};
miscCommands.addContacts = async function addContacts(dbPath) {
  _logger.default.debug(`Adding contacts from (${dbPath}) to the device '${this.udid}'`);
  await this.exec(['contacts', 'update'], [dbPath]);
};
var _default = miscCommands;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtaXNjQ29tbWFuZHMiLCJkZXNjcmliZURldmljZSIsImxvZyIsImRlYnVnIiwidWRpZCIsIm91dHB1dCIsImV4ZWMiLCJKU09OIiwicGFyc2UiLCJmb2N1c1NpbXVsYXRvciIsIm9wZW5VcmwiLCJ1cmwiLCJjbGVhcktleWNoYWluIiwic2V0TG9jYXRpb24iLCJsYXRpdHVkZSIsImxvbmdpdHVkZSIsImFwcHJvdmUiLCJidW5kbGVJZCIsInBlcm1pc3Npb25zIiwic3RyaW5naWZ5IiwiY29tbWFuZCIsImFyZ3MiLCJfIiwiaXNBcnJheSIsInB1c2giLCJhZGRDb250YWN0cyIsImRiUGF0aCJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi90b29scy9taXNjLWNvbW1hbmRzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBsb2cgZnJvbSAnLi4vbG9nZ2VyLmpzJztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5cblxuY29uc3QgbWlzY0NvbW1hbmRzID0ge307XG5cbi8qKlxuICogUmV0dXJucyBtZXRhZGF0YSBhYm91dCB0aGUgc3BlY2lmaWVkIHRhcmdldC5cbiAqIE91dHB1dCBleGFtcGxlOlxuICoge1xuICogICB1ZGlkOiAnQTkzOTFCN0EtM0VBRi00NDRFLUI5QTUtMjUwNEEyQzQ4RTZGJyxcbiAqICAgbmFtZTogJ2FwcGl1bS1pZGItdGVzdHMtNjMwQUFCM0QtMjdDRC00M0QyLUJEOTYtNzcyMEM0MkIxRDU0JyxcbiAqICAgdGFyZ2V0X3R5cGU6ICdzaW11bGF0b3InLFxuICogICBzdGF0ZTogJ0Jvb3RlZCcsXG4gKiAgIG9zX3ZlcnNpb246ICdpT1MgMTMuNycsXG4gKiAgIGFyY2hpdGVjdHVyZTogJ3g4Nl82NCcsXG4gKiAgIGNvbXBhbmlvbl9pbmZvOiB7XG4gKiAgICAgdWRpZDogJ0E5MzkxQjdBLTNFQUYtNDQ0RS1COUE1LTI1MDRBMkM0OEU2RicsXG4gKiAgICAgaXNfbG9jYWw6IHRydWUsXG4gKiAgICAgcGlkOiBudWxsLFxuICogICAgIGFkZHJlc3M6IHtcbiAqICAgICAgIHBhdGg6ICcvdG1wL2lkYi9BOTM5MUI3QS0zRUFGLTQ0NEUtQjlBNS0yNTA0QTJDNDhFNkZfY29tcGFuaW9uLnNvY2snXG4gKiAgICAgfSxcbiAqICAgICBtZXRhZGF0YToge31cbiAqICAgfSxcbiAqICAgc2NyZWVuX2RpbWVuc2lvbnM6IHtcbiAqICAgICB3aWR0aDogNzUwLFxuICogICAgIGhlaWdodDogMTMzNCxcbiAqICAgICBkZW5zaXR5OiAyLFxuICogICAgIHdpZHRoX3BvaW50czogMzc1LFxuICogICAgIGhlaWdodF9wb2ludHM6IDY2N1xuICogICB9LFxuICogICBtb2RlbDogbnVsbCxcbiAqICAgZGV2aWNlOiBudWxsLFxuICogICBleHRlbmRlZDoge30sXG4gKiAgIGRpYWdub3N0aWNzOiB7fSxcbiAqICAgbWV0YWRhdGE6IHt9XG4gKiB9XG4gKlxuICogQHJldHVybnMge29iamVjdH0gVGhlIGNvbW1hbmQgb3V0cHV0IHBhcnNlZCB0byBhbiBvYmplY3RcbiAqL1xubWlzY0NvbW1hbmRzLmRlc2NyaWJlRGV2aWNlID0gYXN5bmMgZnVuY3Rpb24gZGVzY3JpYmVEZXZpY2UgKCkge1xuICBsb2cuZGVidWcoYERlc2NyaWJpbmcgdGhlIGRldmljZSAnJHt0aGlzLnVkaWR9J2ApO1xuICBjb25zdCBvdXRwdXQgPSBhd2FpdCB0aGlzLmV4ZWMoWydkZXNjcmliZSddLCBbJy0tanNvbiddKTtcbiAgcmV0dXJuIEpTT04ucGFyc2Uob3V0cHV0KTtcbn07XG5cbi8qKlxuICogQnJpbmdzIGEgc2ltdWxhdG9ycyB3aW5kb3cgdG8gdGhlIGZvcmVncm91bmQuXG4gKi9cbm1pc2NDb21tYW5kcy5mb2N1c1NpbXVsYXRvciA9IGFzeW5jIGZ1bmN0aW9uIGZvY3VzU2ltdWxhdG9yICgpIHtcbiAgbG9nLmRlYnVnKGBGb2N1c2luZyBTaW11bGF0b3IgJyR7dGhpcy51ZGlkfSdgKTtcbiAgYXdhaXQgdGhpcy5leGVjKFsnZm9jdXMnXSk7XG59O1xuXG4vKipcbiAqIE9wZW5zIHRoZSBzcGVjaWZpZWQgVVJMIG9uIHRoZSB0YXJnZXQuXG4gKiBUaGlzIHdvcmtzIGJvdGggd2l0aCB3ZWIgYWRkcmVzc2VzIGFuZCBVUkwgc2NoZW1lcyBwcmVzZW50IG9uIHRoZSB0YXJnZXQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgdXJsIHRvIG9wZW5cbiAqL1xubWlzY0NvbW1hbmRzLm9wZW5VcmwgPSBhc3luYyBmdW5jdGlvbiBvcGVuVXJsICh1cmwpIHtcbiAgbG9nLmRlYnVnKGBPcGVuaW5nIFVSTCAnJHt1cmx9JyBvbiB0aGUgZGV2aWNlICcke3RoaXMudWRpZH0nYCk7XG4gIGF3YWl0IHRoaXMuZXhlYyhbJ29wZW4nXSwgW3VybF0pO1xufTtcblxuLyoqXG4gKiBDbGVhciB0aGUgZW50aXJlIGtleWNoYWluIG9uIFNpbXVsYXRvci5cbiAqL1xubWlzY0NvbW1hbmRzLmNsZWFyS2V5Y2hhaW4gPSBhc3luYyBmdW5jdGlvbiBjbGVhcktleWNoYWluICgpIHtcbiAgbG9nLmRlYnVnKGBDbGVhcmluZyBrZXljaGFpbiBvbiB0aGUgZGV2aWNlICcke3RoaXMudWRpZH0nYCk7XG4gIGF3YWl0IHRoaXMuZXhlYyhbJ2NsZWFyLWtleWNoYWluJ10pO1xufTtcblxuLyoqXG4gKiBPdmVycmlkZXMgYSBzaW11bGF0b3JzIGxvY2F0aW9uXG4gKlxuICogQHBhcmFtIHtzdHJpbmd8bnVtYmVyfSBsYXRpdHVkZSBUaGUgbGF0aXR1ZGUgdmFsdWVcbiAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcn0gbG9uZ2l0dWRlIFRoZSBsb25naXR1ZGUgdmFsdWVcbiAqL1xubWlzY0NvbW1hbmRzLnNldExvY2F0aW9uID0gYXN5bmMgZnVuY3Rpb24gc2V0TG9jYXRpb24gKGxhdGl0dWRlLCBsb25naXR1ZGUpIHtcbiAgbG9nLmRlYnVnKGBTZXR0aW5nIGxvY2F0aW9uICgke2xhdGl0dWRlfSwgJHtsb25naXR1ZGV9KSBvbiB0aGUgZGV2aWNlICcke3RoaXMudWRpZH0nYCk7XG4gIGF3YWl0IHRoaXMuZXhlYyhbJ3NldC1sb2NhdGlvbiddLCBbbGF0aXR1ZGUsIGxvbmdpdHVkZV0pO1xufTtcblxuLyoqXG4gKiBQcm9ncmFtbWF0aWNhbGx5IGFwcHJvdmUgcGVybWlzc2lvbiBmb3IgYW4gYXBwIG9uIFNpbXVsYXRvclxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBidW5kbGVJZCBBcHBsaWNhdGlvbiBpZGVudGlmaWVyIHRvIHNldCB0aGUgcGVybWlzc2lvbnMgZm9yXG4gKiBAcGFyYW0ge3N0cmluZ3xBcnJheTxzdHJpbmc+fSBwZXJtaXNzaW9ucyBUaGUgcGVybWlzc2lvbihzKSB0byBhcHBseS4gQ2FuIGJlXG4gKiBvbmUgb2Yge3Bob3RvcyxjYW1lcmEsY2FtZXJhfVxuICovXG5taXNjQ29tbWFuZHMuYXBwcm92ZSA9IGFzeW5jIGZ1bmN0aW9uIGFwcHJvdmUgKGJ1bmRsZUlkLCBwZXJtaXNzaW9ucykge1xuICBsb2cuZGVidWcoYEFwcHJvdmluZyBwZXJtaXNzaW9ucyAoJHtKU09OLnN0cmluZ2lmeShwZXJtaXNzaW9ucyl9KSBmb3IgJyR7YnVuZGxlSWR9JyBgICtcbiAgICBgb24gdGhlIGRldmljZSAnJHt0aGlzLnVkaWR9J2ApO1xuICBjb25zdCBjb21tYW5kID0gWydhcHByb3ZlJ107XG4gIGNvbnN0IGFyZ3MgPSBbXTtcbiAgaWYgKF8uaXNBcnJheShwZXJtaXNzaW9ucykpIHtcbiAgICBhcmdzLnB1c2goLi4ucGVybWlzc2lvbnMpO1xuICB9IGVsc2Uge1xuICAgIGFyZ3MucHVzaChwZXJtaXNzaW9ucyk7XG4gIH1cbiAgYXJncy5wdXNoKGJ1bmRsZUlkKTtcbiAgYXdhaXQgdGhpcy5leGVjKGNvbW1hbmQsIGFyZ3MpO1xufTtcblxuLyoqXG4gKiBPdmVyd3JpdGUgdGhlIHNpbXVsYXRvcnMgY29udGFjdHMgZGJcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gZGJQYXRoIEZ1bGwgcGF0aCB0byB0aGUgU1FMaXRlIGRiIGNvbnRhaW5pbmcgdGhlIGNvbnRhY3RzXG4gKi9cbm1pc2NDb21tYW5kcy5hZGRDb250YWN0cyA9IGFzeW5jIGZ1bmN0aW9uIGFkZENvbnRhY3RzIChkYlBhdGgpIHtcbiAgbG9nLmRlYnVnKGBBZGRpbmcgY29udGFjdHMgZnJvbSAoJHtkYlBhdGh9KSB0byB0aGUgZGV2aWNlICcke3RoaXMudWRpZH0nYCk7XG4gIGF3YWl0IHRoaXMuZXhlYyhbJ2NvbnRhY3RzJywgJ3VwZGF0ZSddLCBbZGJQYXRoXSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBtaXNjQ29tbWFuZHM7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7QUFDQTtBQUdBLE1BQU1BLFlBQVksR0FBRyxDQUFDLENBQUM7QUFxQ3ZCQSxZQUFZLENBQUNDLGNBQWMsR0FBRyxlQUFlQSxjQUFjLEdBQUk7RUFDN0RDLGVBQUcsQ0FBQ0MsS0FBSyxDQUFFLDBCQUF5QixJQUFJLENBQUNDLElBQUssR0FBRSxDQUFDO0VBQ2pELE1BQU1DLE1BQU0sR0FBRyxNQUFNLElBQUksQ0FBQ0MsSUFBSSxDQUFDLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQztFQUN4RCxPQUFPQyxJQUFJLENBQUNDLEtBQUssQ0FBQ0gsTUFBTSxDQUFDO0FBQzNCLENBQUM7QUFLREwsWUFBWSxDQUFDUyxjQUFjLEdBQUcsZUFBZUEsY0FBYyxHQUFJO0VBQzdEUCxlQUFHLENBQUNDLEtBQUssQ0FBRSx1QkFBc0IsSUFBSSxDQUFDQyxJQUFLLEdBQUUsQ0FBQztFQUM5QyxNQUFNLElBQUksQ0FBQ0UsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDNUIsQ0FBQztBQVFETixZQUFZLENBQUNVLE9BQU8sR0FBRyxlQUFlQSxPQUFPLENBQUVDLEdBQUcsRUFBRTtFQUNsRFQsZUFBRyxDQUFDQyxLQUFLLENBQUUsZ0JBQWVRLEdBQUksb0JBQW1CLElBQUksQ0FBQ1AsSUFBSyxHQUFFLENBQUM7RUFDOUQsTUFBTSxJQUFJLENBQUNFLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUNLLEdBQUcsQ0FBQyxDQUFDO0FBQ2xDLENBQUM7QUFLRFgsWUFBWSxDQUFDWSxhQUFhLEdBQUcsZUFBZUEsYUFBYSxHQUFJO0VBQzNEVixlQUFHLENBQUNDLEtBQUssQ0FBRSxvQ0FBbUMsSUFBSSxDQUFDQyxJQUFLLEdBQUUsQ0FBQztFQUMzRCxNQUFNLElBQUksQ0FBQ0UsSUFBSSxDQUFDLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztBQUNyQyxDQUFDO0FBUUROLFlBQVksQ0FBQ2EsV0FBVyxHQUFHLGVBQWVBLFdBQVcsQ0FBRUMsUUFBUSxFQUFFQyxTQUFTLEVBQUU7RUFDMUViLGVBQUcsQ0FBQ0MsS0FBSyxDQUFFLHFCQUFvQlcsUUFBUyxLQUFJQyxTQUFVLG9CQUFtQixJQUFJLENBQUNYLElBQUssR0FBRSxDQUFDO0VBQ3RGLE1BQU0sSUFBSSxDQUFDRSxJQUFJLENBQUMsQ0FBQyxjQUFjLENBQUMsRUFBRSxDQUFDUSxRQUFRLEVBQUVDLFNBQVMsQ0FBQyxDQUFDO0FBQzFELENBQUM7QUFTRGYsWUFBWSxDQUFDZ0IsT0FBTyxHQUFHLGVBQWVBLE9BQU8sQ0FBRUMsUUFBUSxFQUFFQyxXQUFXLEVBQUU7RUFDcEVoQixlQUFHLENBQUNDLEtBQUssQ0FBRSwwQkFBeUJJLElBQUksQ0FBQ1ksU0FBUyxDQUFDRCxXQUFXLENBQUUsVUFBU0QsUUFBUyxJQUFHLEdBQ2xGLGtCQUFpQixJQUFJLENBQUNiLElBQUssR0FBRSxDQUFDO0VBQ2pDLE1BQU1nQixPQUFPLEdBQUcsQ0FBQyxTQUFTLENBQUM7RUFDM0IsTUFBTUMsSUFBSSxHQUFHLEVBQUU7RUFDZixJQUFJQyxlQUFDLENBQUNDLE9BQU8sQ0FBQ0wsV0FBVyxDQUFDLEVBQUU7SUFDMUJHLElBQUksQ0FBQ0csSUFBSSxDQUFDLEdBQUdOLFdBQVcsQ0FBQztFQUMzQixDQUFDLE1BQU07SUFDTEcsSUFBSSxDQUFDRyxJQUFJLENBQUNOLFdBQVcsQ0FBQztFQUN4QjtFQUNBRyxJQUFJLENBQUNHLElBQUksQ0FBQ1AsUUFBUSxDQUFDO0VBQ25CLE1BQU0sSUFBSSxDQUFDWCxJQUFJLENBQUNjLE9BQU8sRUFBRUMsSUFBSSxDQUFDO0FBQ2hDLENBQUM7QUFPRHJCLFlBQVksQ0FBQ3lCLFdBQVcsR0FBRyxlQUFlQSxXQUFXLENBQUVDLE1BQU0sRUFBRTtFQUM3RHhCLGVBQUcsQ0FBQ0MsS0FBSyxDQUFFLHlCQUF3QnVCLE1BQU8sb0JBQW1CLElBQUksQ0FBQ3RCLElBQUssR0FBRSxDQUFDO0VBQzFFLE1BQU0sSUFBSSxDQUFDRSxJQUFJLENBQUMsQ0FBQyxVQUFVLEVBQUUsUUFBUSxDQUFDLEVBQUUsQ0FBQ29CLE1BQU0sQ0FBQyxDQUFDO0FBQ25ELENBQUM7QUFBQyxlQUVhMUIsWUFBWTtBQUFBIn0=