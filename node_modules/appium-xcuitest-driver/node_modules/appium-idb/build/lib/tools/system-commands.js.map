{"version":3,"file":"system-commands.js","names":["COMPANION_PGREP_PATTERN","udid","IDB_COMPANION_EXECUTABLE","systemCallMethods","connect","opts","onlineTimeout","binaryPaths","binary","IDB_EXECUTABLE","fs","which","e","Error","log","debug","tpExec","connectionError","retryInterval","disconnect","ign","stderr","stdout","info","waitForDevice","executable","path","companion","timeoutMs","timer","timing","Timer","start","lastError","waitForCondition","exec","message","waitMs","intervalMs","getDuration","asSeconds","toFixed","companionPids","getPids","_","isEmpty","length","cmd","args","isArray","cloneDeep","timeout","execTimeout","DEFAULT_IDB_EXEC_TIMEOUT","timeoutCapName","fullArgs","defaultArgs","util","quote","hasValue","code","trim","createSubProcess","command","idbArgs","SubProcess"],"sources":["../../../lib/tools/system-commands.js"],"sourcesContent":["import { fs, util, timing } from '@appium/support';\nimport { exec as tpExec, SubProcess } from 'teen_process';\nimport _ from 'lodash';\nimport { retryInterval, waitForCondition } from 'asyncbox';\nimport {\n  getPids, DEFAULT_IDB_EXEC_TIMEOUT, IDB_EXECUTABLE,\n  IDB_COMPANION_EXECUTABLE,\n} from '../helpers';\nimport log from '../logger.js';\n\n\nconst COMPANION_PGREP_PATTERN = (udid) =>\n  `${IDB_COMPANION_EXECUTABLE}.*--udid[[:space:]]+${udid}`;\n\nconst systemCallMethods = {};\n\n/**\n * @typedef {Object} ConnectOptions\n *\n * @property {?number} onlineTimeout - The number of milliseconds to wait\n * until the device under tests is online. No wait is going to be performed\n * if the timeout is not set. It is recommended to provide this value if\n * `connect` is called right after device is booted, so not all the required\n * device services have been started yet.\n */\n\n/**\n * Initializes idb and companion processes if necessary and\n * assigns path properties. It is mandatory to call this method before\n * one can start using IDB instance,\n *\n * @throws {Error} If mandatory idb executables are not present on the\n * localhost or there was a failure while starting/detecting them\n */\nsystemCallMethods.connect = async function connect (opts = {}) {\n  const {\n    onlineTimeout,\n  } = opts;\n\n  const binaryPaths = {};\n  for (const binary of [IDB_EXECUTABLE, IDB_COMPANION_EXECUTABLE]) {\n    try {\n      binaryPaths[binary] = await fs.which(binary);\n    } catch (e) {\n      throw new Error(`'${binary}' has not been found in PATH. ` +\n        `Is it installed? Read https://www.fbidb.io for more details`);\n    }\n  }\n\n  log.debug(`Starting and connecting companion: '${binaryPaths[IDB_COMPANION_EXECUTABLE]}'`);\n\n  try {\n    try {\n      // idb connect command looks for a running idb_companion process that associates with specified udid.\n      // If not found, the command attempts to start the new idb_companion process that listens on an Unix domain socket.\n      await tpExec(IDB_EXECUTABLE, ['connect', this.udid]);\n    } catch (connectionError) {\n      await retryInterval(2, 100, async () => {\n        await this.disconnect();\n        try {\n          await tpExec(IDB_EXECUTABLE, ['kill']);\n        } catch (ign) {}\n        await tpExec(IDB_EXECUTABLE, ['connect', this.udid]);\n      });\n    }\n  } catch (e) {\n    if (e.stderr || e.stdout) {\n      log.debug(e.stderr || e.stdout);\n    }\n    throw new Error(`Cannot start ${IDB_EXECUTABLE} service for the device '${this.udid}'. ` +\n      `Check the server log for more details.`);\n  }\n  log.info(`Successfully established the connection to ${IDB_EXECUTABLE} service for '${this.udid}'`);\n\n  if (onlineTimeout) {\n    await this.waitForDevice(onlineTimeout);\n  }\n\n  this.executable.path = binaryPaths[IDB_EXECUTABLE];\n  this.companion.path = binaryPaths[IDB_COMPANION_EXECUTABLE];\n};\n\n/**\n * Blocks until the device under test starts responding to idb commands.\n * The device must be booted/online and idb must be already connected for that to happen\n *\n * @param {?number} timeoutMs [10000] - The number of milliseconds to wait\n * until the device under tests is online. The method will return immediately\n * if the timeout is falsy\n * @throws {Error} if the device is not responding within the given timeout\n */\nsystemCallMethods.waitForDevice = async function waitForDevice (timeoutMs = 10000) {\n  if (!timeoutMs) {\n    log.debug('No timeout is provided, so not waiting until the device is online');\n    return;\n  }\n\n  log.debug(`Waiting up to ${timeoutMs}ms for the device to be online`);\n  const timer = new timing.Timer().start();\n  let lastError = null;\n  try {\n    await waitForCondition(async () => {\n      try {\n        await this.exec(['ui', 'describe-all']);\n        return true;\n      } catch (e) {\n        lastError = e.stderr || e.message;\n        return false;\n      }\n    }, {\n      waitMs: timeoutMs,\n      intervalMs: 300,\n    });\n  } catch (e) {\n    throw new Error(`The device '${this.udid}' is not responding to idb requests after ${timeoutMs}ms timeout. ` +\n      `Original error: ${lastError || e.message}`);\n  }\n  log.debug(`The device '${this.udid}' is online and ready to accept idb commands in ` +\n    `${timer.getDuration().asSeconds.toFixed(3)}s`);\n};\n\n/**\n * Performs cleanup of obsolete companion processes\n * The daemon process is left untouched, because killing it might\n * potentially affect other parallel sessions. Nothing\n * is done if no obsolete processes are found.\n */\nsystemCallMethods.disconnect = async function disconnect () {\n  log.debug(`Disconnecting ${IDB_EXECUTABLE} service from '${this.udid}'`);\n\n  try {\n    // idb disconnect just removes the given udid from idb state.\n    // It doesn't kill the idb_companion process associated with the udid.\n    await tpExec(this.executable.path, ['disconnect', this.udid]);\n  } catch (ign) {}\n\n  const companionPids = await getPids(COMPANION_PGREP_PATTERN(this.udid));\n  if (_.isEmpty(companionPids)) {\n    return;\n  }\n\n  log.debug(`Cleaning up ${companionPids.length} obsolete ${IDB_COMPANION_EXECUTABLE} ` +\n    `process${companionPids.length === 1 ? '' : 'es'}`);\n  await tpExec('kill', ['-2', ...companionPids]);\n};\n\n/**\n * Execute the given idb command.\n *\n * @param {Array.<string>} cmd - The actual idb command without arguments/params.\n * @param {Array<string>} args - Optional command arguments.\n * @param {Object} opts - Additional options mapping. See\n *                        {@link https://github.com/appium/node-teen_process}\n *                        for more details.\n * @return {string} - Command's stdout.\n * @throws {Error} If the command returned non-zero exit code.\n */\nsystemCallMethods.exec = async function exec (cmd, args = [], opts = {}) {\n  if (!cmd) {\n    throw new Error('You need to pass in a command to exec()');\n  }\n  cmd = _.isArray(cmd) ? cmd : [cmd];\n\n  opts = _.cloneDeep(opts);\n  // setting default timeout for each command to prevent infinite wait.\n  opts.timeout = opts.timeout || this.execTimeout || DEFAULT_IDB_EXEC_TIMEOUT;\n  opts.timeoutCapName = opts.timeoutCapName || 'execTimeout'; // For error message\n\n  const fullArgs = [...cmd, ...this.executable.defaultArgs, ...args];\n  log.debug(`Running '${this.executable.path} ${util.quote(fullArgs)}'`);\n  try {\n    const {stdout} = await tpExec(this.executable.path, fullArgs, opts);\n    return stdout;\n  } catch (e) {\n    if (util.hasValue(e.code)) {\n      e.message = `Error executing ${IDB_EXECUTABLE}. Original error: '${e.message}'; ` +\n        `Stdout: '${(e.stdout || '').trim()}'; ` +\n        `Stderr: '${(e.stderr || '').trim()}'; ` +\n        `Code: '${e.code}'`;\n    } else {\n      e.message = `Error executing ${IDB_EXECUTABLE}. Original error: '${e.message}'. ` +\n        `Try to increase the ${opts.timeout}ms ${IDB_EXECUTABLE} execution timeout represented by '${opts.timeoutCapName}' capability`;\n    }\n    throw e;\n  }\n};\n\n/**\n * Creates SubProcess instance of idb for background\n * execution.\n *\n * @param {Array<String>} command desired idb command (e.g.: [\"launch\"], [\"xctest\", \"run\", \"ui\"])\n * @param {Array<String>} args additional idb arguments\n * @returns {SubProcess}\n */\nsystemCallMethods.createSubProcess = function createSubProcess (command = [], args = [], opts = {}) {\n  const idbArgs = [...command, ...this.executable.defaultArgs, ...args];\n  log.debug(`Creating ${IDB_EXECUTABLE} subprocess with args: ${util.quote(args)}`);\n  return new SubProcess(this.executable.path, idbArgs, opts);\n};\n\nexport default systemCallMethods;\n"],"mappings":"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"}