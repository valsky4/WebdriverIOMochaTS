"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("source-map-support/register");
var _helpers = require("../helpers");
const xctestCommands = {};
xctestCommands.runXCUITest = async function runXCUITest(testRunnerBundleId, appUnderTestBundleId, xctestBundleId, opts = {}) {
  const uiTestProcess = this.createSubProcess(['xctest', 'run', opts.testType || 'ui'], [...(opts.args || []), xctestBundleId, appUnderTestBundleId, testRunnerBundleId], {
    env: (0, _helpers.convertToIDBEnv)(opts.env)
  });
  await uiTestProcess.start(0);
  return uiTestProcess;
};
xctestCommands.installXCTestBundle = async function installXCTestBundle(xctestBundlePath) {
  const output = await this.exec(['xctest', 'install'], ['--json', xctestBundlePath]);
  try {
    const object = JSON.parse(output);
    return object.installedTestBundleId;
  } catch (e) {
    throw new Error(`Failed to parse '${output}' into json object: ${e.message}`);
  }
};
xctestCommands.listXCTestBundles = async function listXCTestBundles() {
  const output = await this.exec(['xctest', 'list'], ['--json']);
  const bundles = (0, _helpers.fixOutputToArray)(output);
  return bundles.map(bundle => bundle.bundle_id);
};
xctestCommands.listXCTestsInTestBundle = async function listXCTestBundles(xctestBundleId) {
  const output = await this.exec(['xctest', 'list-bundle'], ['--json', xctestBundleId]);
  try {
    return JSON.parse(output);
  } catch (e) {
    throw new Error(`Failed to parse '${output}' into json object: ${e.message}`);
  }
};
var _default = xctestCommands;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ4Y3Rlc3RDb21tYW5kcyIsInJ1blhDVUlUZXN0IiwidGVzdFJ1bm5lckJ1bmRsZUlkIiwiYXBwVW5kZXJUZXN0QnVuZGxlSWQiLCJ4Y3Rlc3RCdW5kbGVJZCIsIm9wdHMiLCJ1aVRlc3RQcm9jZXNzIiwiY3JlYXRlU3ViUHJvY2VzcyIsInRlc3RUeXBlIiwiYXJncyIsImVudiIsImNvbnZlcnRUb0lEQkVudiIsInN0YXJ0IiwiaW5zdGFsbFhDVGVzdEJ1bmRsZSIsInhjdGVzdEJ1bmRsZVBhdGgiLCJvdXRwdXQiLCJleGVjIiwib2JqZWN0IiwiSlNPTiIsInBhcnNlIiwiaW5zdGFsbGVkVGVzdEJ1bmRsZUlkIiwiZSIsIkVycm9yIiwibWVzc2FnZSIsImxpc3RYQ1Rlc3RCdW5kbGVzIiwiYnVuZGxlcyIsImZpeE91dHB1dFRvQXJyYXkiLCJtYXAiLCJidW5kbGUiLCJidW5kbGVfaWQiLCJsaXN0WENUZXN0c0luVGVzdEJ1bmRsZSJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi90b29scy94Y3Rlc3QtY29tbWFuZHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY29udmVydFRvSURCRW52LCBmaXhPdXRwdXRUb0FycmF5IH0gZnJvbSAnLi4vaGVscGVycyc7XG5cbmNvbnN0IHhjdGVzdENvbW1hbmRzID0ge307XG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gUnVuT3B0aW9uc1xuICpcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBlbnYgRW52aXJvbm1lbnQgdmFyaWFibGVzIG1hcCB0byBiZSBwYXNzZWQgdG8gdGhlIHRlc3QgcnVubmVyXG4gKiBAcHJvcGVydHkge0FycmF5fSBhcmdzIEFyZ3VtZW50cyBhcnJheSB0byBiZSBwYXNzZWQgdG8gdGhlIHRlc3QgcnVubmVyXG4gKi9cblxuLyoqXG4gKiBSdW5zIGFuIHhjdWl0ZXN0IG9uIHRoZSBkZXZpY2Ugb3Igc2ltdWxhdG9yXG4gKiBAcGFyYW0ge3N0cmluZ30gdGVzdFJ1bm5lckJ1bmRsZUlkIFRoZSBidW5kbGUgaWQgb2YgdGhlIHRlc3QgcnVubmVyXG4gKiBAcGFyYW0ge3N0cmluZ30gYXBwVW5kZXJUZXN0QnVuZGxlSWQgVGhlIGJ1bmRsZSBpZCBvZiB0aGUgYXBwIHVuZGVyIHRlc3RcbiAqIEBwYXJhbSB7c3RyaW5nfSB4Y3Rlc3RCdW5kbGVJZCBUaGUgYnVuZGxlIGlkIG9mIHRoZSB4Y3Rlc3QgcGFja2FnZVxuICogQHBhcmFtIHtvYmplY3R9IG9wdHMgVGhlIGVudnMgYW5kIGFyZ3MgdG8gYmUgcGFzc2VkIHRvIHRoZSB4Y3VpdGVzdCBydW5uZXJcbiAqXG4gKiBAcmV0dXJucyB7U3ViUHJvY2Vzc31cbiAqL1xueGN0ZXN0Q29tbWFuZHMucnVuWENVSVRlc3QgPSBhc3luYyBmdW5jdGlvbiBydW5YQ1VJVGVzdCAoXG4gIHRlc3RSdW5uZXJCdW5kbGVJZCwgYXBwVW5kZXJUZXN0QnVuZGxlSWQsIHhjdGVzdEJ1bmRsZUlkLCBvcHRzID0ge31cbikge1xuICBjb25zdCB1aVRlc3RQcm9jZXNzID0gdGhpcy5jcmVhdGVTdWJQcm9jZXNzKFxuICAgIFsneGN0ZXN0JywgJ3J1bicsIG9wdHMudGVzdFR5cGUgfHwgJ3VpJ10sXG4gICAgW1xuICAgICAgLi4uKG9wdHMuYXJncyB8fCBbXSksXG4gICAgICB4Y3Rlc3RCdW5kbGVJZCxcbiAgICAgIGFwcFVuZGVyVGVzdEJ1bmRsZUlkLFxuICAgICAgdGVzdFJ1bm5lckJ1bmRsZUlkLFxuICAgIF0sXG4gICAge2VudjogY29udmVydFRvSURCRW52KG9wdHMuZW52KVxuICAgIH0pO1xuICBhd2FpdCB1aVRlc3RQcm9jZXNzLnN0YXJ0KDApO1xuICByZXR1cm4gdWlUZXN0UHJvY2Vzcztcbn07XG5cbi8qKlxuICogSW5zdGFsbHMgYSB4Y3Rlc3QgYnVuZGxlIG9uIHRoZSBkZXZpY2Ugb3Igc2ltdWxhdG9yXG4gKiBAcGFyYW0ge3N0cmluZ30geGN0ZXN0QnVuZGxlUGF0aCB0aGUgcGF0aCBvZiB0aGUgeGN0ZXN0IGJ1bmRsZVxuICogQHJldHVybnMge3N0cmluZ30gdGhlIGJ1bmRsZSBpZCBvZiB4Y3Rlc3QgYnVuZGxlIHRoYXQgd2FzIGluc3RhbGxlZFxuICovXG54Y3Rlc3RDb21tYW5kcy5pbnN0YWxsWENUZXN0QnVuZGxlID0gYXN5bmMgZnVuY3Rpb24gaW5zdGFsbFhDVGVzdEJ1bmRsZSAoeGN0ZXN0QnVuZGxlUGF0aCkge1xuICBjb25zdCBvdXRwdXQgPSBhd2FpdCB0aGlzLmV4ZWMoWyd4Y3Rlc3QnLCAnaW5zdGFsbCddLCBbJy0tanNvbicsIHhjdGVzdEJ1bmRsZVBhdGhdKTtcbiAgdHJ5IHtcbiAgICBjb25zdCBvYmplY3QgPSBKU09OLnBhcnNlKG91dHB1dCk7XG4gICAgcmV0dXJuIG9iamVjdC5pbnN0YWxsZWRUZXN0QnVuZGxlSWQ7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBwYXJzZSAnJHtvdXRwdXR9JyBpbnRvIGpzb24gb2JqZWN0OiAke2UubWVzc2FnZX1gKTtcbiAgfVxufTtcblxuLyoqXG4gKiBMaXN0cyBhbGwgdGhlIHhjdGVzdCBidW5kbGVzIGluc3RhbGxlZCBvbiBhIGRldmljZSBvciBhIHNpbXVsYXRvclxuICovXG54Y3Rlc3RDb21tYW5kcy5saXN0WENUZXN0QnVuZGxlcyA9IGFzeW5jIGZ1bmN0aW9uIGxpc3RYQ1Rlc3RCdW5kbGVzICgpIHtcbiAgY29uc3Qgb3V0cHV0ID0gYXdhaXQgdGhpcy5leGVjKFsneGN0ZXN0JywgJ2xpc3QnXSwgWyctLWpzb24nXSk7XG4gIGNvbnN0IGJ1bmRsZXMgPSBmaXhPdXRwdXRUb0FycmF5KG91dHB1dCk7XG4gIHJldHVybiBidW5kbGVzLm1hcCgoYnVuZGxlKSA9PiBidW5kbGUuYnVuZGxlX2lkKTtcbn07XG5cbi8qKlxuICogTGlzdHMgYWxsIHRoZSB4Y3Rlc3QgYnVuZGxlcyBpbnN0YWxsZWQgb24gYSBkZXZpY2Ugb3IgYSBzaW11bGF0b3JcbiAqIEBwYXJhbSB7c3RyaW5nfSB4Y3Rlc3RCdW5kbGVJZCB0aGUgYnVuZGxlIGlkIG9mIHRoZSB4Y3Rlc3RcbiAqL1xueGN0ZXN0Q29tbWFuZHMubGlzdFhDVGVzdHNJblRlc3RCdW5kbGUgPSBhc3luYyBmdW5jdGlvbiBsaXN0WENUZXN0QnVuZGxlcyAoeGN0ZXN0QnVuZGxlSWQpIHtcbiAgY29uc3Qgb3V0cHV0ID0gYXdhaXQgdGhpcy5leGVjKFsneGN0ZXN0JywgJ2xpc3QtYnVuZGxlJ10sIFsnLS1qc29uJywgeGN0ZXN0QnVuZGxlSWRdKTtcbiAgdHJ5IHtcbiAgICByZXR1cm4gSlNPTi5wYXJzZShvdXRwdXQpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gcGFyc2UgJyR7b3V0cHV0fScgaW50byBqc29uIG9iamVjdDogJHtlLm1lc3NhZ2V9YCk7XG4gIH1cbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgeGN0ZXN0Q29tbWFuZHM7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUVBLE1BQU1BLGNBQWMsR0FBRyxDQUFDLENBQUM7QUFrQnpCQSxjQUFjLENBQUNDLFdBQVcsR0FBRyxlQUFlQSxXQUFXLENBQ3JEQyxrQkFBa0IsRUFBRUMsb0JBQW9CLEVBQUVDLGNBQWMsRUFBRUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxFQUNuRTtFQUNBLE1BQU1DLGFBQWEsR0FBRyxJQUFJLENBQUNDLGdCQUFnQixDQUN6QyxDQUFDLFFBQVEsRUFBRSxLQUFLLEVBQUVGLElBQUksQ0FBQ0csUUFBUSxJQUFJLElBQUksQ0FBQyxFQUN4QyxDQUNFLElBQUlILElBQUksQ0FBQ0ksSUFBSSxJQUFJLEVBQUUsQ0FBQyxFQUNwQkwsY0FBYyxFQUNkRCxvQkFBb0IsRUFDcEJELGtCQUFrQixDQUNuQixFQUNEO0lBQUNRLEdBQUcsRUFBRSxJQUFBQyx3QkFBZSxFQUFDTixJQUFJLENBQUNLLEdBQUc7RUFDOUIsQ0FBQyxDQUFDO0VBQ0osTUFBTUosYUFBYSxDQUFDTSxLQUFLLENBQUMsQ0FBQyxDQUFDO0VBQzVCLE9BQU9OLGFBQWE7QUFDdEIsQ0FBQztBQU9ETixjQUFjLENBQUNhLG1CQUFtQixHQUFHLGVBQWVBLG1CQUFtQixDQUFFQyxnQkFBZ0IsRUFBRTtFQUN6RixNQUFNQyxNQUFNLEdBQUcsTUFBTSxJQUFJLENBQUNDLElBQUksQ0FBQyxDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRUYsZ0JBQWdCLENBQUMsQ0FBQztFQUNuRixJQUFJO0lBQ0YsTUFBTUcsTUFBTSxHQUFHQyxJQUFJLENBQUNDLEtBQUssQ0FBQ0osTUFBTSxDQUFDO0lBQ2pDLE9BQU9FLE1BQU0sQ0FBQ0cscUJBQXFCO0VBQ3JDLENBQUMsQ0FBQyxPQUFPQyxDQUFDLEVBQUU7SUFDVixNQUFNLElBQUlDLEtBQUssQ0FBRSxvQkFBbUJQLE1BQU8sdUJBQXNCTSxDQUFDLENBQUNFLE9BQVEsRUFBQyxDQUFDO0VBQy9FO0FBQ0YsQ0FBQztBQUtEdkIsY0FBYyxDQUFDd0IsaUJBQWlCLEdBQUcsZUFBZUEsaUJBQWlCLEdBQUk7RUFDckUsTUFBTVQsTUFBTSxHQUFHLE1BQU0sSUFBSSxDQUFDQyxJQUFJLENBQUMsQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQztFQUM5RCxNQUFNUyxPQUFPLEdBQUcsSUFBQUMseUJBQWdCLEVBQUNYLE1BQU0sQ0FBQztFQUN4QyxPQUFPVSxPQUFPLENBQUNFLEdBQUcsQ0FBRUMsTUFBTSxJQUFLQSxNQUFNLENBQUNDLFNBQVMsQ0FBQztBQUNsRCxDQUFDO0FBTUQ3QixjQUFjLENBQUM4Qix1QkFBdUIsR0FBRyxlQUFlTixpQkFBaUIsQ0FBRXBCLGNBQWMsRUFBRTtFQUN6RixNQUFNVyxNQUFNLEdBQUcsTUFBTSxJQUFJLENBQUNDLElBQUksQ0FBQyxDQUFDLFFBQVEsRUFBRSxhQUFhLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRVosY0FBYyxDQUFDLENBQUM7RUFDckYsSUFBSTtJQUNGLE9BQU9jLElBQUksQ0FBQ0MsS0FBSyxDQUFDSixNQUFNLENBQUM7RUFDM0IsQ0FBQyxDQUFDLE9BQU9NLENBQUMsRUFBRTtJQUNWLE1BQU0sSUFBSUMsS0FBSyxDQUFFLG9CQUFtQlAsTUFBTyx1QkFBc0JNLENBQUMsQ0FBQ0UsT0FBUSxFQUFDLENBQUM7RUFDL0U7QUFDRixDQUFDO0FBQUMsZUFHYXZCLGNBQWM7QUFBQSJ9