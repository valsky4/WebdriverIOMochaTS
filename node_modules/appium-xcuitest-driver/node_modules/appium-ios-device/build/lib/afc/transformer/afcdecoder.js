"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.AfcDecoder = void 0;
require("source-map-support/register");
var _stream = _interopRequireDefault(require("stream"));
var _protocol = require("../protocol");
class AfcDecoder extends _stream.default.Transform {
  constructor() {
    super({
      objectMode: true
    });
  }
  _transform(data, encoding, onData) {
    this._decode(data);
    onData();
  }
  _decode(data) {
    const magicNumber = data.slice(0, 8);
    if (magicNumber.compare(_protocol.MAGIC_NUMBER) !== 0) {
      throw new Error(`Unexpected magic number: ${magicNumber}`);
    }
    const messageLength = this.readUInt64LE(data, 8);
    const thisLength = this.readUInt64LE(data, 16);
    const packetNumber = this.readUInt64LE(data, 24);
    const opCode = this.readUInt64LE(data, 32);
    const headerPayload = data.slice(_protocol.AFC_PACKET_HEADER_SIZE, thisLength);
    const content = data.slice(thisLength, messageLength);
    this.push({
      messageLength,
      packetNumber,
      opCode,
      headerPayload,
      content
    });
  }
  readUInt64LE(buffer, index) {
    return buffer.readUInt32LE(index);
  }
}
exports.AfcDecoder = AfcDecoder;
var _default = AfcDecoder;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfc3RyZWFtIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfcHJvdG9jb2wiLCJBZmNEZWNvZGVyIiwiU3RyZWFtIiwiVHJhbnNmb3JtIiwiY29uc3RydWN0b3IiLCJvYmplY3RNb2RlIiwiX3RyYW5zZm9ybSIsImRhdGEiLCJlbmNvZGluZyIsIm9uRGF0YSIsIl9kZWNvZGUiLCJtYWdpY051bWJlciIsInNsaWNlIiwiY29tcGFyZSIsIk1BR0lDX05VTUJFUiIsIkVycm9yIiwibWVzc2FnZUxlbmd0aCIsInJlYWRVSW50NjRMRSIsInRoaXNMZW5ndGgiLCJwYWNrZXROdW1iZXIiLCJvcENvZGUiLCJoZWFkZXJQYXlsb2FkIiwiQUZDX1BBQ0tFVF9IRUFERVJfU0laRSIsImNvbnRlbnQiLCJwdXNoIiwiYnVmZmVyIiwiaW5kZXgiLCJyZWFkVUludDMyTEUiLCJleHBvcnRzIiwiX2RlZmF1bHQiLCJkZWZhdWx0Il0sInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vbGliL2FmYy90cmFuc2Zvcm1lci9hZmNkZWNvZGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBTdHJlYW0gZnJvbSAnc3RyZWFtJztcbmltcG9ydCB7IE1BR0lDX05VTUJFUiwgQUZDX1BBQ0tFVF9IRUFERVJfU0laRSB9IGZyb20gJy4uL3Byb3RvY29sJztcblxuXG5jbGFzcyBBZmNEZWNvZGVyIGV4dGVuZHMgU3RyZWFtLlRyYW5zZm9ybSB7XG5cbiAgY29uc3RydWN0b3IgKCkge1xuICAgIHN1cGVyKHsgb2JqZWN0TW9kZTogdHJ1ZSB9KTtcbiAgfVxuXG4gIF90cmFuc2Zvcm0gKGRhdGEsIGVuY29kaW5nLCBvbkRhdGEpIHtcbiAgICB0aGlzLl9kZWNvZGUoZGF0YSk7XG4gICAgb25EYXRhKCk7XG4gIH1cblxuICBfZGVjb2RlIChkYXRhKSB7XG4gICAgY29uc3QgbWFnaWNOdW1iZXIgPSBkYXRhLnNsaWNlKDAsIDgpO1xuICAgIGlmIChtYWdpY051bWJlci5jb21wYXJlKE1BR0lDX05VTUJFUikgIT09IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgVW5leHBlY3RlZCBtYWdpYyBudW1iZXI6ICR7bWFnaWNOdW1iZXJ9YCk7XG4gICAgfVxuICAgIGNvbnN0IG1lc3NhZ2VMZW5ndGggPSB0aGlzLnJlYWRVSW50NjRMRShkYXRhLCA4KTtcbiAgICBjb25zdCB0aGlzTGVuZ3RoID0gdGhpcy5yZWFkVUludDY0TEUoZGF0YSwgMTYpO1xuICAgIGNvbnN0IHBhY2tldE51bWJlciA9IHRoaXMucmVhZFVJbnQ2NExFKGRhdGEsIDI0KTtcbiAgICBjb25zdCBvcENvZGUgPSB0aGlzLnJlYWRVSW50NjRMRShkYXRhLCAzMik7XG5cbiAgICBjb25zdCBoZWFkZXJQYXlsb2FkID0gZGF0YS5zbGljZShBRkNfUEFDS0VUX0hFQURFUl9TSVpFLCB0aGlzTGVuZ3RoKTtcbiAgICBjb25zdCBjb250ZW50ID0gZGF0YS5zbGljZSh0aGlzTGVuZ3RoLCBtZXNzYWdlTGVuZ3RoKTtcblxuICAgIHRoaXMucHVzaCh7IG1lc3NhZ2VMZW5ndGgsIHBhY2tldE51bWJlciwgb3BDb2RlLCBoZWFkZXJQYXlsb2FkLCBjb250ZW50IH0pO1xuICB9XG5cbiAgcmVhZFVJbnQ2NExFIChidWZmZXIsIGluZGV4KSB7XG4gICAgLy8gSWdub3JlIHRoZSBmaXJzdCA0IGJ5dGVzIHNpbmNlIHdlIGRvbid0IGRvIGFueXRoaW5nIHdpdGggbG9uZ3NcbiAgICByZXR1cm4gYnVmZmVyLnJlYWRVSW50MzJMRShpbmRleCk7XG4gIH1cbn1cblxuZXhwb3J0IHsgQWZjRGVjb2RlciB9O1xuZXhwb3J0IGRlZmF1bHQgQWZjRGVjb2RlcjtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQSxJQUFBQSxPQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxTQUFBLEdBQUFELE9BQUE7QUFHQSxNQUFNRSxVQUFVLFNBQVNDLGVBQU0sQ0FBQ0MsU0FBUyxDQUFDO0VBRXhDQyxXQUFXQSxDQUFBLEVBQUk7SUFDYixLQUFLLENBQUM7TUFBRUMsVUFBVSxFQUFFO0lBQUssQ0FBQyxDQUFDO0VBQzdCO0VBRUFDLFVBQVVBLENBQUVDLElBQUksRUFBRUMsUUFBUSxFQUFFQyxNQUFNLEVBQUU7SUFDbEMsSUFBSSxDQUFDQyxPQUFPLENBQUNILElBQUksQ0FBQztJQUNsQkUsTUFBTSxFQUFFO0VBQ1Y7RUFFQUMsT0FBT0EsQ0FBRUgsSUFBSSxFQUFFO0lBQ2IsTUFBTUksV0FBVyxHQUFHSixJQUFJLENBQUNLLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3BDLElBQUlELFdBQVcsQ0FBQ0UsT0FBTyxDQUFDQyxzQkFBWSxDQUFDLEtBQUssQ0FBQyxFQUFFO01BQzNDLE1BQU0sSUFBSUMsS0FBSyxDQUFFLDRCQUEyQkosV0FBWSxFQUFDLENBQUM7SUFDNUQ7SUFDQSxNQUFNSyxhQUFhLEdBQUcsSUFBSSxDQUFDQyxZQUFZLENBQUNWLElBQUksRUFBRSxDQUFDLENBQUM7SUFDaEQsTUFBTVcsVUFBVSxHQUFHLElBQUksQ0FBQ0QsWUFBWSxDQUFDVixJQUFJLEVBQUUsRUFBRSxDQUFDO0lBQzlDLE1BQU1ZLFlBQVksR0FBRyxJQUFJLENBQUNGLFlBQVksQ0FBQ1YsSUFBSSxFQUFFLEVBQUUsQ0FBQztJQUNoRCxNQUFNYSxNQUFNLEdBQUcsSUFBSSxDQUFDSCxZQUFZLENBQUNWLElBQUksRUFBRSxFQUFFLENBQUM7SUFFMUMsTUFBTWMsYUFBYSxHQUFHZCxJQUFJLENBQUNLLEtBQUssQ0FBQ1UsZ0NBQXNCLEVBQUVKLFVBQVUsQ0FBQztJQUNwRSxNQUFNSyxPQUFPLEdBQUdoQixJQUFJLENBQUNLLEtBQUssQ0FBQ00sVUFBVSxFQUFFRixhQUFhLENBQUM7SUFFckQsSUFBSSxDQUFDUSxJQUFJLENBQUM7TUFBRVIsYUFBYTtNQUFFRyxZQUFZO01BQUVDLE1BQU07TUFBRUMsYUFBYTtNQUFFRTtJQUFRLENBQUMsQ0FBQztFQUM1RTtFQUVBTixZQUFZQSxDQUFFUSxNQUFNLEVBQUVDLEtBQUssRUFBRTtJQUUzQixPQUFPRCxNQUFNLENBQUNFLFlBQVksQ0FBQ0QsS0FBSyxDQUFDO0VBQ25DO0FBQ0Y7QUFBQ0UsT0FBQSxDQUFBM0IsVUFBQSxHQUFBQSxVQUFBO0FBQUEsSUFBQTRCLFFBQUEsR0FHYzVCLFVBQVU7QUFBQTJCLE9BQUEsQ0FBQUUsT0FBQSxHQUFBRCxRQUFBIn0=