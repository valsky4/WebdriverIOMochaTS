"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.AfcEncoder = void 0;
require("source-map-support/register");
var _stream = _interopRequireDefault(require("stream"));
var _protocol = require("../protocol");
class AfcEncoder extends _stream.default.Transform {
  constructor() {
    super({
      objectMode: true
    });
  }
  _transform(data, encoding, onData) {
    onData(null, this._encode(data));
  }
  _encode(data) {
    data.content = data.content ? data.content : Buffer.alloc(0);
    const thisLength = _protocol.AFC_PACKET_HEADER_SIZE + data.headerPayload.length;
    const messageLength = thisLength + data.content.length;
    const buffer = Buffer.alloc(messageLength);
    _protocol.MAGIC_NUMBER.copy(buffer);
    this.writeUInt64LE(buffer, 8, messageLength);
    this.writeUInt64LE(buffer, 16, thisLength);
    this.writeUInt64LE(buffer, 24, data.packetNumber);
    this.writeUInt64LE(buffer, 32, data.opCode);
    data.headerPayload.copy(buffer, _protocol.AFC_PACKET_HEADER_SIZE);
    data.content.copy(buffer, thisLength);
    return buffer;
  }
  writeUInt64LE(buffer, index, content) {
    buffer.writeUInt32LE(content, index);
    buffer.writeUInt32LE(0, index + 4);
  }
}
exports.AfcEncoder = AfcEncoder;
var _default = AfcEncoder;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfc3RyZWFtIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfcHJvdG9jb2wiLCJBZmNFbmNvZGVyIiwiU3RyZWFtIiwiVHJhbnNmb3JtIiwiY29uc3RydWN0b3IiLCJvYmplY3RNb2RlIiwiX3RyYW5zZm9ybSIsImRhdGEiLCJlbmNvZGluZyIsIm9uRGF0YSIsIl9lbmNvZGUiLCJjb250ZW50IiwiQnVmZmVyIiwiYWxsb2MiLCJ0aGlzTGVuZ3RoIiwiQUZDX1BBQ0tFVF9IRUFERVJfU0laRSIsImhlYWRlclBheWxvYWQiLCJsZW5ndGgiLCJtZXNzYWdlTGVuZ3RoIiwiYnVmZmVyIiwiTUFHSUNfTlVNQkVSIiwiY29weSIsIndyaXRlVUludDY0TEUiLCJwYWNrZXROdW1iZXIiLCJvcENvZGUiLCJpbmRleCIsIndyaXRlVUludDMyTEUiLCJleHBvcnRzIiwiX2RlZmF1bHQiLCJkZWZhdWx0Il0sInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vbGliL2FmYy90cmFuc2Zvcm1lci9hZmNlbmNvZGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBTdHJlYW0gZnJvbSAnc3RyZWFtJztcbmltcG9ydCB7IE1BR0lDX05VTUJFUiwgQUZDX1BBQ0tFVF9IRUFERVJfU0laRSB9IGZyb20gJy4uL3Byb3RvY29sJztcblxuXG5jbGFzcyBBZmNFbmNvZGVyIGV4dGVuZHMgU3RyZWFtLlRyYW5zZm9ybSB7XG5cbiAgY29uc3RydWN0b3IgKCkge1xuICAgIHN1cGVyKHsgb2JqZWN0TW9kZTogdHJ1ZSB9KTtcbiAgfVxuXG4gIF90cmFuc2Zvcm0gKGRhdGEsIGVuY29kaW5nLCBvbkRhdGEpIHtcbiAgICBvbkRhdGEobnVsbCwgdGhpcy5fZW5jb2RlKGRhdGEpKTtcbiAgfVxuXG4gIF9lbmNvZGUgKGRhdGEpIHtcbiAgICBkYXRhLmNvbnRlbnQgPSBkYXRhLmNvbnRlbnQgPyBkYXRhLmNvbnRlbnQgOiBCdWZmZXIuYWxsb2MoMCk7XG5cbiAgICBjb25zdCB0aGlzTGVuZ3RoID0gQUZDX1BBQ0tFVF9IRUFERVJfU0laRSArIGRhdGEuaGVhZGVyUGF5bG9hZC5sZW5ndGg7XG4gICAgY29uc3QgbWVzc2FnZUxlbmd0aCA9IHRoaXNMZW5ndGggKyBkYXRhLmNvbnRlbnQubGVuZ3RoO1xuXG4gICAgY29uc3QgYnVmZmVyID0gQnVmZmVyLmFsbG9jKG1lc3NhZ2VMZW5ndGgpO1xuICAgIE1BR0lDX05VTUJFUi5jb3B5KGJ1ZmZlcik7XG4gICAgdGhpcy53cml0ZVVJbnQ2NExFKGJ1ZmZlciwgOCwgbWVzc2FnZUxlbmd0aCk7XG4gICAgdGhpcy53cml0ZVVJbnQ2NExFKGJ1ZmZlciwgMTYsIHRoaXNMZW5ndGgpO1xuICAgIHRoaXMud3JpdGVVSW50NjRMRShidWZmZXIsIDI0LCBkYXRhLnBhY2tldE51bWJlcik7XG4gICAgdGhpcy53cml0ZVVJbnQ2NExFKGJ1ZmZlciwgMzIsIGRhdGEub3BDb2RlKTtcbiAgICBkYXRhLmhlYWRlclBheWxvYWQuY29weShidWZmZXIsIEFGQ19QQUNLRVRfSEVBREVSX1NJWkUpO1xuICAgIGRhdGEuY29udGVudC5jb3B5KGJ1ZmZlciwgdGhpc0xlbmd0aCk7XG4gICAgcmV0dXJuIGJ1ZmZlcjtcbiAgfVxuXG4gIHdyaXRlVUludDY0TEUgKGJ1ZmZlciwgaW5kZXgsIGNvbnRlbnQpIHtcbiAgICAvLyBJZ25vcmUgdGhlIGZpcnN0IDQgYnl0ZXMgc2luY2Ugd2UgZG9uJ3QgZG8gYW55dGhpbmcgd2l0aCBsb25nc1xuICAgIGJ1ZmZlci53cml0ZVVJbnQzMkxFKGNvbnRlbnQsIGluZGV4KTtcbiAgICBidWZmZXIud3JpdGVVSW50MzJMRSgwLCBpbmRleCArIDQpO1xuICB9XG5cbn1cblxuZXhwb3J0IHsgQWZjRW5jb2RlciB9O1xuZXhwb3J0IGRlZmF1bHQgQWZjRW5jb2RlcjtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQSxJQUFBQSxPQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxTQUFBLEdBQUFELE9BQUE7QUFHQSxNQUFNRSxVQUFVLFNBQVNDLGVBQU0sQ0FBQ0MsU0FBUyxDQUFDO0VBRXhDQyxXQUFXQSxDQUFBLEVBQUk7SUFDYixLQUFLLENBQUM7TUFBRUMsVUFBVSxFQUFFO0lBQUssQ0FBQyxDQUFDO0VBQzdCO0VBRUFDLFVBQVVBLENBQUVDLElBQUksRUFBRUMsUUFBUSxFQUFFQyxNQUFNLEVBQUU7SUFDbENBLE1BQU0sQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDQyxPQUFPLENBQUNILElBQUksQ0FBQyxDQUFDO0VBQ2xDO0VBRUFHLE9BQU9BLENBQUVILElBQUksRUFBRTtJQUNiQSxJQUFJLENBQUNJLE9BQU8sR0FBR0osSUFBSSxDQUFDSSxPQUFPLEdBQUdKLElBQUksQ0FBQ0ksT0FBTyxHQUFHQyxNQUFNLENBQUNDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFFNUQsTUFBTUMsVUFBVSxHQUFHQyxnQ0FBc0IsR0FBR1IsSUFBSSxDQUFDUyxhQUFhLENBQUNDLE1BQU07SUFDckUsTUFBTUMsYUFBYSxHQUFHSixVQUFVLEdBQUdQLElBQUksQ0FBQ0ksT0FBTyxDQUFDTSxNQUFNO0lBRXRELE1BQU1FLE1BQU0sR0FBR1AsTUFBTSxDQUFDQyxLQUFLLENBQUNLLGFBQWEsQ0FBQztJQUMxQ0Usc0JBQVksQ0FBQ0MsSUFBSSxDQUFDRixNQUFNLENBQUM7SUFDekIsSUFBSSxDQUFDRyxhQUFhLENBQUNILE1BQU0sRUFBRSxDQUFDLEVBQUVELGFBQWEsQ0FBQztJQUM1QyxJQUFJLENBQUNJLGFBQWEsQ0FBQ0gsTUFBTSxFQUFFLEVBQUUsRUFBRUwsVUFBVSxDQUFDO0lBQzFDLElBQUksQ0FBQ1EsYUFBYSxDQUFDSCxNQUFNLEVBQUUsRUFBRSxFQUFFWixJQUFJLENBQUNnQixZQUFZLENBQUM7SUFDakQsSUFBSSxDQUFDRCxhQUFhLENBQUNILE1BQU0sRUFBRSxFQUFFLEVBQUVaLElBQUksQ0FBQ2lCLE1BQU0sQ0FBQztJQUMzQ2pCLElBQUksQ0FBQ1MsYUFBYSxDQUFDSyxJQUFJLENBQUNGLE1BQU0sRUFBRUosZ0NBQXNCLENBQUM7SUFDdkRSLElBQUksQ0FBQ0ksT0FBTyxDQUFDVSxJQUFJLENBQUNGLE1BQU0sRUFBRUwsVUFBVSxDQUFDO0lBQ3JDLE9BQU9LLE1BQU07RUFDZjtFQUVBRyxhQUFhQSxDQUFFSCxNQUFNLEVBQUVNLEtBQUssRUFBRWQsT0FBTyxFQUFFO0lBRXJDUSxNQUFNLENBQUNPLGFBQWEsQ0FBQ2YsT0FBTyxFQUFFYyxLQUFLLENBQUM7SUFDcENOLE1BQU0sQ0FBQ08sYUFBYSxDQUFDLENBQUMsRUFBRUQsS0FBSyxHQUFHLENBQUMsQ0FBQztFQUNwQztBQUVGO0FBQUNFLE9BQUEsQ0FBQTFCLFVBQUEsR0FBQUEsVUFBQTtBQUFBLElBQUEyQixRQUFBLEdBR2MzQixVQUFVO0FBQUEwQixPQUFBLENBQUFFLE9BQUEsR0FBQUQsUUFBQSJ9