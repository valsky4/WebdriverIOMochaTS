{"version":3,"file":"index.js","names":["_lodash","_interopRequireDefault","require","_baseService","INSTALLATION_PROXY_SERVICE_NAME","exports","InstallationProxyService","BaseServicePlist","installApplication","path","clientOptions","timeout","request","Command","PackagePath","ClientOptions","_plistService","sendPlist","_waitMessageCompletion","upgradeApplication","listApplications","opts","applicationType","ApplicationType","returnAttributes","ReturnAttributes","messages","reduce","acc","message","CurrentList","forEach","app","CFBundleIdentifier","lookupApplications","bundleIds","BundleIDs","_","isString","LookupResult","Error","JSON","stringify","uninstallApplication","bundleId","ApplicationIdentifier","i","Number","MAX_SAFE_INTEGER","data","receivePlist","push","_isFinished","response","Status","_default","default"],"sources":["../../../lib/installation-proxy/index.js"],"sourcesContent":["import _ from 'lodash';\nimport { BaseServicePlist } from '../base-service';\n\n/*\n * https://github.com/tmothy20013/libimobiledevice-master/blob/ecd89b42021cf6f7efe9ad271b3bddc7dd4b281e/src/installation_proxy.c\n */\n\nconst INSTALLATION_PROXY_SERVICE_NAME = 'com.apple.mobile.installation_proxy';\n\nclass InstallationProxyService extends BaseServicePlist {\n  /**\n   * Install the application on the relative path on the phone\n   * @param {string} path The path where the .app and .ipa is located at on the phone\n   * @param {Object} clientOptions The extra options that wants to be passed to the installd\n   * @param {number} timeout [60000] The timeout between messages received from the phone as status updates\n   */\n  async installApplication (path, clientOptions = {}, timeout = 60000) {\n    const request = {\n      Command: 'Install',\n      PackagePath: path,\n      ClientOptions: clientOptions\n    };\n\n    this._plistService.sendPlist(request);\n    return await this._waitMessageCompletion(timeout);\n  }\n\n  /**\n   * Upgrades the given application from the relative path on the phone.\n   * It is required that a previous version of the same app is already installed in order\n   * to call this API.\n   *\n   * @param {string} path The path where the .app and .ipa is located at on the phone\n   * @param {Object} clientOptions The extra options that wants to be passed to the installd\n   * @param {number} timeout [60000] The timeout between messages received from the phone as status updates\n   */\n  async upgradeApplication (path, clientOptions = {}, timeout = 60000) {\n    const request = {\n      Command: 'Upgrade',\n      PackagePath: path,\n      ClientOptions: clientOptions\n    };\n\n    this._plistService.sendPlist(request);\n    return await this._waitMessageCompletion(timeout);\n  }\n\n  /**\n * @typedef {Object} ListApplicationOptions\n *\n * @property {string} applicationType of the which group you want to list. These can be User, System or leave it empty for both\n * @property {Array} returnAttributes the fields which should be filtered and returned to the client. Leave this parameter empty if you don't want to filter\n */\n\n  /**\n   * Lists applications according to the opts and returns them as a map\n   * @param {ListApplicationOptions} opts the listing options that wants to be passed\n   * @returns A map of the applications which the key is the bundleId\n   */\n  async listApplications (opts = {}) {\n    const request = {\n      Command: 'Browse',\n      ClientOptions: {}\n    };\n\n    if (opts.applicationType) {\n      request.ClientOptions.ApplicationType = opts.applicationType;\n    }\n    if (opts.returnAttributes) {\n      request.ClientOptions.ReturnAttributes = opts.returnAttributes;\n    }\n\n    this._plistService.sendPlist(request);\n    const messages = await this._waitMessageCompletion();\n    return messages.reduce(function (acc, message) {\n      if (!message.CurrentList) {\n        return acc;\n      }\n      message.CurrentList.forEach(function (app) {\n        acc[app.CFBundleIdentifier] = app;\n      });\n      return acc;\n    }, {});\n  }\n\n  /**\n * @typedef {Object} LookupApplicationOptions\n *\n * @property {string} applicationType of the which group you want to list. These can be User, System or leave it empty for both\n * @property {Array} returnAttributes the fields which should be filtered and returned to the client. Leave this parameter empty if you don't want to filter\n * @property {string|Array} bundleIds Bundle Ids of the apps that should be searched\n */\n\n  /**\n   * Lists applications according to the opts and returns them as a map\n   * @param {LookupApplicationOptions} opts the lookup options that wants to be passed\n   * @returns A map of the applications which the key is the bundleId\n   */\n  async lookupApplications (opts = {}) {\n    const request = {\n      Command: 'Lookup',\n      ClientOptions: {}\n    };\n    if (opts.bundleIds) {\n      request.ClientOptions.BundleIDs = _.isString(opts.bundleIds) ? [opts.bundleIds] : opts.bundleIds;\n    }\n    if (opts.applicationType) {\n      request.ClientOptions.ApplicationType = opts.applicationType;\n    }\n    if (opts.returnAttributes) {\n      request.ClientOptions.ReturnAttributes = opts.returnAttributes;\n    }\n\n    this._plistService.sendPlist(request);\n    const messages = await this._waitMessageCompletion();\n    for (const message of messages) {\n      if (message.LookupResult) {\n        return message.LookupResult;\n      }\n    }\n    throw new Error(`Could not find LookupResult in the response: Response: ${JSON.stringify(messages)}`);\n  }\n\n  /**\n   * Uninstalls an application according to the given bundleId\n   * @param {string} bundleId of the app that needs to be passed for uninstallation\n   * @param {number} timeout The timeout between messages received from the phone as status updates\n   */\n  async uninstallApplication (bundleId, timeout = 20000) {\n    const request = {\n      Command: 'Uninstall',\n      ApplicationIdentifier: bundleId\n    };\n\n    this._plistService.sendPlist(request);\n    return await this._waitMessageCompletion(timeout);\n  }\n\n  async _waitMessageCompletion (timeout) {\n    let messages = [];\n    // Just added for safety. This shouldn't happen\n    for (let i = 0; i < Number.MAX_SAFE_INTEGER; i++) {\n      const data = await this._plistService.receivePlist(timeout);\n      messages.push(data);\n      if (this._isFinished(data)) {\n        return messages;\n      }\n    }\n  }\n\n  _isFinished (response) {\n    if (response.Error) {\n      throw new Error(`Unexpected data: ${JSON.stringify(response)}`);\n    }\n\n    if (!response.Status) {\n      return false;\n    }\n    return response.Status === 'Complete';\n  }\n}\n\nexport { InstallationProxyService, INSTALLATION_PROXY_SERVICE_NAME };\nexport default InstallationProxyService;\n"],"mappings":"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"}