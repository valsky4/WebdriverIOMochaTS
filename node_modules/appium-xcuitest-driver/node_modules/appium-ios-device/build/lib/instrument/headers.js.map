{"version":3,"file":"headers.js","names":["_nskeyed","require","_bplistParser","_interopRequireDefault","_lodash","DTX_MESSAGE_PAYLOAD_HEADER_LENGTH","exports","DTX_MESSAGE_HEADER_LENGTH","DTX_MESSAGE_HEADER_MAGIC","DTX_MESSAGE_HEADER_MAGIC_LEN","DTX_MESSAGE_AUX_HEADER","DTX_AUXILIARY_MAGIC","FLAG_TYPES","Object","freeze","push","recv","send","reply","AUX_TYPES","Text","NSKeyed","UInt32LE","BigUInt64LE","BigInt64LE","DTXMessageHeader","build","data","messageHeader","Buffer","alloc","writeUInt32LE","writeUInt16LE","payloadLength","identifier","conversationIndex","channelCode","expectsReply","parse","headerBuffer","magic","readUInt32LE","headerLength","fragmentId","readUInt16LE","fragmentCount","channel","DTXMessagePayloadHeader","flags","auxLength","writeBigUInt64LE","totalLength","readBigInt64LE","DTXMessageAux","constructor","messageAux","DTXMessageAuxBuffer","buf","length","arg","concat","getBytes","_","isNumber","appendInt","appendLong","appendObject","payloadHeader","cursor","m","Error","type","strLen","slice","archived_data","unarchive","readBigUInt64LE","InstrumentRPCParseError","_buf","value","appendSignedInt","writeInt32LE","appendSignedLong","writeBigInt64LE","archive","buf2","out","DTXMessage","opts","selector","_messageHeader","undefined","_payloadHeader","_identifier","_channelCode","_expectsReply","_selector","_conversationIndex","_flags","auxiliaries","_this$_messageHeader","_this$_messageHeader2","_this$_messageHeader3","_this$_messageHeader4","sel","aux","BigInt","headerBuf","payloadBuf","ret","fun","plistlib","parseBuffer","e"],"sources":["../../../lib/instrument/headers.js"],"sourcesContent":["import {archive, unarchive} from './transformer/nskeyed';\nimport plistlib from 'bplist-parser';\nimport _ from 'lodash';\n\nconst DTX_MESSAGE_PAYLOAD_HEADER_LENGTH = 16;\nconst DTX_MESSAGE_HEADER_LENGTH = 32;\nconst DTX_MESSAGE_HEADER_MAGIC = 0x1F3D5B79;\nconst DTX_MESSAGE_HEADER_MAGIC_LEN = 4;\nconst DTX_MESSAGE_AUX_HEADER = 0x01F0;\nconst DTX_AUXILIARY_MAGIC = 0xa;\n\nconst FLAG_TYPES = Object.freeze({\n  push: 0,\n  recv: 1,\n  send: 2,\n  reply: 3\n});\n\nconst AUX_TYPES = Object.freeze({\n  Text: 1,\n  NSKeyed: 2,\n  UInt32LE: 3,\n  BigUInt64LE: 4,\n  BigInt64LE: 6\n});\n\n/**\n * DTXMessageHeader length 32\n * struct DTXMessageHeader {\n *     u32 magic DTX_MESSAGE_HEADER_MAGIC\n *     u32 headerLength\n *     u16 fragmentId   packet number\n *     u16 fragmentCount  packets total number\n *     u32 payloadLength\n *     u32 identifier\n *     u32 conversationIndex\n *     u32 channel\n *     u32 expectsReply\n *     }\n */\n\n/**\n * @typedef {Object} DTXMessageOptions\n * @property {number} identifier packet transmission sequence, this value is incremented for each request\n * @property {number} channelCode the data transmission of the service will use this channel code.\n * Each service has a separate channel\n * @property {?number} payloadLength DTXMessageAuxBuffer.length(nullable) + selectorBuffer.length(nullable)\n * @property {boolean} expectsReply if true reply a ack message\n * @property {number} conversationIndex  raw data +1 indicate a reply message\n * @property {number} flags message status\n */\n\nclass DTXMessageHeader {\n  /**\n   * @param {DTXMessageOptions} data\n   * @returns {Buffer} DTXMessageHeaderBuffer\n   */\n  static build (data) {\n    const messageHeader = Buffer.alloc(DTX_MESSAGE_HEADER_LENGTH);\n    messageHeader.writeUInt32LE(DTX_MESSAGE_HEADER_MAGIC, 0);\n    messageHeader.writeUInt32LE(DTX_MESSAGE_HEADER_LENGTH, 4);\n    messageHeader.writeUInt16LE(0, 8);\n    messageHeader.writeUInt16LE(1, 10);\n    messageHeader.writeUInt32LE(data.payloadLength, 12);\n    messageHeader.writeUInt32LE(data.identifier, 16);\n    messageHeader.writeUInt32LE(data.conversationIndex, 20);\n    messageHeader.writeUInt32LE(data.channelCode, 24);\n    messageHeader.writeUInt32LE(data.expectsReply, 28);\n    return messageHeader;\n  }\n\n  /**\n   * @param headerBuffer DTXMessageHeaderBuffer\n   * @returns {Object}\n   */\n  static parse (headerBuffer) {\n    return {\n      magic: headerBuffer.readUInt32LE(0),\n      headerLength: headerBuffer.readUInt32LE(4),\n      fragmentId: headerBuffer.readUInt16LE(8),\n      fragmentCount: headerBuffer.readUInt16LE(10),\n      payloadLength: headerBuffer.readUInt32LE(12),\n      identifier: headerBuffer.readUInt32LE(16),\n      conversationIndex: headerBuffer.readUInt32LE(20),\n      channel: headerBuffer.readUInt32LE(24),\n      expectsReply: headerBuffer.readUInt32LE(28),\n    };\n  }\n}\n\n/**\n * DTXMessagePayloadHeader length 16\n * struct DTXMessageHeader {\n *     u32 flags FLAG_TYPES\n *     u32 auxLength\n *     u64 totalLength\n *     }\n */\n\n/**\n * @typedef {Object} DTXMessagePayloadHeaderObject\n * @property {number} flags message status\n * @property {number} auxLength DTXMessageAuxBuffer.length(nullable)\n * @property {bigint} totalLength DTXMessageAuxBuffer.length(nullable) + selectorBuffer.length\n */\nclass DTXMessagePayloadHeader {\n  /**\n   * @param data {DTXMessagePayloadHeaderObject}\n   * @returns {Buffer} DTXMessagePayloadHeaderBuffer\n   */\n  static build (data) {\n    const messageHeader = Buffer.alloc(DTX_MESSAGE_PAYLOAD_HEADER_LENGTH);\n    messageHeader.writeUInt32LE(data.flags, 0);\n    messageHeader.writeUInt32LE(data.auxLength, 4);\n    messageHeader.writeBigUInt64LE(data.totalLength, 8);\n    return messageHeader;\n  }\n\n  /**\n   * @param headerBuffer\n   * @returns {DTXMessagePayloadHeaderObject}\n   */\n  static parse (headerBuffer) {\n    return {\n      flags: headerBuffer.readUInt32LE(0),\n      auxLength: headerBuffer.readUInt32LE(4),\n      totalLength: headerBuffer.readBigInt64LE(8)\n    };\n  }\n}\n\n\nclass DTXMessageAux {\n  constructor (data = []) {\n    this.data = data;\n  }\n\n  /**\n   * JS Array to Apple NSKeyed Buffer\n   * @returns {Buffer}\n   */\n  build () {\n    const messageAux = new DTXMessageAuxBuffer();\n    let buf = Buffer.alloc(0);\n    if (this.data.length === 0) {\n      return buf;\n    }\n    for (const arg of this.data) {\n      if (arg instanceof DTXMessageAuxBuffer) {\n        buf = Buffer.concat([buf, arg.getBytes()]);\n      } else if (_.isNumber(arg)) {\n        messageAux.appendInt(arg);\n      } else if (typeof arg == 'bigint') {\n        messageAux.appendLong(arg);\n      } else {\n        messageAux.appendObject(arg);\n      }\n    }\n    return Buffer.concat([buf, messageAux.getBytes()]);\n  }\n\n  /**\n   * Parses nskeyed Buffer into js array\n   * @param {Buffer} headerBuffer\n   * @param {DTXMessagePayloadHeaderObject} payloadHeader\n   * @returns {Array}\n   */\n  static parse (headerBuffer, payloadHeader) {\n    let cursor = 0;\n    const data = [];\n    const length = headerBuffer.readBigInt64LE(8);\n    cursor += 16;\n    while (cursor <= length) {\n      if (payloadHeader.flags !== FLAG_TYPES.push) {\n        const m = headerBuffer.readUInt32LE(cursor);\n        cursor += 4;\n        if (m !== DTX_AUXILIARY_MAGIC) {\n          throw new Error(`incorrect auxiliary magic: ${m}`);\n        }\n      }\n      const type = headerBuffer.readUInt32LE(cursor);\n      cursor += 4;\n      switch (type) {\n        case AUX_TYPES.Text: {\n          const strLen = headerBuffer.readUInt32LE(cursor);\n          cursor += 4;\n          data.push(headerBuffer.slice(cursor, cursor + strLen));\n          cursor += strLen;\n          break;\n        }\n        case AUX_TYPES.NSKeyed: {\n          const strLen = headerBuffer.readUInt32LE(cursor);\n          cursor += 4;\n          const archived_data = headerBuffer.slice(cursor, cursor + strLen);\n          data.push(unarchive(archived_data));\n          cursor += strLen;\n          break;\n        }\n        case AUX_TYPES.UInt32LE:\n          data.push(headerBuffer.readUInt32LE(cursor));\n          cursor += 4;\n          break;\n        case AUX_TYPES.BigUInt64LE:\n          data.push(headerBuffer.readBigUInt64LE(cursor));\n          cursor += 8;\n          break;\n        case AUX_TYPES.BigInt64LE:\n          data.push(headerBuffer.readBigInt64LE(cursor));\n          cursor += 8;\n          break;\n        default:\n          throw new Error(`Unknown type ${type}`);\n      }\n    }\n    return data;\n  }\n}\n\nclass InstrumentRPCParseError {\n  constructor (data) {\n    this.data = data;\n  }\n}\n\nclass DTXMessageAuxBuffer {\n  constructor () {\n    this._buf = Buffer.alloc(0);\n  }\n\n  /**\n   * @param {number} value\n   */\n  appendInt (value) {\n    const buf = Buffer.alloc(12);\n    buf.writeUInt32LE(DTX_AUXILIARY_MAGIC, 0);\n    buf.writeUInt32LE(3, 4);\n    buf.writeUInt32LE(value, 8);\n    this._buf = Buffer.concat([this._buf, buf]);\n  }\n\n  /**\n   * @param {bigint} value\n   */\n  appendLong (value) {\n    const buf = Buffer.alloc(16);\n    buf.writeUInt32LE(DTX_AUXILIARY_MAGIC, 0);\n    buf.writeUInt32LE(4, 4);\n    buf.writeBigUInt64LE(value, 8);\n    this._buf = Buffer.concat([this._buf, buf]);\n  }\n\n  /**\n   * @param {number} value\n   */\n  appendSignedInt (value) {\n    const buf = Buffer.alloc(12);\n    buf.writeUInt32LE(DTX_AUXILIARY_MAGIC, 0);\n    buf.writeUInt32LE(3, 4);\n    buf.writeInt32LE(value, 8);\n    this._buf = Buffer.concat([this._buf, buf]);\n  }\n\n  /**\n   * @param {bigint} value\n   */\n  appendSignedLong (value) {\n    const buf = Buffer.alloc(16);\n    buf.writeUInt32LE(DTX_AUXILIARY_MAGIC, 0);\n    buf.writeUInt32LE(6, 4);\n    buf.writeBigInt64LE(value, 8);\n    this._buf = Buffer.concat([this._buf, buf]);\n  }\n\n  /**\n   * @param {Object} value\n   */\n  appendObject (value) {\n    const buf = archive(value);\n    const buf2 = Buffer.alloc(12);\n    buf2.writeUInt32LE(DTX_AUXILIARY_MAGIC, 0);\n    buf2.writeUInt32LE(2, 4);\n    buf2.writeUInt32LE(buf.length, 8);\n    this._buf = Buffer.concat([this._buf, buf2, buf]);\n  }\n\n  getBytes () {\n    const out = Buffer.alloc(16);\n    out.writeUInt32LE(DTX_MESSAGE_AUX_HEADER, 0);\n    out.writeUInt32LE(this._buf.length, 8);\n    return Buffer.concat([out, this._buf]);\n  }\n}\n\n\n\nclass DTXMessage {\n  /**\n   * @param {DTXMessageOptions} opts\n   */\n  constructor (opts = {}) {\n    const {\n      identifier,\n      channelCode,\n      selector,\n      expectsReply,\n      conversationIndex = 0,\n      flags = FLAG_TYPES.send\n    } = opts;\n    this._messageHeader = undefined;\n    this._payloadHeader = undefined;\n    this._identifier = identifier;\n    this._channelCode = channelCode;\n    this._expectsReply = expectsReply;\n    this._selector = selector;\n    this._conversationIndex = conversationIndex;\n    this._flags = flags;\n    this.auxiliaries = new DTXMessageAux();\n  }\n\n  /**\n   * get DTXMessageHeader identifier. Packet transmission sequence\n   * @returns {number}\n   */\n  get identifier () {\n    return this._messageHeader?.identifier;\n  }\n\n  /**\n   * get DTXMessageHeader channelCode.\n   * Packet transmission channelCode. Use this value to distinguish when there are multiple channels\n   * call this method `InstrumentService.registerChannelCallback` get the channel message\n   * @returns {number}\n   */\n  get channelCode () {\n    return this._messageHeader?.channel;\n  }\n\n  /**\n   * get DTXMessageHeader expectsReply. Whether to need ack message\n   * if expectsReply is true must reply ack message\n   * @returns {boolean}\n   */\n  get expectsReply () {\n    return this._messageHeader?.expectsReply;\n  }\n\n  /**\n   * call this method `InstrumentService.registerSelectorCallback` get the selector message\n   * @returns {*} Unknown data\n   */\n  get selector () {\n    return this._selector;\n  }\n\n  /**\n   * @param data\n   */\n  set selector (data) {\n    this._selector = data;\n  }\n\n  /**\n   * get DTXMessageHeader conversationIndex\n   * @returns {number}\n   */\n  get conversationIndex () {\n    return this._messageHeader?.conversationIndex;\n  }\n\n  /**\n   * DTXMessage Buffer: DTXMessageHeader + PayloadHeader + DTXMessageAuxBuffer(nullable) + selector(nullable)\n   * @returns {Buffer}\n   */\n  build () {\n    const sel = this._selector ? archive(this._selector) : Buffer.alloc(0);\n    const aux = this.auxiliaries.build();\n    const payloadHeader = DTXMessagePayloadHeader.build({\n      flags: this._flags,\n      auxLength: aux.length,\n      // need to convert to bigint in any case\n      // eslint-disable-next-line no-undef\n      totalLength: BigInt(aux.length + sel.length),\n    });\n\n    const messageHeader = DTXMessageHeader.build({\n      payloadLength: DTX_MESSAGE_PAYLOAD_HEADER_LENGTH + aux.length + sel.length,\n      identifier: this._identifier,\n      conversationIndex: this._conversationIndex,\n      channelCode: this._channelCode,\n      expectsReply: this._expectsReply\n    });\n    return Buffer.concat([messageHeader, payloadHeader, aux, sel]);\n  }\n\n  /**\n   * Parses DTX buffer into an js object. Returned in DTXDecoder Stream.Transform\n   * @param {Buffer} headerBuf  DTXMessageHeader buffer\n   * @param {Buffer} payloadBuf  PayloadHeaderBuffer + DTXMessageAuxBuffer(nullable) + selectorBuffer(nullable)\n   * @returns {DTXMessage}\n   */\n  static parse (headerBuf, payloadBuf) {\n    let cursor = 0;\n    const ret = new DTXMessage();\n    ret._messageHeader = DTXMessageHeader.parse(headerBuf);\n    if (ret._messageHeader.payloadLength === 0) {\n      return ret;\n    }\n    ret._payloadHeader = DTXMessagePayloadHeader.parse(payloadBuf.slice(cursor, DTX_MESSAGE_PAYLOAD_HEADER_LENGTH));\n    cursor += DTX_MESSAGE_PAYLOAD_HEADER_LENGTH;\n    // totalLength is bigint use 0n\n    if (ret._payloadHeader.totalLength === 0n) {\n      return ret;\n    }\n    if (ret._payloadHeader.auxLength > 0) {\n      ret.auxiliaries = DTXMessageAux.parse(payloadBuf.slice(cursor, cursor + ret._payloadHeader.auxLength), ret._payloadHeader);\n      cursor += ret._payloadHeader.auxLength;\n    }\n\n    const data = payloadBuf.slice(cursor, cursor + payloadBuf.length);\n    ret.selector = data;\n    if (data.length > 0) {\n      for (const fun of [unarchive, plistlib.parseBuffer]) {\n        try {\n          ret.selector = fun(data);\n          break;\n        } catch (e) {\n          ret.selector = new InstrumentRPCParseError(data);\n        }\n      }\n    }\n    return ret;\n  }\n}\n\nexport { DTXMessageHeader, DTXMessagePayloadHeader, DTXMessageAuxBuffer, DTXMessageAux, DTXMessage,\n  DTX_MESSAGE_PAYLOAD_HEADER_LENGTH, DTX_MESSAGE_HEADER_LENGTH, DTX_MESSAGE_HEADER_MAGIC, DTX_MESSAGE_HEADER_MAGIC_LEN,\n  FLAG_TYPES};\n"],"mappings":"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"}