{"version":3,"file":"index.js","names":["_baseService","require","_headers","_dtxEncode","_dtxDecode","_events","_interopRequireDefault","_lodash","_asyncbox","CHECK_FREQ_MS","WAIT_REPLY_TIME_MS","EMPTY_MESSAGE_SIZE","CHANNEL_CANCELED","CHANNEL_OFFSET","INSTRUMENT_SERVICE_NAME_VERSION_14","exports","INSTRUMENT_SERVICE_NAME","INSTRUMENT_CHANNEL","Object","freeze","DEVICE_INFO","PROCESS_CONTROL","SYSMONTAP","NETWORKING","MOBILE_NOTIFICATIONS","GRAPHICS_OPENGL","APPLICATION_LISTING","CONDITION_INDUCER","defaultDict","createValue","Proxy","create","get","storage","property","InstrumentService","BaseServiceSocket","constructor","socketClient","event","_undefinedCallback","_callbacks","events","EventEmitter","_channelCallbacks","_replyQueues","_channels","_nextIdentifier","_encoder","DTXEncoder","pipe","_socketClient","_assignClientFailureHandlers","_decoder","DTXDecoder","on","_handleData","bind","registerSelectorCallback","selector","addListener","registerUndefinedCallback","registerChannelCallback","channel","channelId","makeChannel","channelCode","keys","length","_callChannel","callChannel","auxiliaries","sync","identifier","write","waitForCondition","queue","data","shift","_","isUndefined","waitMs","intervalMs","error","err","close","Error","includes","conversationIndex","push","listenerCount","emit","isString","expectsReply","_replyAck","reply","DTXMessage","Buffer","alloc","flags","FLAG_TYPES","build"],"sources":["../../../lib/instrument/index.js"],"sourcesContent":["// Adapted from https://github.com/YueChen-C/py-ios-device\n\nimport {BaseServiceSocket} from '../base-service';\nimport {DTXMessage, FLAG_TYPES} from './headers';\nimport {DTXEncoder} from './transformer/dtx-encode';\nimport {DTXDecoder} from './transformer/dtx-decode';\nimport events from 'events';\nimport _ from 'lodash';\nimport {waitForCondition} from 'asyncbox';\n\nconst CHECK_FREQ_MS = 500;\nconst WAIT_REPLY_TIME_MS = 10000;\nconst EMPTY_MESSAGE_SIZE = 16;\nconst CHANNEL_CANCELED = '_channelCanceled';\nconst CHANNEL_OFFSET = 2 ** 32;\n\nconst INSTRUMENT_SERVICE_NAME_VERSION_14 = 'com.apple.instruments.remoteserver.DVTSecureSocketProxy';\nconst INSTRUMENT_SERVICE_NAME = 'com.apple.instruments.remoteserver';\n\nexport const INSTRUMENT_CHANNEL = Object.freeze({\n  DEVICE_INFO: 'com.apple.instruments.server.services.deviceinfo',\n  PROCESS_CONTROL: 'com.apple.instruments.server.services.processcontrol',\n  SYSMONTAP: 'com.apple.instruments.server.services.sysmontap',\n  NETWORKING: 'com.apple.instruments.server.services.networking',\n  MOBILE_NOTIFICATIONS: 'com.apple.instruments.server.services.mobilenotifications',\n  GRAPHICS_OPENGL: 'com.apple.instruments.server.services.graphics.opengl',\n  APPLICATION_LISTING: 'com.apple.instruments.server.services.device.applictionListing',\n  CONDITION_INDUCER: 'com.apple.instruments.server.services.ConditionInducer'\n});\n\nfunction defaultDict (createValue) {\n  return new Proxy(Object.create(null), {\n    get (storage, property) {\n      if (!(property in storage)) {\n        storage[property] = createValue(property);\n      }\n      return storage[property];\n    }\n  });\n}\n\n/** The callback function which will be called during the data transmission in instrument serve\n * @name DTXCallback\n * @function\n * @param {DTXMessage} object\n*/\n\n/**\n * @param {Socket} socketClient  DTXMessage.selector\n * @param {?DTXCallback} event if empty will ignore any messages\n */\nclass InstrumentService extends BaseServiceSocket {\n  constructor (socketClient, event) {\n    super(socketClient);\n    this._undefinedCallback = event;\n    this._callbacks = new events.EventEmitter();\n    this._channelCallbacks = new events.EventEmitter();\n    this._replyQueues = defaultDict(() => []);\n    this._channels = {};\n    this._nextIdentifier = 1;\n    this._encoder = new DTXEncoder();\n    this._encoder.pipe(this._socketClient);\n    this._assignClientFailureHandlers(this._encoder);\n    this._decoder = new DTXDecoder();\n    this._socketClient.pipe(this._decoder);\n    this._decoder.on('data', this._handleData.bind(this));\n  }\n\n  /**\n   * If the selector is registered, The message of the selector event will be returned. refer to this._handleData\n   * @param {string} selector  Listen for return DTXMessage.selector data\n   * @param {DTXCallback} event\n   */\n  registerSelectorCallback (selector, event) {\n    this._callbacks.addListener(selector, event);\n  }\n\n  /**\n   * If the event is registered, all unregistered messages will be returned to event. refer to this._handleData\n   * @param {DTXCallback} event\n   */\n  registerUndefinedCallback (event) {\n    this._undefinedCallback = event;\n  }\n\n  /**\n   * If the event is registered, this channel {CHANNEL} messages will be returned to event. refer to this._handleData\n   * It's actually listening for int channelCode. In this._channel object to record channel key and int value\n   * @param {string} channel instruments service channel e.g: INSTRUMENT_CHANNEL.DEVICE_INFO.\n   * @param {DTXCallback} event\n   */\n  async registerChannelCallback (channel, event) {\n    const channelId = await this.makeChannel(channel);\n    this._channelCallbacks.addListener(channelId, event);\n  }\n\n  /**\n   * Create a service channel, data transmission of the service will use this channelCode\n   * @param {string} channel  instruments service channel e.g: INSTRUMENT_CHANNEL.DEVICE_INFO\n   * @returns {Promise<number|*>} instruments service channel code for data transmission\n   */\n  async makeChannel (channel) {\n    if (channel in this._channels) {\n      return this._channels[channel];\n    }\n    const channelCode = Object.keys(this._channels).length + 1;\n    await this._callChannel(true, 0, '_requestChannelWithCode:identifier:', channelCode, channel);\n    this._channels[channel] = channelCode;\n    return channelCode;\n  }\n\n  /**\n   * In general, we call this method to start the instrument dtx service\n   * @param {string} channel instrument dtx service e.g: INSTRUMENT_CHANNEL.DEVICE_INFO\n   * @param {string} selector instrument service method name (reflection calls)\n   * @param {...any} auxiliaries parameters required by selector\n   * @returns {Promise<DTXMessage>}\n   * exampleï¼š\n   * instrumentService.callChannel(INSTRUMENT_CHANNEL.PROCESS_CONTROL,\n        'launchSuspendedProcessWithDevicePath:bundleIdentifier:environment:arguments:options:', '',\n        bundleID, {}, [], {'StartSuspendedKey': 0, 'KillExisting': 1}\n   */\n  async callChannel (channel, selector, ...auxiliaries) {\n    const channelCode = await this.makeChannel(channel);\n    return await this._callChannel(true, channelCode, selector, ...auxiliaries);\n  }\n\n  async _callChannel (sync, channelCode, selector, ...auxiliaries) {\n    const identifier = this._nextIdentifier;\n    this._encoder.write({sync, channelCode, selector, auxiliaries, identifier});\n    ++this._nextIdentifier;\n    if (sync) {\n      try {\n        return await waitForCondition(() => {\n          const queue = this._replyQueues[identifier];\n          const data = queue.shift();\n          if (!_.isUndefined(data)) {\n            return data;\n          }\n        }, {waitMs: WAIT_REPLY_TIME_MS, intervalMs: CHECK_FREQ_MS, error: 'reply channel data timeout'});\n      } catch (err) {\n        this.close();\n        throw new Error(err);\n      }\n    }\n  }\n\n  /**\n   * Handling registered asynchronous message callbacks\n   * @param {DTXMessage} data\n   * @private\n   */\n  _handleData (data) {\n    if (_.includes(data.selector, CHANNEL_CANCELED)) {\n      this.close();\n    }\n    if (data.conversationIndex === 1) {\n      this._replyQueues[data.identifier].push(data);\n    } else if (this._channelCallbacks.listenerCount(CHANNEL_OFFSET - data.channelCode) > 0) {\n      this._channelCallbacks.emit(CHANNEL_OFFSET - data.channelCode, data);\n    } else {\n      const selector = data.selector;\n      if (_.isString(selector) && this._callbacks.listenerCount(selector) > 0) {\n        this._callbacks.emit(selector, data);\n      } else if (this._undefinedCallback) {\n        this._undefinedCallback(data);\n      }\n      if (data.expectsReply) {\n        this._replyAck(data);\n      }\n    }\n  }\n\n  /**\n   * return a empty ack message\n   * @param {DTXMessage} data\n   */\n  _replyAck (data) {\n    const reply = new DTXMessage({\n      identifier: data.identifier,\n      channelCode: data.channelCode,\n      selector: Buffer.alloc(EMPTY_MESSAGE_SIZE),\n      conversationIndex: data.conversationIndex + 1,\n      flags: FLAG_TYPES.reply\n    });\n    this._socketClient.write(reply.build());\n  }\n}\n\nexport { InstrumentService, INSTRUMENT_SERVICE_NAME_VERSION_14, INSTRUMENT_SERVICE_NAME };\n"],"mappings":";;;;;;;;AAEA,IAAAA,YAAA,GAAAC,OAAA;AACA,IAAAC,QAAA,GAAAD,OAAA;AACA,IAAAE,UAAA,GAAAF,OAAA;AACA,IAAAG,UAAA,GAAAH,OAAA;AACA,IAAAI,OAAA,GAAAC,sBAAA,CAAAL,OAAA;AACA,IAAAM,OAAA,GAAAD,sBAAA,CAAAL,OAAA;AACA,IAAAO,SAAA,GAAAP,OAAA;AAEA,MAAMQ,aAAa,GAAG,GAAG;AACzB,MAAMC,kBAAkB,GAAG,KAAK;AAChC,MAAMC,kBAAkB,GAAG,EAAE;AAC7B,MAAMC,gBAAgB,GAAG,kBAAkB;AAC3C,MAAMC,cAAc,GAAG,CAAC,IAAI,EAAE;AAE9B,MAAMC,kCAAkC,GAAG,yDAAyD;AAACC,OAAA,CAAAD,kCAAA,GAAAA,kCAAA;AACrG,MAAME,uBAAuB,GAAG,oCAAoC;AAACD,OAAA,CAAAC,uBAAA,GAAAA,uBAAA;AAE9D,MAAMC,kBAAkB,GAAGC,MAAM,CAACC,MAAM,CAAC;EAC9CC,WAAW,EAAE,kDAAkD;EAC/DC,eAAe,EAAE,sDAAsD;EACvEC,SAAS,EAAE,iDAAiD;EAC5DC,UAAU,EAAE,kDAAkD;EAC9DC,oBAAoB,EAAE,2DAA2D;EACjFC,eAAe,EAAE,uDAAuD;EACxEC,mBAAmB,EAAE,gEAAgE;EACrFC,iBAAiB,EAAE;AACrB,CAAC,CAAC;AAACZ,OAAA,CAAAE,kBAAA,GAAAA,kBAAA;AAEH,SAASW,WAAWA,CAAEC,WAAW,EAAE;EACjC,OAAO,IAAIC,KAAK,CAACZ,MAAM,CAACa,MAAM,CAAC,IAAI,CAAC,EAAE;IACpCC,GAAGA,CAAEC,OAAO,EAAEC,QAAQ,EAAE;MACtB,IAAI,EAAEA,QAAQ,IAAID,OAAO,CAAC,EAAE;QAC1BA,OAAO,CAACC,QAAQ,CAAC,GAAGL,WAAW,CAACK,QAAQ,CAAC;MAC3C;MACA,OAAOD,OAAO,CAACC,QAAQ,CAAC;IAC1B;EACF,CAAC,CAAC;AACJ;AAYA,MAAMC,iBAAiB,SAASC,8BAAiB,CAAC;EAChDC,WAAWA,CAAEC,YAAY,EAAEC,KAAK,EAAE;IAChC,KAAK,CAACD,YAAY,CAAC;IACnB,IAAI,CAACE,kBAAkB,GAAGD,KAAK;IAC/B,IAAI,CAACE,UAAU,GAAG,IAAIC,eAAM,CAACC,YAAY,EAAE;IAC3C,IAAI,CAACC,iBAAiB,GAAG,IAAIF,eAAM,CAACC,YAAY,EAAE;IAClD,IAAI,CAACE,YAAY,GAAGjB,WAAW,CAAC,MAAM,EAAE,CAAC;IACzC,IAAI,CAACkB,SAAS,GAAG,CAAC,CAAC;IACnB,IAAI,CAACC,eAAe,GAAG,CAAC;IACxB,IAAI,CAACC,QAAQ,GAAG,IAAIC,qBAAU,EAAE;IAChC,IAAI,CAACD,QAAQ,CAACE,IAAI,CAAC,IAAI,CAACC,aAAa,CAAC;IACtC,IAAI,CAACC,4BAA4B,CAAC,IAAI,CAACJ,QAAQ,CAAC;IAChD,IAAI,CAACK,QAAQ,GAAG,IAAIC,qBAAU,EAAE;IAChC,IAAI,CAACH,aAAa,CAACD,IAAI,CAAC,IAAI,CAACG,QAAQ,CAAC;IACtC,IAAI,CAACA,QAAQ,CAACE,EAAE,CAAC,MAAM,EAAE,IAAI,CAACC,WAAW,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC;EACvD;EAOAC,wBAAwBA,CAAEC,QAAQ,EAAEpB,KAAK,EAAE;IACzC,IAAI,CAACE,UAAU,CAACmB,WAAW,CAACD,QAAQ,EAAEpB,KAAK,CAAC;EAC9C;EAMAsB,yBAAyBA,CAAEtB,KAAK,EAAE;IAChC,IAAI,CAACC,kBAAkB,GAAGD,KAAK;EACjC;EAQA,MAAMuB,uBAAuBA,CAAEC,OAAO,EAAExB,KAAK,EAAE;IAC7C,MAAMyB,SAAS,GAAG,MAAM,IAAI,CAACC,WAAW,CAACF,OAAO,CAAC;IACjD,IAAI,CAACnB,iBAAiB,CAACgB,WAAW,CAACI,SAAS,EAAEzB,KAAK,CAAC;EACtD;EAOA,MAAM0B,WAAWA,CAAEF,OAAO,EAAE;IAC1B,IAAIA,OAAO,IAAI,IAAI,CAACjB,SAAS,EAAE;MAC7B,OAAO,IAAI,CAACA,SAAS,CAACiB,OAAO,CAAC;IAChC;IACA,MAAMG,WAAW,GAAGhD,MAAM,CAACiD,IAAI,CAAC,IAAI,CAACrB,SAAS,CAAC,CAACsB,MAAM,GAAG,CAAC;IAC1D,MAAM,IAAI,CAACC,YAAY,CAAC,IAAI,EAAE,CAAC,EAAE,qCAAqC,EAAEH,WAAW,EAAEH,OAAO,CAAC;IAC7F,IAAI,CAACjB,SAAS,CAACiB,OAAO,CAAC,GAAGG,WAAW;IACrC,OAAOA,WAAW;EACpB;EAaA,MAAMI,WAAWA,CAAEP,OAAO,EAAEJ,QAAQ,EAAE,GAAGY,WAAW,EAAE;IACpD,MAAML,WAAW,GAAG,MAAM,IAAI,CAACD,WAAW,CAACF,OAAO,CAAC;IACnD,OAAO,MAAM,IAAI,CAACM,YAAY,CAAC,IAAI,EAAEH,WAAW,EAAEP,QAAQ,EAAE,GAAGY,WAAW,CAAC;EAC7E;EAEA,MAAMF,YAAYA,CAAEG,IAAI,EAAEN,WAAW,EAAEP,QAAQ,EAAE,GAAGY,WAAW,EAAE;IAC/D,MAAME,UAAU,GAAG,IAAI,CAAC1B,eAAe;IACvC,IAAI,CAACC,QAAQ,CAAC0B,KAAK,CAAC;MAACF,IAAI;MAAEN,WAAW;MAAEP,QAAQ;MAAEY,WAAW;MAAEE;IAAU,CAAC,CAAC;IAC3E,EAAE,IAAI,CAAC1B,eAAe;IACtB,IAAIyB,IAAI,EAAE;MACR,IAAI;QACF,OAAO,MAAM,IAAAG,0BAAgB,EAAC,MAAM;UAClC,MAAMC,KAAK,GAAG,IAAI,CAAC/B,YAAY,CAAC4B,UAAU,CAAC;UAC3C,MAAMI,IAAI,GAAGD,KAAK,CAACE,KAAK,EAAE;UAC1B,IAAI,CAACC,eAAC,CAACC,WAAW,CAACH,IAAI,CAAC,EAAE;YACxB,OAAOA,IAAI;UACb;QACF,CAAC,EAAE;UAACI,MAAM,EAAEvE,kBAAkB;UAAEwE,UAAU,EAAEzE,aAAa;UAAE0E,KAAK,EAAE;QAA4B,CAAC,CAAC;MAClG,CAAC,CAAC,OAAOC,GAAG,EAAE;QACZ,IAAI,CAACC,KAAK,EAAE;QACZ,MAAM,IAAIC,KAAK,CAACF,GAAG,CAAC;MACtB;IACF;EACF;EAOA5B,WAAWA,CAAEqB,IAAI,EAAE;IACjB,IAAIE,eAAC,CAACQ,QAAQ,CAACV,IAAI,CAAClB,QAAQ,EAAE/C,gBAAgB,CAAC,EAAE;MAC/C,IAAI,CAACyE,KAAK,EAAE;IACd;IACA,IAAIR,IAAI,CAACW,iBAAiB,KAAK,CAAC,EAAE;MAChC,IAAI,CAAC3C,YAAY,CAACgC,IAAI,CAACJ,UAAU,CAAC,CAACgB,IAAI,CAACZ,IAAI,CAAC;IAC/C,CAAC,MAAM,IAAI,IAAI,CAACjC,iBAAiB,CAAC8C,aAAa,CAAC7E,cAAc,GAAGgE,IAAI,CAACX,WAAW,CAAC,GAAG,CAAC,EAAE;MACtF,IAAI,CAACtB,iBAAiB,CAAC+C,IAAI,CAAC9E,cAAc,GAAGgE,IAAI,CAACX,WAAW,EAAEW,IAAI,CAAC;IACtE,CAAC,MAAM;MACL,MAAMlB,QAAQ,GAAGkB,IAAI,CAAClB,QAAQ;MAC9B,IAAIoB,eAAC,CAACa,QAAQ,CAACjC,QAAQ,CAAC,IAAI,IAAI,CAAClB,UAAU,CAACiD,aAAa,CAAC/B,QAAQ,CAAC,GAAG,CAAC,EAAE;QACvE,IAAI,CAAClB,UAAU,CAACkD,IAAI,CAAChC,QAAQ,EAAEkB,IAAI,CAAC;MACtC,CAAC,MAAM,IAAI,IAAI,CAACrC,kBAAkB,EAAE;QAClC,IAAI,CAACA,kBAAkB,CAACqC,IAAI,CAAC;MAC/B;MACA,IAAIA,IAAI,CAACgB,YAAY,EAAE;QACrB,IAAI,CAACC,SAAS,CAACjB,IAAI,CAAC;MACtB;IACF;EACF;EAMAiB,SAASA,CAAEjB,IAAI,EAAE;IACf,MAAMkB,KAAK,GAAG,IAAIC,mBAAU,CAAC;MAC3BvB,UAAU,EAAEI,IAAI,CAACJ,UAAU;MAC3BP,WAAW,EAAEW,IAAI,CAACX,WAAW;MAC7BP,QAAQ,EAAEsC,MAAM,CAACC,KAAK,CAACvF,kBAAkB,CAAC;MAC1C6E,iBAAiB,EAAEX,IAAI,CAACW,iBAAiB,GAAG,CAAC;MAC7CW,KAAK,EAAEC,mBAAU,CAACL;IACpB,CAAC,CAAC;IACF,IAAI,CAAC5C,aAAa,CAACuB,KAAK,CAACqB,KAAK,CAACM,KAAK,EAAE,CAAC;EACzC;AACF;AAACtF,OAAA,CAAAoB,iBAAA,GAAAA,iBAAA"}