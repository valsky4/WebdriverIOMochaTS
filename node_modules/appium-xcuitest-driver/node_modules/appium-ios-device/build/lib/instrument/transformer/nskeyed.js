"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NSUUID = exports.NSURL = exports.NSDate = exports.BaseArchiveHandler = void 0;
exports.archive = archive;
exports.unarchive = unarchive;
exports.updateNSKeyedArchiveClass = updateNSKeyedArchiveClass;
require("source-map-support/register");
var _bplistParser = _interopRequireDefault(require("bplist-parser"));
var _bplistCreator = _interopRequireDefault(require("bplist-creator"));
var _uuid = require("uuid");
var _lodash = _interopRequireDefault(require("lodash"));
const NSKEYED_ARCHIVE_VERSION = 100_000;
const NULL_UID = new _bplistParser.default.UID(0);
const CYCLE_TOKEN = 'CycleToken';
const PRIMITIVE_TYPES = ['Number', 'String', 'Boolean', 'UID', 'Buffer'];
const NON_ENCODABLE_TYPES = ['number', 'boolean'];
const NSKEYEDARCHIVER = 'NSKeyedArchiver';
const UNIX2APPLE_TIMESTAMP_SECOND = 978307200;
class ArchivedObject {
  constructor(object, unarchiver) {
    this.object = object;
    this._unarchiver = unarchiver;
  }
  decodeIndex(index) {
    return this._unarchiver.decodeObject(index);
  }
  decode(key) {
    return this._unarchiver.decodeKey(this.object, key);
  }
}
class ArchivingObject {
  constructor(object, archiver) {
    this._archiveObj = object;
    this._archiver = archiver;
  }
  encode(key, val) {
    this._archiveObj[key] = this._archiver.encode(val);
  }
}
class BaseArchiveHandler {
  decodeArchive(archive) {
    throw new Error(`Did not know how to decode the object`);
  }
  encodeArchive(obj, archive) {
    throw new Error(`Did not know how to encode the object`);
  }
}
exports.BaseArchiveHandler = BaseArchiveHandler;
class DictArchive extends BaseArchiveHandler {
  decodeArchive(archive) {
    const keyUids = archive.decode('NS.keys');
    const valUids = archive.decode('NS.objects');
    const d = {};
    for (let i = 0; i < keyUids.length; i++) {
      const key = archive.decodeIndex(keyUids[i]);
      d[key] = archive.decodeIndex(valUids[i]);
    }
    return d;
  }
}
class ListArchive extends BaseArchiveHandler {
  decodeArchive(archive) {
    const uids = archive.decode('NS.objects');
    return uids.map(archive.decodeIndex.bind(archive));
  }
}
class DTTapMessagePlist extends BaseArchiveHandler {
  decodeArchive(archive) {
    return archive.decode('DTTapMessagePlist');
  }
}
class NSError extends BaseArchiveHandler {
  decodeArchive(archive) {
    return {
      '$class': 'NSError',
      'domain': archive.decode('NSDomain'),
      'userinfo': archive.decode('NSUserInfo'),
      'code': archive.decode('NSCode')
    };
  }
}
class NSException extends BaseArchiveHandler {
  decodeArchive(archive) {
    return {
      '$class': 'NSException',
      'reason': archive.decode('NS.reason'),
      'userinfo': archive.decode('userinfo'),
      'name': archive.decode('NS.name')
    };
  }
}
class NSURL extends BaseArchiveHandler {
  constructor(base, relative) {
    super();
    this._base = base;
    this._relative = relative;
  }
  decodeArchive(archive) {
    return {
      $class: 'NSURL',
      base: archive.decode('NS.base'),
      relative: archive.decode('NS.relative')
    };
  }
  encodeArchive(obj, archive) {
    archive.encode('NS.base', obj._base);
    archive.encode('NS.relative', obj._relative);
  }
}
exports.NSURL = NSURL;
class NSDate extends BaseArchiveHandler {
  constructor(data) {
    super();
    this._data = data;
  }
  decodeArchive(archive) {
    return UNIX2APPLE_TIMESTAMP_SECOND + archive.decode('NS.time');
  }
  encodeArchive(obj, archive) {
    archive.encode('NS.time', obj._data - UNIX2APPLE_TIMESTAMP_SECOND);
  }
}
exports.NSDate = NSDate;
class NSMutableString extends BaseArchiveHandler {
  decodeArchive(archive) {
    return archive.decode('NS.string');
  }
}
class NSMutableData extends BaseArchiveHandler {
  decodeArchive(archive) {
    return archive.decode('NS.data');
  }
}
class NSUUID extends BaseArchiveHandler {
  constructor(data) {
    super();
    this._data = data;
  }
  decodeArchive(archive) {
    return (0, _uuid.stringify)(archive.decode('NS.uuidbytes'));
  }
  encodeArchive(obj, archive) {
    archive._archiveObj['NS.uuidbytes'] = Buffer.from((0, _uuid.parse)(obj._data).buffer);
  }
}
exports.NSUUID = NSUUID;
class XCTCapabilities extends BaseArchiveHandler {
  decodeArchive(archive) {
    return archive.decode('capabilities-dictionary');
  }
}
class NSNull extends BaseArchiveHandler {
  decodeArchive() {
    return null;
  }
}
const UNARCHIVE_CLASS_MAP = {
  DTTapMessagePlist,
  DTSysmonTapMessage: DTTapMessagePlist,
  DTTapHeartbeatMessage: DTTapMessagePlist,
  DTTapMessageArchive: DTTapMessagePlist,
  DTKTraceTapMessage: DTTapMessagePlist,
  ErrorArchive: NSError,
  ExceptionArchive: NSException,
  NSDictionary: DictArchive,
  NSMutableDictionary: DictArchive,
  NSArray: ListArchive,
  NSMutableArray: ListArchive,
  NSMutableSet: ListArchive,
  NSSet: ListArchive,
  NSDate,
  NSError,
  NSException,
  NSMutableString,
  NSMutableData,
  NSNull,
  NSUUID,
  NSURL,
  XCTCapabilities
};
class Unarchive {
  constructor(inputBytes) {
    this.input = inputBytes;
    this.unpackedUids = {};
    this.topUID = NULL_UID;
    this.objects = [];
  }
  unpackArchiveHeader() {
    const plist = _bplistParser.default.parseBuffer(this.input)[0];
    if (plist.$archiver !== NSKEYEDARCHIVER) {
      throw new Error(`unsupported encoder: ${plist.$archiver}`);
    }
    if (plist.$version !== NSKEYED_ARCHIVE_VERSION) {
      throw new Error(`expected ${NSKEYED_ARCHIVE_VERSION}, got ${plist.$version}`);
    }
    const top = plist.$top;
    const topUID = top.root;
    if (!topUID) {
      throw new Error(`top object did not have a UID! dump: ${JSON.stringify(top)}`);
    }
    this.topUID = topUID;
    this.objects = plist.$objects;
  }
  classForUid(index) {
    const meta = this.objects[index.UID];
    const name = meta.$classname;
    const klass = UNARCHIVE_CLASS_MAP[name];
    if (!klass) {
      throw new Error(`no mapping for ${name} in UNARCHIVE_CLASS_MAP`);
    }
    return klass;
  }
  decodeKey(obj, key) {
    const val = obj[key];
    return _lodash.default.isNil(val === null || val === void 0 ? void 0 : val.UID) ? val : this.decodeObject(val);
  }
  decodeObject(index) {
    if (index === NULL_UID) {
      return null;
    }
    const obj = this.unpackedUids[index];
    if (obj === CYCLE_TOKEN) {
      throw new Error(`archive has a cycle with ${index}`);
    }
    if (!_lodash.default.isUndefined(obj)) {
      return obj;
    }
    const rawObj = this.objects[index.UID];
    this.unpackedUids[index.UID] = CYCLE_TOKEN;
    if (!(rawObj !== null && rawObj !== void 0 && rawObj.$class)) {
      this.unpackedUids[index.UID] = obj;
      return rawObj;
    }
    const klass = this.classForUid(rawObj.$class);
    const klassObj = new klass().decodeArchive(new ArchivedObject(rawObj, this));
    this.unpackedUids[index.UID] = klassObj;
    return klassObj;
  }
  toObject() {
    this.unpackArchiveHeader();
    return this.decodeObject(this.topUID);
  }
}
class Archive {
  constructor(inputObject) {
    this.input = inputObject;
    this.classMap = {};
    this.objects = ['$null'];
  }
  uidForArchiver(archiver) {
    let val = this.classMap[archiver];
    if (val) {
      return new _bplistParser.default.UID(val);
    }
    this.classMap[archiver] = this.objects.length;
    val = new _bplistParser.default.UID(this.objects.length);
    this.objects.push({
      '$classes': [archiver],
      '$classname': archiver
    });
    return val;
  }
  archive(obj) {
    if (_lodash.default.isUndefined(obj) || _lodash.default.isNull(obj)) {
      return NULL_UID;
    }
    const index = new _bplistParser.default.UID(this.objects.length);
    if (PRIMITIVE_TYPES.includes(obj.constructor.name)) {
      this.objects.push(obj);
      return index;
    }
    const archiveObj = {};
    this.objects.push(archiveObj);
    this.encodeTopLevel(obj, archiveObj);
    return index;
  }
  encode(val) {
    if (NON_ENCODABLE_TYPES.includes(typeof val)) {
      return val;
    }
    return this.archive(val);
  }
  encodeTopLevel(obj, archiveObj) {
    if (obj instanceof Array) {
      return this.encodeArray(obj, archiveObj);
    } else if (obj instanceof Set) {
      return this.encodeSet(obj, archiveObj);
    } else if (obj instanceof Object) {
      const objName = obj.constructor.name;
      if (objName in UNARCHIVE_CLASS_MAP) {
        archiveObj.$class = this.uidForArchiver(objName);
        obj.encodeArchive(obj, new ArchivingObject(archiveObj, this));
      } else {
        return this.encodeDict(obj, archiveObj);
      }
    } else {
      throw Error(`Unable to encode types: ${typeof obj}`);
    }
  }
  encodeArray(objs, archiveObj) {
    archiveObj.$class = this.uidForArchiver('NSArray');
    archiveObj['NS.objects'] = objs.map(this.archive.bind(this));
  }
  encodeSet(objs, archiveObj) {
    archiveObj.$class = this.uidForArchiver('NSSet');
    archiveObj['NS.objects'] = objs.map(this.archive.bind(this));
  }
  encodeDict(obj, archiveObj) {
    archiveObj.$class = this.uidForArchiver('NSDictionary');
    archiveObj['NS.keys'] = _lodash.default.keys(obj).map(this.archive.bind(this));
    archiveObj['NS.objects'] = _lodash.default.values(obj).map(this.archive.bind(this));
  }
  toBytes() {
    if (this.objects.length === 1) {
      this.archive(this.input);
    }
    const d = {
      '$version': NSKEYED_ARCHIVE_VERSION,
      '$archiver': NSKEYEDARCHIVER,
      '$top': {
        'root': new _bplistParser.default.UID(1)
      },
      '$objects': this.objects
    };
    return (0, _bplistCreator.default)(d);
  }
}
function archive(inputObject) {
  return new Archive(inputObject).toBytes();
}
function unarchive(inputBytes) {
  return new Unarchive(inputBytes).toObject();
}
function updateNSKeyedArchiveClass(name, subClass) {
  var _subClass$prototype, _subClass$prototype2;
  if (!_lodash.default.isFunction((_subClass$prototype = subClass.prototype) === null || _subClass$prototype === void 0 ? void 0 : _subClass$prototype.decodeArchive) && !_lodash.default.isFunction((_subClass$prototype2 = subClass.prototype) === null || _subClass$prototype2 === void 0 ? void 0 : _subClass$prototype2.encodeArchive)) {
    throw Error('subClass must have decodeArchive or encodeArchive methods');
  }
  if (!(name in UNARCHIVE_CLASS_MAP)) {
    UNARCHIVE_CLASS_MAP[name] = subClass;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,