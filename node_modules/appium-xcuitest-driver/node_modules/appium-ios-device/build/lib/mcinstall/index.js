"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.MC_INSTALL_SERVICE_NAME = exports.MCInstallProxyService = void 0;
require("source-map-support/register");
var _baseService = require("../base-service");
var _support = require("@appium/support");
const MC_INSTALL_SERVICE_NAME = 'com.apple.mobile.MCInstall';
exports.MC_INSTALL_SERVICE_NAME = MC_INSTALL_SERVICE_NAME;
const ACKNOWLEDGED = 'Acknowledged';
function checkACK(res, name) {
  if (res.Status !== ACKNOWLEDGED) {
    throw new Error(`${name} error: ${JSON.stringify(res)}`);
  }
  return res;
}
class MCInstallProxyService extends _baseService.BaseServicePlist {
  constructor(socketClient) {
    super(socketClient);
  }
  async getProfileList() {
    const res = await this._plistService.sendPlistAndReceive({
      RequestType: 'GetProfileList'
    });
    return checkACK(res, 'getProfileList');
  }
  async installProfile(path) {
    const payload = await _support.fs.readFile(path);
    const res = await this._plistService.sendPlistAndReceive({
      'RequestType': 'InstallProfile',
      'Payload': payload
    });
    return checkACK(res, 'installProfile');
  }
  async removeProfile(ident) {
    const profiles = await this.getProfileList();
    const meta = profiles.ProfileMetadata[ident];
    if (!meta) {
      throw new Error(`not find installed profile ident:${ident}`);
    }
    const data = _support.plist.createBinaryPlist({
      'PayloadType': 'Configuration',
      'PayloadIdentifier': ident,
      'PayloadUUID': meta.PayloadUUID,
      'PayloadVersion': meta.PayloadVersion
    });
    const res = await this._plistService.sendPlistAndReceive({
      'RequestType': 'RemoveProfile',
      'ProfileIdentifier': data
    });
    return checkACK(res, 'removeProfile');
  }
}
exports.MCInstallProxyService = MCInstallProxyService;
var _default = MCInstallProxyService;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfYmFzZVNlcnZpY2UiLCJyZXF1aXJlIiwiX3N1cHBvcnQiLCJNQ19JTlNUQUxMX1NFUlZJQ0VfTkFNRSIsImV4cG9ydHMiLCJBQ0tOT1dMRURHRUQiLCJjaGVja0FDSyIsInJlcyIsIm5hbWUiLCJTdGF0dXMiLCJFcnJvciIsIkpTT04iLCJzdHJpbmdpZnkiLCJNQ0luc3RhbGxQcm94eVNlcnZpY2UiLCJCYXNlU2VydmljZVBsaXN0IiwiY29uc3RydWN0b3IiLCJzb2NrZXRDbGllbnQiLCJnZXRQcm9maWxlTGlzdCIsIl9wbGlzdFNlcnZpY2UiLCJzZW5kUGxpc3RBbmRSZWNlaXZlIiwiUmVxdWVzdFR5cGUiLCJpbnN0YWxsUHJvZmlsZSIsInBhdGgiLCJwYXlsb2FkIiwiZnMiLCJyZWFkRmlsZSIsInJlbW92ZVByb2ZpbGUiLCJpZGVudCIsInByb2ZpbGVzIiwibWV0YSIsIlByb2ZpbGVNZXRhZGF0YSIsImRhdGEiLCJwbGlzdCIsImNyZWF0ZUJpbmFyeVBsaXN0IiwiUGF5bG9hZFVVSUQiLCJQYXlsb2FkVmVyc2lvbiIsIl9kZWZhdWx0IiwiZGVmYXVsdCJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9tY2luc3RhbGwvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtCYXNlU2VydmljZVBsaXN0fSBmcm9tICcuLi9iYXNlLXNlcnZpY2UnO1xuaW1wb3J0IHtmcywgcGxpc3R9IGZyb20gJ0BhcHBpdW0vc3VwcG9ydCc7XG5cblxuY29uc3QgTUNfSU5TVEFMTF9TRVJWSUNFX05BTUUgPSAnY29tLmFwcGxlLm1vYmlsZS5NQ0luc3RhbGwnO1xuY29uc3QgQUNLTk9XTEVER0VEID0gJ0Fja25vd2xlZGdlZCc7XG5cbmZ1bmN0aW9uIGNoZWNrQUNLIChyZXMsIG5hbWUpIHtcbiAgaWYgKHJlcy5TdGF0dXMgIT09IEFDS05PV0xFREdFRCkge1xuICAgIHRocm93IG5ldyBFcnJvcihgJHtuYW1lfSBlcnJvcjogJHtKU09OLnN0cmluZ2lmeShyZXMpfWApO1xuICB9XG4gIHJldHVybiByZXM7XG59XG5cbmNsYXNzIE1DSW5zdGFsbFByb3h5U2VydmljZSBleHRlbmRzIEJhc2VTZXJ2aWNlUGxpc3Qge1xuICBjb25zdHJ1Y3RvciAoc29ja2V0Q2xpZW50KSB7XG4gICAgc3VwZXIoc29ja2V0Q2xpZW50KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAdHlwZWRlZiB7T2JqZWN0fSBQcm9maWxlTGlzdFxuICAgKiBAcHJvcGVydHkge0FycmF5fSBPcmRlcmVkSWRlbnRpZmllcnMgbGlzdCBvZiBhbGwgcHJvZmlsZSBpZGVudFxuICAgKiBAcHJvcGVydHkge09iamVjdH0gUHJvZmlsZU1hbmlmZXN0XG4gICAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBQcm9maWxlTWV0YWRhdGFcbiAgICogQHByb3BlcnR5IHtTdHJpbmd9IFN0YXR1c1xuICAgKi9cblxuICAvKipcbiAgICogR2V0IGFsbCBwcm9maWxlcyBvZiBpT1MgZGV2aWNlc1xuICAgKiBAcmV0dXJucyB7UHJvZmlsZUxpc3R9XG4gICAqIGUuZy5cbiAgICoge1xuICAgKiAgIE9yZGVyZWRJZGVudGlmaWVyczogWyAnMmZhYzFjMmIzZDY4NDg0MzE4OWIyOTgxYzcxOGIwMTMyODU0YTg0N2EnIF0sXG4gICAqICAgUHJvZmlsZU1hbmlmZXN0OiB7XG4gICAqICAgICAnMmZhYzFjMmIzZDY4NDg0MzE4OWIyOTgxYzcxOGIwMTMyODU0YTg0N2EnOiB7XG4gICAqICAgICAgIERlc2NyaXB0aW9uOiAnQ2hhcmxlcyBQcm94eSBDQSAoNyBEZWMgMjAyMCwgTWFjQm9vay1Qcm8ubG9jYWwpJyxcbiAgICogICAgICAgSXNBY3RpdmU6IHRydWVcbiAgICogICAgIH1cbiAgICogICB9LFxuICAgKiAgIFByb2ZpbGVNZXRhZGF0YToge1xuICAgKiAgICAgJzJmYWMxYzJiM2Q2ODQ4NDMxODliMjk4MWM3MThiMDEzMjg1NGE4NDdhJzoge1xuICAgKiAgICAgICBQYXlsb2FkRGlzcGxheU5hbWU6ICdDaGFybGVzIFByb3h5IENBICg3IERlYyAyMDIwLCBNYWNCb29rLVByby5sb2NhbCknLFxuICAgKiAgICAgICBQYXlsb2FkUmVtb3ZhbERpc2FsbG93ZWQ6IGZhbHNlLFxuICAgKiAgICAgICBQYXlsb2FkVVVJRDogJ0IzMDAwNUNDLUJDNzMtNEU0Mi04NTQ1LThEQTZDNDRBOEE3MScsXG4gICAqICAgICAgIFBheWxvYWRWZXJzaW9uOiAxXG4gICAqICAgICB9XG4gICAqICAgfSxcbiAgICogICBTdGF0dXM6ICdBY2tub3dsZWRnZWQnXG4gICAqIH1cbiAgICovXG4gIGFzeW5jIGdldFByb2ZpbGVMaXN0ICgpIHtcbiAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLl9wbGlzdFNlcnZpY2Uuc2VuZFBsaXN0QW5kUmVjZWl2ZSh7UmVxdWVzdFR5cGU6ICdHZXRQcm9maWxlTGlzdCd9KTtcbiAgICByZXR1cm4gY2hlY2tBQ0socmVzLCAnZ2V0UHJvZmlsZUxpc3QnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbnN0YWxsIHByb2ZpbGUgdG8gaU9TIGRldmljZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gcGF0aCAgbXVzdCBiZSBhIGNlcnRpZmljYXRlIGZpbGUgLlBFTSAuQ0VSIGFuZCBtb3JlIGZvcm1hdHNcbiAgICogZS5nOiAvRG93bmxvYWRzL2NoYXJsZXMtY2VydGlmaWNhdGUucGVtXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IGUuZy4ge1N0YXR1czogJ0Fja25vd2xlZGdlZCd9XG4gICAqL1xuICBhc3luYyBpbnN0YWxsUHJvZmlsZSAocGF0aCkge1xuICAgIGNvbnN0IHBheWxvYWQgPSBhd2FpdCBmcy5yZWFkRmlsZShwYXRoKTtcbiAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLl9wbGlzdFNlcnZpY2Uuc2VuZFBsaXN0QW5kUmVjZWl2ZSh7J1JlcXVlc3RUeXBlJzogJ0luc3RhbGxQcm9maWxlJywgJ1BheWxvYWQnOiBwYXlsb2FkfSk7XG4gICAgcmV0dXJuIGNoZWNrQUNLKHJlcywgJ2luc3RhbGxQcm9maWxlJyk7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlIHByb2ZpbGUgZnJvbSBpT1MgZGV2aWNlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBpZGVudCAgUXVlcnkgaWRlbnRpZmllciBsaXN0IHRocm91Z2ggZ2V0UHJvZmlsZUxpc3QgbWV0aG9kXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IGUuZy4ge1N0YXR1czogJ0Fja25vd2xlZGdlZCd9XG4gICAqL1xuICBhc3luYyByZW1vdmVQcm9maWxlIChpZGVudCkge1xuICAgIGNvbnN0IHByb2ZpbGVzID0gYXdhaXQgdGhpcy5nZXRQcm9maWxlTGlzdCgpO1xuICAgIGNvbnN0IG1ldGEgPSBwcm9maWxlcy5Qcm9maWxlTWV0YWRhdGFbaWRlbnRdO1xuICAgIGlmICghbWV0YSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBub3QgZmluZCBpbnN0YWxsZWQgcHJvZmlsZSBpZGVudDoke2lkZW50fWApO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gcGxpc3QuY3JlYXRlQmluYXJ5UGxpc3QoeydQYXlsb2FkVHlwZSc6ICdDb25maWd1cmF0aW9uJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdQYXlsb2FkSWRlbnRpZmllcic6IGlkZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1BheWxvYWRVVUlEJzogbWV0YS5QYXlsb2FkVVVJRCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdQYXlsb2FkVmVyc2lvbic6IG1ldGEuUGF5bG9hZFZlcnNpb259KTtcbiAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLl9wbGlzdFNlcnZpY2Uuc2VuZFBsaXN0QW5kUmVjZWl2ZSh7J1JlcXVlc3RUeXBlJzogJ1JlbW92ZVByb2ZpbGUnLCAnUHJvZmlsZUlkZW50aWZpZXInOiBkYXRhfSk7XG4gICAgcmV0dXJuIGNoZWNrQUNLKHJlcywgJ3JlbW92ZVByb2ZpbGUnKTtcbiAgfVxufVxuXG5leHBvcnQgeyBNQ0luc3RhbGxQcm94eVNlcnZpY2UsIE1DX0lOU1RBTExfU0VSVklDRV9OQU1FIH07XG5leHBvcnQgZGVmYXVsdCBNQ0luc3RhbGxQcm94eVNlcnZpY2U7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxJQUFBQSxZQUFBLEdBQUFDLE9BQUE7QUFDQSxJQUFBQyxRQUFBLEdBQUFELE9BQUE7QUFHQSxNQUFNRSx1QkFBdUIsR0FBRyw0QkFBNEI7QUFBQ0MsT0FBQSxDQUFBRCx1QkFBQSxHQUFBQSx1QkFBQTtBQUM3RCxNQUFNRSxZQUFZLEdBQUcsY0FBYztBQUVuQyxTQUFTQyxRQUFRQSxDQUFFQyxHQUFHLEVBQUVDLElBQUksRUFBRTtFQUM1QixJQUFJRCxHQUFHLENBQUNFLE1BQU0sS0FBS0osWUFBWSxFQUFFO0lBQy9CLE1BQU0sSUFBSUssS0FBSyxDQUFFLEdBQUVGLElBQUssV0FBVUcsSUFBSSxDQUFDQyxTQUFTLENBQUNMLEdBQUcsQ0FBRSxFQUFDLENBQUM7RUFDMUQ7RUFDQSxPQUFPQSxHQUFHO0FBQ1o7QUFFQSxNQUFNTSxxQkFBcUIsU0FBU0MsNkJBQWdCLENBQUM7RUFDbkRDLFdBQVdBLENBQUVDLFlBQVksRUFBRTtJQUN6QixLQUFLLENBQUNBLFlBQVksQ0FBQztFQUNyQjtFQWlDQSxNQUFNQyxjQUFjQSxDQUFBLEVBQUk7SUFDdEIsTUFBTVYsR0FBRyxHQUFHLE1BQU0sSUFBSSxDQUFDVyxhQUFhLENBQUNDLG1CQUFtQixDQUFDO01BQUNDLFdBQVcsRUFBRTtJQUFnQixDQUFDLENBQUM7SUFDekYsT0FBT2QsUUFBUSxDQUFDQyxHQUFHLEVBQUUsZ0JBQWdCLENBQUM7RUFDeEM7RUFRQSxNQUFNYyxjQUFjQSxDQUFFQyxJQUFJLEVBQUU7SUFDMUIsTUFBTUMsT0FBTyxHQUFHLE1BQU1DLFdBQUUsQ0FBQ0MsUUFBUSxDQUFDSCxJQUFJLENBQUM7SUFDdkMsTUFBTWYsR0FBRyxHQUFHLE1BQU0sSUFBSSxDQUFDVyxhQUFhLENBQUNDLG1CQUFtQixDQUFDO01BQUMsYUFBYSxFQUFFLGdCQUFnQjtNQUFFLFNBQVMsRUFBRUk7SUFBTyxDQUFDLENBQUM7SUFDL0csT0FBT2pCLFFBQVEsQ0FBQ0MsR0FBRyxFQUFFLGdCQUFnQixDQUFDO0VBQ3hDO0VBT0EsTUFBTW1CLGFBQWFBLENBQUVDLEtBQUssRUFBRTtJQUMxQixNQUFNQyxRQUFRLEdBQUcsTUFBTSxJQUFJLENBQUNYLGNBQWMsRUFBRTtJQUM1QyxNQUFNWSxJQUFJLEdBQUdELFFBQVEsQ0FBQ0UsZUFBZSxDQUFDSCxLQUFLLENBQUM7SUFDNUMsSUFBSSxDQUFDRSxJQUFJLEVBQUU7TUFDVCxNQUFNLElBQUluQixLQUFLLENBQUUsb0NBQW1DaUIsS0FBTSxFQUFDLENBQUM7SUFDOUQ7SUFDQSxNQUFNSSxJQUFJLEdBQUdDLGNBQUssQ0FBQ0MsaUJBQWlCLENBQUM7TUFBQyxhQUFhLEVBQUUsZUFBZTtNQUM5QixtQkFBbUIsRUFBRU4sS0FBSztNQUMxQixhQUFhLEVBQUVFLElBQUksQ0FBQ0ssV0FBVztNQUMvQixnQkFBZ0IsRUFBRUwsSUFBSSxDQUFDTTtJQUFjLENBQUMsQ0FBQztJQUM3RSxNQUFNNUIsR0FBRyxHQUFHLE1BQU0sSUFBSSxDQUFDVyxhQUFhLENBQUNDLG1CQUFtQixDQUFDO01BQUMsYUFBYSxFQUFFLGVBQWU7TUFBRSxtQkFBbUIsRUFBRVk7SUFBSSxDQUFDLENBQUM7SUFDckgsT0FBT3pCLFFBQVEsQ0FBQ0MsR0FBRyxFQUFFLGVBQWUsQ0FBQztFQUN2QztBQUNGO0FBQUNILE9BQUEsQ0FBQVMscUJBQUEsR0FBQUEscUJBQUE7QUFBQSxJQUFBdUIsUUFBQSxHQUdjdkIscUJBQXFCO0FBQUFULE9BQUEsQ0FBQWlDLE9BQUEsR0FBQUQsUUFBQSJ9