{"version":3,"file":"index.js","names":["_baseService","require","_support","MC_INSTALL_SERVICE_NAME","exports","ACKNOWLEDGED","checkACK","res","name","Status","Error","JSON","stringify","MCInstallProxyService","BaseServicePlist","constructor","socketClient","getProfileList","_plistService","sendPlistAndReceive","RequestType","installProfile","path","payload","fs","readFile","removeProfile","ident","profiles","meta","ProfileMetadata","data","plist","createBinaryPlist","PayloadUUID","PayloadVersion","_default","default"],"sources":["../../../lib/mcinstall/index.js"],"sourcesContent":["import {BaseServicePlist} from '../base-service';\nimport {fs, plist} from '@appium/support';\n\n\nconst MC_INSTALL_SERVICE_NAME = 'com.apple.mobile.MCInstall';\nconst ACKNOWLEDGED = 'Acknowledged';\n\nfunction checkACK (res, name) {\n  if (res.Status !== ACKNOWLEDGED) {\n    throw new Error(`${name} error: ${JSON.stringify(res)}`);\n  }\n  return res;\n}\n\nclass MCInstallProxyService extends BaseServicePlist {\n  constructor (socketClient) {\n    super(socketClient);\n  }\n\n  /**\n   * @typedef {Object} ProfileList\n   * @property {Array} OrderedIdentifiers list of all profile ident\n   * @property {Object} ProfileManifest\n   * @property {Object} ProfileMetadata\n   * @property {String} Status\n   */\n\n  /**\n   * Get all profiles of iOS devices\n   * @returns {ProfileList}\n   * e.g.\n   * {\n   *   OrderedIdentifiers: [ '2fac1c2b3d684843189b2981c718b0132854a847a' ],\n   *   ProfileManifest: {\n   *     '2fac1c2b3d684843189b2981c718b0132854a847a': {\n   *       Description: 'Charles Proxy CA (7 Dec 2020, MacBook-Pro.local)',\n   *       IsActive: true\n   *     }\n   *   },\n   *   ProfileMetadata: {\n   *     '2fac1c2b3d684843189b2981c718b0132854a847a': {\n   *       PayloadDisplayName: 'Charles Proxy CA (7 Dec 2020, MacBook-Pro.local)',\n   *       PayloadRemovalDisallowed: false,\n   *       PayloadUUID: 'B30005CC-BC73-4E42-8545-8DA6C44A8A71',\n   *       PayloadVersion: 1\n   *     }\n   *   },\n   *   Status: 'Acknowledged'\n   * }\n   */\n  async getProfileList () {\n    const res = await this._plistService.sendPlistAndReceive({RequestType: 'GetProfileList'});\n    return checkACK(res, 'getProfileList');\n  }\n\n  /**\n   * Install profile to iOS device\n   * @param {String} path  must be a certificate file .PEM .CER and more formats\n   * e.g: /Downloads/charles-certificate.pem\n   * @returns {Object} e.g. {Status: 'Acknowledged'}\n   */\n  async installProfile (path) {\n    const payload = await fs.readFile(path);\n    const res = await this._plistService.sendPlistAndReceive({'RequestType': 'InstallProfile', 'Payload': payload});\n    return checkACK(res, 'installProfile');\n  }\n\n  /**\n   * Remove profile from iOS device\n   * @param {String} ident  Query identifier list through getProfileList method\n   * @returns {Object} e.g. {Status: 'Acknowledged'}\n   */\n  async removeProfile (ident) {\n    const profiles = await this.getProfileList();\n    const meta = profiles.ProfileMetadata[ident];\n    if (!meta) {\n      throw new Error(`not find installed profile ident:${ident}`);\n    }\n    const data = plist.createBinaryPlist({'PayloadType': 'Configuration',\n                                          'PayloadIdentifier': ident,\n                                          'PayloadUUID': meta.PayloadUUID,\n                                          'PayloadVersion': meta.PayloadVersion});\n    const res = await this._plistService.sendPlistAndReceive({'RequestType': 'RemoveProfile', 'ProfileIdentifier': data});\n    return checkACK(res, 'removeProfile');\n  }\n}\n\nexport { MCInstallProxyService, MC_INSTALL_SERVICE_NAME };\nexport default MCInstallProxyService;\n"],"mappings":";;;;;;;AAAA,IAAAA,YAAA,GAAAC,OAAA;AACA,IAAAC,QAAA,GAAAD,OAAA;AAGA,MAAME,uBAAuB,GAAG,4BAA4B;AAACC,OAAA,CAAAD,uBAAA,GAAAA,uBAAA;AAC7D,MAAME,YAAY,GAAG,cAAc;AAEnC,SAASC,QAAQA,CAAEC,GAAG,EAAEC,IAAI,EAAE;EAC5B,IAAID,GAAG,CAACE,MAAM,KAAKJ,YAAY,EAAE;IAC/B,MAAM,IAAIK,KAAK,CAAE,GAAEF,IAAK,WAAUG,IAAI,CAACC,SAAS,CAACL,GAAG,CAAE,EAAC,CAAC;EAC1D;EACA,OAAOA,GAAG;AACZ;AAEA,MAAMM,qBAAqB,SAASC,6BAAgB,CAAC;EACnDC,WAAWA,CAAEC,YAAY,EAAE;IACzB,KAAK,CAACA,YAAY,CAAC;EACrB;EAiCA,MAAMC,cAAcA,CAAA,EAAI;IACtB,MAAMV,GAAG,GAAG,MAAM,IAAI,CAACW,aAAa,CAACC,mBAAmB,CAAC;MAACC,WAAW,EAAE;IAAgB,CAAC,CAAC;IACzF,OAAOd,QAAQ,CAACC,GAAG,EAAE,gBAAgB,CAAC;EACxC;EAQA,MAAMc,cAAcA,CAAEC,IAAI,EAAE;IAC1B,MAAMC,OAAO,GAAG,MAAMC,WAAE,CAACC,QAAQ,CAACH,IAAI,CAAC;IACvC,MAAMf,GAAG,GAAG,MAAM,IAAI,CAACW,aAAa,CAACC,mBAAmB,CAAC;MAAC,aAAa,EAAE,gBAAgB;MAAE,SAAS,EAAEI;IAAO,CAAC,CAAC;IAC/G,OAAOjB,QAAQ,CAACC,GAAG,EAAE,gBAAgB,CAAC;EACxC;EAOA,MAAMmB,aAAaA,CAAEC,KAAK,EAAE;IAC1B,MAAMC,QAAQ,GAAG,MAAM,IAAI,CAACX,cAAc,EAAE;IAC5C,MAAMY,IAAI,GAAGD,QAAQ,CAACE,eAAe,CAACH,KAAK,CAAC;IAC5C,IAAI,CAACE,IAAI,EAAE;MACT,MAAM,IAAInB,KAAK,CAAE,oCAAmCiB,KAAM,EAAC,CAAC;IAC9D;IACA,MAAMI,IAAI,GAAGC,cAAK,CAACC,iBAAiB,CAAC;MAAC,aAAa,EAAE,eAAe;MAC9B,mBAAmB,EAAEN,KAAK;MAC1B,aAAa,EAAEE,IAAI,CAACK,WAAW;MAC/B,gBAAgB,EAAEL,IAAI,CAACM;IAAc,CAAC,CAAC;IAC7E,MAAM5B,GAAG,GAAG,MAAM,IAAI,CAACW,aAAa,CAACC,mBAAmB,CAAC;MAAC,aAAa,EAAE,eAAe;MAAE,mBAAmB,EAAEY;IAAI,CAAC,CAAC;IACrH,OAAOzB,QAAQ,CAACC,GAAG,EAAE,eAAe,CAAC;EACvC;AACF;AAACH,OAAA,CAAAS,qBAAA,GAAAA,qBAAA;AAAA,IAAAuB,QAAA,GAGcvB,qBAAqB;AAAAT,OAAA,CAAAiC,OAAA,GAAAD,QAAA"}