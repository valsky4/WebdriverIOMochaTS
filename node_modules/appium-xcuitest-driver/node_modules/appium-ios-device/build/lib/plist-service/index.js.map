{"version":3,"file":"index.js","names":["_bluebird","_interopRequireDefault","require","_sslHelper","_plistServiceEncoder","_plistServiceDecoder","_lengthBasedSplitter","_baseService","_constants","MAX_FRAME_SIZE","MB","CHECK_FREQ_MS","PlistService","BaseServiceSocket","constructor","socketClient","_decoder","PlistServiceDecoder","_splitter","LengthBasedSplitter","readableStream","littleEndian","maxFrameLength","lengthFieldOffset","lengthFieldLength","lengthAdjustment","_socketClient","pipe","_encoder","PlistServiceEncoder","_assignClientFailureHandlers","replyQueue","on","data","push","sendPlistAndReceive","json","timeout","sendPlist","receivePlist","Error","write","B","resolve","reject","queue","shift","checkExist","setInterval","clearInterval","setTimeout","enableSessionSSL","hostPrivateKey","hostCertificate","unpipe","upgradeToSSL","exports","_default","default"],"sources":["../../../lib/plist-service/index.js"],"sourcesContent":["import B from 'bluebird';\nimport { upgradeToSSL } from '../ssl-helper';\nimport PlistServiceEncoder from './transformer/plist-service-encoder';\nimport PlistServiceDecoder from './transformer/plist-service-decoder';\nimport LengthBasedSplitter from '../util/transformer/length-based-splitter';\nimport { BaseServiceSocket } from '../base-service';\nimport { MB } from '../constants';\n\n\nconst MAX_FRAME_SIZE = 1 * MB;\n\nconst CHECK_FREQ_MS = 50;\n\nclass PlistService extends BaseServiceSocket {\n  constructor (socketClient) {\n    super(socketClient);\n\n    this._decoder = new PlistServiceDecoder();\n    this._splitter = new LengthBasedSplitter({\n      readableStream: socketClient,\n      littleEndian: false,\n      maxFrameLength: MAX_FRAME_SIZE,\n      lengthFieldOffset: 0,\n      lengthFieldLength: 4,\n      lengthAdjustment: 4,\n    });\n    this._socketClient.pipe(this._splitter).pipe(this._decoder);\n\n    this._encoder = new PlistServiceEncoder();\n    this._encoder.pipe(this._socketClient);\n    this._assignClientFailureHandlers(this._encoder);\n\n    this.replyQueue = [];\n    this._decoder.on('data', (data) => this.replyQueue.push(data));\n  }\n\n  async sendPlistAndReceive (json, timeout = 5000) {\n    this.sendPlist(json);\n    return await this.receivePlist(timeout);\n  }\n\n  sendPlist (json) {\n    if (!json) {\n      throw new Error('Cant send a null a object');\n    }\n    this._encoder.write(json);\n  }\n\n  async receivePlist (timeout = 5000) {\n    return await new B((resolve, reject) => {\n      const queue = this.replyQueue;\n      const data = queue.shift();\n      if (data) {\n        resolve(data);\n        return;\n      }\n      const checkExist = setInterval(() => {\n        const data = queue.shift();\n        if (!data) {\n          return;\n        }\n        clearInterval(checkExist);\n        resolve(data);\n      }, CHECK_FREQ_MS);\n      setTimeout(() => {\n        clearInterval(checkExist);\n        reject(new Error(`Failed to receive any data within the timeout: ${timeout}`));\n      }, timeout);\n    });\n  }\n\n  enableSessionSSL (hostPrivateKey, hostCertificate) {\n    this._socketClient.unpipe(this._splitter);\n    this._encoder.unpipe(this._socketClient);\n    this._socketClient = upgradeToSSL(this._socketClient, hostPrivateKey, hostCertificate);\n    this._encoder.pipe(this._socketClient);\n    this._socketClient.pipe(this._splitter).pipe(this._decoder);\n  }\n}\n\nexport { PlistService };\nexport default PlistService;\n"],"mappings":"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"}