"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.enableSSLHandshakeOnly = enableSSLHandshakeOnly;
exports.upgradeToSSL = upgradeToSSL;
require("source-map-support/register");
var _tls = _interopRequireDefault(require("tls"));
var _net = _interopRequireDefault(require("net"));
var _bluebird = _interopRequireDefault(require("bluebird"));
const HANDSHAKE_TIMEOUT_MS = 10000;
function upgradeToSSL(socket, key, cert) {
  return new _tls.default.TLSSocket(socket, {
    rejectUnauthorized: false,
    secureContext: _tls.default.createSecureContext({
      key,
      cert
    })
  });
}
async function enableSSLHandshakeOnly(socket, key, cert) {
  const sslSocket = _tls.default.connect({
    socket,
    secureContext: _tls.default.createSecureContext({
      key,
      cert
    }),
    rejectUnauthorized: false
  });
  await new _bluebird.default((resolve, reject) => {
    const timeoutHandler = setTimeout(() => {
      if (!sslSocket.destroyed) {
        sslSocket.end();
      }
      return reject(new Error('ssl handshake error'));
    }, HANDSHAKE_TIMEOUT_MS);
    sslSocket.once('secureConnect', () => {
      clearTimeout(timeoutHandler);
      sslSocket._handle.readStop();
      return resolve();
    });
  });
  return _net.default.Socket({
    fd: socket._handle.fd
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfdGxzIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfbmV0IiwiX2JsdWViaXJkIiwiSEFORFNIQUtFX1RJTUVPVVRfTVMiLCJ1cGdyYWRlVG9TU0wiLCJzb2NrZXQiLCJrZXkiLCJjZXJ0IiwidGxzIiwiVExTU29ja2V0IiwicmVqZWN0VW5hdXRob3JpemVkIiwic2VjdXJlQ29udGV4dCIsImNyZWF0ZVNlY3VyZUNvbnRleHQiLCJlbmFibGVTU0xIYW5kc2hha2VPbmx5Iiwic3NsU29ja2V0IiwiY29ubmVjdCIsIkIiLCJyZXNvbHZlIiwicmVqZWN0IiwidGltZW91dEhhbmRsZXIiLCJzZXRUaW1lb3V0IiwiZGVzdHJveWVkIiwiZW5kIiwiRXJyb3IiLCJvbmNlIiwiY2xlYXJUaW1lb3V0IiwiX2hhbmRsZSIsInJlYWRTdG9wIiwibmV0IiwiU29ja2V0IiwiZmQiXSwic291cmNlcyI6WyIuLi8uLi9saWIvc3NsLWhlbHBlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdGxzIGZyb20gJ3Rscyc7XG5pbXBvcnQgbmV0IGZyb20gJ25ldCc7XG5pbXBvcnQgQiBmcm9tICdibHVlYmlyZCc7XG5cbmNvbnN0IEhBTkRTSEFLRV9USU1FT1VUX01TID0gMTAwMDA7XG5cbmZ1bmN0aW9uIHVwZ3JhZGVUb1NTTCAoc29ja2V0LCBrZXksIGNlcnQpIHtcbiAgcmV0dXJuIG5ldyB0bHMuVExTU29ja2V0KHNvY2tldCwge1xuICAgIHJlamVjdFVuYXV0aG9yaXplZDogZmFsc2UsXG4gICAgc2VjdXJlQ29udGV4dDogdGxzLmNyZWF0ZVNlY3VyZUNvbnRleHQoe1xuICAgICAga2V5LFxuICAgICAgY2VydFxuICAgIH0pXG4gIH0pO1xufVxuXG4vKipcbiAqIEFmdGVyIHRoZSBzc2wgcHJvdG9jb2wgaXMgc3VjY2Vzc2Z1bGx5IGhhbmRzaGFrZSwgY2xvc2UgdGhlIHNzbCBwcm90b2NvbCBjaGFubmVsIGFuZCB1c2UgdGV4dCB0cmFuc21pc3Npb25cbiAqIEBwYXJhbSBzb2NrZXRcbiAqIEBwYXJhbSBrZXlcbiAqIEBwYXJhbSBjZXJ0XG4gKiBAcmV0dXJucyB7UHJvbWlzZTxTb2NrZXQ+fSBEdXBsaWNhdGUgdGhlIGlucHV0IHNvY2tldFxuICovXG5hc3luYyBmdW5jdGlvbiBlbmFibGVTU0xIYW5kc2hha2VPbmx5IChzb2NrZXQsIGtleSwgY2VydCkge1xuICBjb25zdCBzc2xTb2NrZXQgPSB0bHMuY29ubmVjdCh7XG4gICAgc29ja2V0LFxuICAgIHNlY3VyZUNvbnRleHQ6IHRscy5jcmVhdGVTZWN1cmVDb250ZXh0KHtcbiAgICAgIGtleSxcbiAgICAgIGNlcnRcbiAgICB9KSxcbiAgICByZWplY3RVbmF1dGhvcml6ZWQ6IGZhbHNlLFxuICB9KTtcblxuICAvLyBzdG9wIHJlY2VpdmluZyBkYXRhIGFmdGVyIHN1Y2Nlc3NmdWwgaGFuZHNoYWtlXG4gIGF3YWl0IG5ldyBCKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBjb25zdCB0aW1lb3V0SGFuZGxlciA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgaWYgKCFzc2xTb2NrZXQuZGVzdHJveWVkKSB7XG4gICAgICAgIHNzbFNvY2tldC5lbmQoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZWplY3QobmV3IEVycm9yKCdzc2wgaGFuZHNoYWtlIGVycm9yJykpO1xuICAgIH0sIEhBTkRTSEFLRV9USU1FT1VUX01TKTtcblxuICAgIHNzbFNvY2tldC5vbmNlKCdzZWN1cmVDb25uZWN0JywgKCkgPT4ge1xuICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXRIYW5kbGVyKTtcbiAgICAgIHNzbFNvY2tldC5faGFuZGxlLnJlYWRTdG9wKCk7XG4gICAgICByZXR1cm4gcmVzb2x2ZSgpO1xuICAgIH0pO1xuICB9KTtcbiAgLy8gRHVwbGljYXRlIHRoZSBzb2NrZXQuIFJldHVybiBhIG5ldyBzb2NrZXQgb2JqZWN0IGNvbm5lY3RlZCB0byB0aGUgc2FtZSBzeXN0ZW0gcmVzb3VyY2VcbiAgcmV0dXJuIG5ldC5Tb2NrZXQoe2ZkOiBzb2NrZXQuX2hhbmRsZS5mZH0pO1xufVxuXG5cbmV4cG9ydCB7IHVwZ3JhZGVUb1NTTCwgZW5hYmxlU1NMSGFuZHNoYWtlT25seSB9O1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSxJQUFBQSxJQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxJQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRSxTQUFBLEdBQUFILHNCQUFBLENBQUFDLE9BQUE7QUFFQSxNQUFNRyxvQkFBb0IsR0FBRyxLQUFLO0FBRWxDLFNBQVNDLFlBQVlBLENBQUVDLE1BQU0sRUFBRUMsR0FBRyxFQUFFQyxJQUFJLEVBQUU7RUFDeEMsT0FBTyxJQUFJQyxZQUFHLENBQUNDLFNBQVMsQ0FBQ0osTUFBTSxFQUFFO0lBQy9CSyxrQkFBa0IsRUFBRSxLQUFLO0lBQ3pCQyxhQUFhLEVBQUVILFlBQUcsQ0FBQ0ksbUJBQW1CLENBQUM7TUFDckNOLEdBQUc7TUFDSEM7SUFDRixDQUFDO0VBQ0gsQ0FBQyxDQUFDO0FBQ0o7QUFTQSxlQUFlTSxzQkFBc0JBLENBQUVSLE1BQU0sRUFBRUMsR0FBRyxFQUFFQyxJQUFJLEVBQUU7RUFDeEQsTUFBTU8sU0FBUyxHQUFHTixZQUFHLENBQUNPLE9BQU8sQ0FBQztJQUM1QlYsTUFBTTtJQUNOTSxhQUFhLEVBQUVILFlBQUcsQ0FBQ0ksbUJBQW1CLENBQUM7TUFDckNOLEdBQUc7TUFDSEM7SUFDRixDQUFDLENBQUM7SUFDRkcsa0JBQWtCLEVBQUU7RUFDdEIsQ0FBQyxDQUFDO0VBR0YsTUFBTSxJQUFJTSxpQkFBQyxDQUFDLENBQUNDLE9BQU8sRUFBRUMsTUFBTSxLQUFLO0lBQy9CLE1BQU1DLGNBQWMsR0FBR0MsVUFBVSxDQUFDLE1BQU07TUFDdEMsSUFBSSxDQUFDTixTQUFTLENBQUNPLFNBQVMsRUFBRTtRQUN4QlAsU0FBUyxDQUFDUSxHQUFHLEVBQUU7TUFDakI7TUFDQSxPQUFPSixNQUFNLENBQUMsSUFBSUssS0FBSyxDQUFDLHFCQUFxQixDQUFDLENBQUM7SUFDakQsQ0FBQyxFQUFFcEIsb0JBQW9CLENBQUM7SUFFeEJXLFNBQVMsQ0FBQ1UsSUFBSSxDQUFDLGVBQWUsRUFBRSxNQUFNO01BQ3BDQyxZQUFZLENBQUNOLGNBQWMsQ0FBQztNQUM1QkwsU0FBUyxDQUFDWSxPQUFPLENBQUNDLFFBQVEsRUFBRTtNQUM1QixPQUFPVixPQUFPLEVBQUU7SUFDbEIsQ0FBQyxDQUFDO0VBQ0osQ0FBQyxDQUFDO0VBRUYsT0FBT1csWUFBRyxDQUFDQyxNQUFNLENBQUM7SUFBQ0MsRUFBRSxFQUFFekIsTUFBTSxDQUFDcUIsT0FBTyxDQUFDSTtFQUFFLENBQUMsQ0FBQztBQUM1QyJ9