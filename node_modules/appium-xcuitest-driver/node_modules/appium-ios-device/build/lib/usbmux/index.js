"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Usbmux = void 0;
exports.getDefaultSocket = getDefaultSocket;
require("source-map-support/register");
var _net = _interopRequireDefault(require("net"));
var _os = _interopRequireDefault(require("os"));
var _lodash = _interopRequireDefault(require("lodash"));
var _bluebird = _interopRequireDefault(require("bluebird"));
var _support = require("@appium/support");
var _lengthBasedSplitter = _interopRequireDefault(require("../util/transformer/length-based-splitter"));
var _usbmuxDecoder = _interopRequireDefault(require("./transformer/usbmux-decoder.js"));
var _usbmuxEncoder = _interopRequireDefault(require("./transformer/usbmux-encoder.js"));
var _path = _interopRequireDefault(require("path"));
var _plistService = _interopRequireDefault(require("../plist-service"));
var _lockdown = require("../lockdown");
var _baseService = require("../base-service");
var _constants = require("../constants");
const MAX_FRAME_SIZE = 1 * _constants.MB;
const USBMUX_RESULT = {
  OK: 0,
  BADCOMMAND: 1,
  BADDEV: 2,
  CONNREFUSED: 3
};
let name, version;
try {
  ({
    name,
    version
  } = require(_path.default.resolve(__dirname, '..', '..', '..', 'package.json')));
} catch (err) {
  ({
    name,
    version
  } = require(_path.default.resolve(__dirname, '..', '..', 'package.json')));
}
const DEFAULT_USBMUXD_SOCKET = '/var/run/usbmuxd';
const DEFAULT_USBMUXD_PORT = 27015;
const DEFAULT_USBMUXD_HOST = '127.0.0.1';
const PROG_NAME = name;
const CLIENT_VERSION_STRING = `${name}-${version}`;
function swap16(val) {
  return (val & 0xFF) << 8 | val >> 8 & 0xFF;
}
async function getDefaultSocket(opts = {}) {
  const {
    socketPath = DEFAULT_USBMUXD_SOCKET,
    socketPort = DEFAULT_USBMUXD_PORT,
    socketHost = DEFAULT_USBMUXD_HOST,
    timeout = 5000
  } = opts;
  let socket;
  if (await _support.fs.exists(socketPath)) {
    socket = _net.default.createConnection(socketPath);
  } else if (process.platform === 'win32' || process.platform === 'linux' && /microsoft/i.test(_os.default.release())) {
    socket = _net.default.createConnection(socketPort, socketHost);
  } else {
    throw new Error(`The usbmuxd socket at '${socketPath}' does not exist or is not accessible`);
  }
  return await new _bluebird.default((resolve, reject) => {
    socket.once('error', reject);
    socket.once('connect', () => resolve(socket));
  }).timeout(timeout);
}
class Usbmux extends _baseService.BaseServiceSocket {
  constructor(socketClient) {
    super(socketClient);
    this._decoder = new _usbmuxDecoder.default();
    this._splitter = new _lengthBasedSplitter.default({
      readableStream: socketClient,
      littleEndian: true,
      maxFrameLength: MAX_FRAME_SIZE,
      lengthFieldOffset: 0,
      lengthFieldLength: 4,
      lengthAdjustment: 0
    });
    this._socketClient.pipe(this._splitter).pipe(this._decoder);
    this._encoder = new _usbmuxEncoder.default();
    this._encoder.pipe(this._socketClient);
    this._assignClientFailureHandlers(this._encoder);
    this._tag = 0;
    this._responseCallbacks = {};
    this._decoder.on('data', this._handleData.bind(this));
  }
  _handleData(data) {
    const cb = this._responseCallbacks[data.header.tag] || _lodash.default.noop;
    cb(data);
  }
  async readBUID(timeout = 5000) {
    const {
      tag,
      receivePromise
    } = this._receivePlistPromise(timeout, data => {
      if (data.payload.BUID) {
        return data.payload.BUID;
      }
      throw new Error(`Unexpected data: ${JSON.stringify(data)}`);
    });
    this._sendPlist({
      tag,
      payload: {
        MessageType: 'ReadBUID',
        ProgName: PROG_NAME,
        ClientVersionString: CLIENT_VERSION_STRING
      }
    });
    return await receivePromise;
  }
  async readPairRecord(udid, timeout = 5000) {
    const {
      tag,
      receivePromise
    } = this._receivePlistPromise(timeout, data => {
      if (!data.payload.PairRecordData) {
        return null;
      }
      try {
        return _support.plist.parsePlist(data.payload.PairRecordData);
      } catch (err) {
        throw new Error(`Unexpected data: ${JSON.stringify(data)}`);
      }
    });
    this._sendPlist({
      tag,
      payload: {
        MessageType: 'ReadPairRecord',
        PairRecordID: udid,
        ProgName: PROG_NAME,
        ClientVersionString: CLIENT_VERSION_STRING
      }
    });
    return await receivePromise;
  }
  _sendPlist(json) {
    this._encoder.write(json);
  }
  _receivePlistPromise(timeout = 5000, responseCallback) {
    const tag = this._tag++;
    const receivePromise = new _bluebird.default((resolve, reject) => {
      this._responseCallbacks[tag] = data => {
        try {
          resolve(responseCallback(data));
        } catch (e) {
          reject(e);
        }
      };
      setTimeout(() => reject(new Error(`Failed to receive any data within the timeout: ${timeout}`)), timeout);
    });
    return {
      tag,
      receivePromise
    };
  }
  async listDevices(timeout = 5000) {
    const {
      tag,
      receivePromise
    } = this._receivePlistPromise(timeout, data => {
      if (data.payload.DeviceList) {
        return data.payload.DeviceList;
      }
      throw new Error(`Unexpected data: ${JSON.stringify(data)}`);
    });
    this._sendPlist({
      tag,
      payload: {
        MessageType: 'ListDevices',
        ProgName: PROG_NAME,
        ClientVersionString: CLIENT_VERSION_STRING
      }
    });
    return await receivePromise;
  }
  async findDevice(udid, timeout = 5000) {
    const devices = await this.listDevices(timeout);
    return _lodash.default.find(devices, device => device.Properties.SerialNumber === udid);
  }
  async connectLockdown(udid, timeout = 5000) {
    const device = await this.findDevice(udid, timeout);
    if (!device) {
      throw new Error(`Could not find the expected device '${udid}'`);
    }
    const socket = await this.connect(device.Properties.DeviceID, _lockdown.LOCKDOWN_PORT, timeout);
    return new _lockdown.Lockdown(new _plistService.default(socket));
  }
  async connect(deviceID, port, timeout = 5000) {
    const {
      tag,
      receivePromise
    } = this._receivePlistPromise(timeout, data => {
      if (data.payload.MessageType !== 'Result') {
        throw new Error(`Unexpected data: ${JSON.stringify(data)}`);
      }
      if (data.payload.Number === USBMUX_RESULT.OK) {
        this._splitter.shutdown();
        this._socketClient.unpipe(this._splitter);
        this._splitter.unpipe(this._decoder);
        return this._socketClient;
      } else if (data.payload.Number === USBMUX_RESULT.CONNREFUSED) {
        throw new Error(`Connection was refused to port ${port}`);
      } else {
        throw new Error(`Unexpected data: ${JSON.stringify(data)}`);
      }
    });
    this._sendPlist({
      tag,
      payload: {
        MessageType: 'Connect',
        ProgName: PROG_NAME,
        ClientVersionString: CLIENT_VERSION_STRING,
        DeviceID: deviceID,
        PortNumber: swap16(port)
      }
    });
    return await receivePromise;
  }
}
exports.Usbmux = Usbmux;
var _default = Usbmux;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,