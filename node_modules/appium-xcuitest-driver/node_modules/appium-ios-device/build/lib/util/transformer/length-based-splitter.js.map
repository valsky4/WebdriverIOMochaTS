{"version":3,"file":"length-based-splitter.js","names":["_stream","_interopRequireDefault","require","_logger","LengthBasedSplitter","Stream","Transform","constructor","opts","readableStream","littleEndian","maxFrameLength","lengthFieldOffset","lengthFieldLength","lengthAdjustment","isShutdown","_frameBufferIndex","_frameBuffer","Buffer","allocUnsafeSlow","_transform","data","encoding","onData","i","length","_decode","_pushBack","pos","bufferMarker","bytesToRead","Math","max","nBytesRead","_readBytes","messageLength","_readLength","Error","completeMessageLength","message","allocUnsafe","copy","push","_resetBuffers","src","srcIndex","target","targetIndex","nBytesToBeRead","availableBytes","min","start","end","log","error","leftover","process","nextTick","unshift","shutdown","index","readUInt32LE","readUInt32BE","exports","_default","default"],"sources":["../../../../lib/util/transformer/length-based-splitter.js"],"sourcesContent":["import Stream from 'stream';\nimport log from '../../logger';\n\nclass LengthBasedSplitter extends Stream.Transform {\n  constructor (opts) {\n    super();\n\n    const {\n      readableStream,\n      littleEndian,\n      maxFrameLength,\n      lengthFieldOffset,\n      lengthFieldLength,\n      lengthAdjustment,\n    } = opts;\n\n    this.readableStream = readableStream;\n    this.littleEndian = littleEndian;\n    this.maxFrameLength = maxFrameLength;\n    this.lengthFieldOffset = lengthFieldOffset;\n    this.lengthFieldLength = lengthFieldLength;\n    this.lengthAdjustment = lengthAdjustment;\n\n    this.isShutdown = false;\n    this._frameBufferIndex = 0;\n    this._frameBuffer = Buffer.allocUnsafeSlow(maxFrameLength);\n  }\n\n  _transform (data, encoding, onData) {\n    for (let i = 0; i < data.length; i = this._decode(data, i)) {\n      if (this.isShutdown) {\n        return this._pushBack(i, data.length, data);\n      }\n    }\n    onData();\n  }\n\n  _decode (data, pos) {\n    let bufferMarker = pos;\n\n    let bytesToRead = Math.max((this.lengthFieldOffset + this.lengthFieldLength) - this._frameBufferIndex, 0);\n    let nBytesRead = bytesToRead === 0 ? 0 : this._readBytes(data, bufferMarker, this._frameBuffer, this._frameBufferIndex, bytesToRead);\n    bufferMarker += nBytesRead;\n    this._frameBufferIndex += nBytesRead;\n\n    if (this._frameBufferIndex < this.lengthFieldOffset) {\n      return bufferMarker;\n    }\n\n    const messageLength = this._readLength(this._frameBuffer, this.lengthFieldOffset, this.littleEndian);\n    if (messageLength > this.maxFrameLength) {\n      throw new Error(`The frame is bigger than expected. Length: ${messageLength}, max: ${this.maxFrameLength}`);\n    }\n\n    const completeMessageLength = messageLength + this.lengthAdjustment + this.lengthFieldOffset;\n\n    bytesToRead = completeMessageLength - this._frameBufferIndex;\n    nBytesRead = bytesToRead === 0 ? 0 : this._readBytes(data, bufferMarker, this._frameBuffer, this._frameBufferIndex, bytesToRead);\n    bufferMarker += nBytesRead;\n    this._frameBufferIndex += nBytesRead;\n\n    if (this._frameBufferIndex < completeMessageLength) {\n      return bufferMarker;\n    }\n\n    const message = Buffer.allocUnsafe(this._frameBufferIndex);\n    this._frameBuffer.copy(message, 0, 0, this._frameBufferIndex);\n\n    this.push(message);\n    this._resetBuffers();\n    return bufferMarker;\n  }\n\n  _readBytes (src, srcIndex, target, targetIndex, nBytesToBeRead) {\n    let availableBytes = Math.min(nBytesToBeRead, src.length - srcIndex);\n    src.copy(target, targetIndex, srcIndex, srcIndex + availableBytes);\n    return availableBytes;\n  }\n  _resetBuffers () {\n    this._frameBufferIndex = 0;\n  }\n\n  _pushBack (start, end, data) {\n    if (start > end) {\n      log.error('More data was read than the buffer size. This should not happen');\n    }\n    if (start === end) {\n      return;\n    }\n    const leftover = Buffer.allocUnsafe(end - start);\n    data.copy(leftover, 0, start, end);\n    process.nextTick(() => this.readableStream.unshift(leftover));\n  }\n\n  shutdown () {\n    this.isShutdown = true;\n  }\n\n  _readLength (data, index, littleEndian) {\n    switch (this.lengthFieldLength) {\n      case 4:\n        return littleEndian ? data.readUInt32LE(index) : data.readUInt32BE(index);\n      case 8:\n        return littleEndian ? data.readUInt32LE(index) : data.readUInt32BE(index + 4);\n      default:\n        throw new Error(`${this.lengthFieldLength} is not supported. Only 4 and 8 are supported at the moment`);\n    }\n  }\n}\n\nexport { LengthBasedSplitter};\nexport default LengthBasedSplitter;\n"],"mappings":"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"}