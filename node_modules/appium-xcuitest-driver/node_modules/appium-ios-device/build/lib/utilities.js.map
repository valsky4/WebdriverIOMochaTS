{"version":3,"file":"utilities.js","names":["_usbmux","_interopRequireWildcard","require","_sslHelper","_lodash","_interopRequireDefault","_logger","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","LOCKDOWN_REQUEST","DEVICE_TIME","Key","DEVICE_UTC_OFFSET","DEVICE_TIME_ZONE","DEVICE_VERSION","DEVICE_NAME","getConnectedDevices","socket","usbmux","Usbmux","getDefaultSocket","e","log","debug","devices","listDevices","udids","map","device","Properties","SerialNumber","_","uniq","close","getOSVersion","udid","lockdown","connectLockdown","getValue","getDeviceName","getDeviceInfo","getDeviceTime","startLockdownSession","timestamp","utcOffset","timeZone","pairRecord","readPairRecord","Error","startSession","HostID","SystemBUID","enableSessionSSL","HostPrivateKey","HostCertificate","connectPortSSL","port","handshakeOnly","findDevice","connect","DeviceID","undefined","enableSSLHandshakeOnly","upgradeToSSL","connectPort"],"sources":["../../lib/utilities.js"],"sourcesContent":["import Usbmux, { getDefaultSocket } from './usbmux';\nimport { upgradeToSSL, enableSSLHandshakeOnly } from './ssl-helper';\nimport _ from 'lodash';\nimport log from './logger';\n\n// https://github.com/samdmarshall/iOS-Internals/blob/master/lockbot/lockbot/lockdown_keys.h\nconst LOCKDOWN_REQUEST = {\n  DEVICE_TIME: { Key: 'TimeIntervalSince1970' },\n  DEVICE_UTC_OFFSET: { Key: 'TimeZoneOffsetFromUTC' },\n  DEVICE_TIME_ZONE: { Key: 'TimeZone' },\n  DEVICE_VERSION: { Key: 'ProductVersion' },\n  DEVICE_NAME: { Key: 'DeviceName' }\n};\n\n\n/**\n * Retrieves the udids of the connected devices\n *\n * @param {?net.Socket} socket the socket of usbmuxd. It will default to /var/run/usbmuxd if it is not passed\n * @returns {Array.<string>} The list of device serial numbers (udid) or\n * an empty list if no devices are connected\n */\nasync function getConnectedDevices (socket = null) {\n  let usbmux;\n  try {\n    usbmux = new Usbmux(socket || await getDefaultSocket());\n  } catch (e) {\n    log.debug(e);\n    return [];\n  }\n  try {\n    const devices = await usbmux.listDevices();\n    const udids = devices.map((device) => device.Properties.SerialNumber);\n    return _.uniq(udids);\n  } finally {\n    usbmux.close();\n  }\n}\n\n/**\n * Retrieves the os version of the device\n *\n * @param {string} udid Device UDID\n * @param {?net.Socket} socket the socket of usbmuxd. It will default to /var/run/usbmuxd if it is not passed\n * @returns {string}\n */\nasync function getOSVersion (udid, socket = null) {\n  const usbmux = new Usbmux(socket || await getDefaultSocket());\n  try {\n    // lockdown doesn't need to be closed since it uses the same socket usbmux uses\n    const lockdown = await usbmux.connectLockdown(udid);\n    return await lockdown.getValue(LOCKDOWN_REQUEST.DEVICE_VERSION);\n  } finally {\n    usbmux.close();\n  }\n}\n\n/**\n * Retrieves the name of the device\n *\n * @param {string} udid Device UDID\n * @param {?net.Socket} socket the socket of usbmuxd. It will default to /var/run/usbmuxd if it is not passed\n * @returns {string}\n */\nasync function getDeviceName (udid, socket = null) {\n  const usbmux = new Usbmux(socket || await getDefaultSocket());\n  try {\n    // lockdown doesn't need to be closed since it uses the same socket usbmux uses\n    const lockdown = await usbmux.connectLockdown(udid);\n    return await lockdown.getValue(LOCKDOWN_REQUEST.DEVICE_NAME);\n  } finally {\n    usbmux.close();\n  }\n}\n\n/**\n * Returns all available device values\n * @param {string} udid Device UDID\n * @param {?net.Socket} socket the socket of usbmuxd. It will default to /var/run/usbmuxd if it is not passed\n * @returns {object} Returns available default device values via lockdown.\n * e.g.\n * {\n *   \"BasebandCertId\"=>3840149528,\n *   \"BasebandKeyHashInformation\"=>\n *     {\"AKeyStatus\"=>2,\n *     \"SKeyHash\"=>{\n *       \"type\"=>\"Buffer\",\n *       \"data\"=>[187, 239, ....]},\n *     \"SKeyStatus\"=>0},\n *   \"BasebandSerialNumber\"=>{\"type\"=>\"Buffer\", \"data\"=>[...]},\n *   \"BasebandVersion\"=>\"11.01.02\",\n *   \"BoardId\"=>2,\n *   \"BuildVersion\"=>\"19C56\",\n *   \"CPUArchitecture\"=>\"arm64\",\n *   \"ChipID\"=>32768,\n *   \"DeviceClass\"=>\"iPhone\",\n *   \"DeviceColor\"=>\"#c8caca\",\n *   \"DeviceName\"=>\"kazu\",\n *   \"DieID\"=>1111111111111,\n *   \"HardwareModel\"=>\"N69uAP\",\n *   \"HasSiDP\"=>true,\n *   \"PartitionType\"=>\"GUID_partition_scheme\",\n *   \"ProductName\"=>\"iPhone OS\",\n *   \"ProductType\"=>\"iPhone8,4\",\n *   \"ProductVersion\"=>\"15.2\",\n *   \"ProductionSOC\"=>true,\n *   \"ProtocolVersion\"=>\"2\",\n *   \"SupportedDeviceFamilies\"=>[1],\n *   \"TelephonyCapability\"=>true,\n *   \"UniqueChipID\"=>1111111111111,\n *   \"UniqueDeviceID\"=>\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\n *   \"WiFiAddress\"=>\"00:00:00:00:00:00\"\n * }\n */\nasync function getDeviceInfo (udid, socket = null) {\n  const usbmux = new Usbmux(socket || await getDefaultSocket());\n  try {\n    const lockdown = await usbmux.connectLockdown(udid);\n    return await lockdown.getValue();\n  } finally {\n    usbmux.close();\n  }\n}\n\n/**\n * @typedef {Object} DeviceTime\n *\n * @property {number} timestamp Unix timestamp in seconds since 1970-01-01T00:00:00Z\n * @property {number} utcOffset The difference in minutes between the UTC time and the local device time.\n * Can be negative.\n * @property {string} timeZone Time zone name configured on the device, for example `Europe/Paris`\n */\n\n/**\n * Retrieves the local time from the device under test\n *\n * @param {string} udid Device UDID\n * @param {?net.Socket} socket the socket of usbmuxd. It will default to /var/run/usbmuxd if it is not passed\n * @returns {DeviceTime}\n */\nasync function getDeviceTime (udid, socket = null) {\n  const lockdown = await startLockdownSession(udid, socket);\n  try {\n    return {\n      timestamp: await lockdown.getValue(LOCKDOWN_REQUEST.DEVICE_TIME),\n      // Apple returns utcOffset in seconds which doesnt comply with the general standard\n      utcOffset: await lockdown.getValue(LOCKDOWN_REQUEST.DEVICE_UTC_OFFSET) / 60,\n      timeZone: await lockdown.getValue(LOCKDOWN_REQUEST.DEVICE_TIME_ZONE),\n    };\n  } finally {\n    lockdown.close();\n  }\n}\n\n/**\n * Starts a lockdown session on the given device\n *\n * @param {string} udid Device UDID\n * @param {?net.Socket} socket the socket of usbmuxd. It will default to /var/run/usbmuxd if it is not passed\n * @returns {Lockdown}\n */\nasync function startLockdownSession (udid, socket = null) {\n  const usbmux = new Usbmux(socket || await getDefaultSocket());\n  try {\n    const pairRecord = await usbmux.readPairRecord(udid);\n    if (!pairRecord) {\n      throw new Error(`Could not find a pair record for device '${udid}'. Please first pair with the device`);\n    }\n    // lockdown doesn't need to be closed since it uses the same socket usbmux uses\n    const lockdown = await usbmux.connectLockdown(udid);\n    await lockdown.startSession(pairRecord.HostID, pairRecord.SystemBUID);\n    lockdown.enableSessionSSL(pairRecord.HostPrivateKey, pairRecord.HostCertificate);\n    return lockdown;\n  } catch (e) {\n    usbmux.close();\n    throw e;\n  }\n}\n\n/**\n * Connects to a given port with the certs and keys used in the pairing process\n *\n * @param {string} udid Device UDID\n * @param {number} port Port to connect\n * @param {?net.Socket} socket the socket of usbmuxd. It will default to /var/run/usbmuxd if it is not passed\n * @param {boolean} handshakeOnly only handshake and return the initial socket\n * @returns {tls.TLSSocket|Object} The socket or the object returned in the callback if the callback function exists\n */\nasync function connectPortSSL (udid, port, socket = null, handshakeOnly = false) {\n  const usbmux = new Usbmux(socket || await getDefaultSocket());\n  try {\n    const device = await usbmux.findDevice(udid);\n    if (!device) {\n      throw new Error(`Could not find the expected device '${udid}'`);\n    }\n    const pairRecord = await usbmux.readPairRecord(udid);\n    if (!pairRecord) {\n      throw new Error(`Could not find a pair record for device '${udid}'. Please first pair with the device`);\n    }\n    const socket = await usbmux.connect(device.Properties.DeviceID, port, undefined);\n    return handshakeOnly ?\n      await enableSSLHandshakeOnly(socket, pairRecord.HostPrivateKey, pairRecord.HostCertificate) :\n      upgradeToSSL(socket, pairRecord.HostPrivateKey, pairRecord.HostCertificate);\n  } catch (e) {\n    usbmux.close();\n    throw e;\n  }\n}\n\n/**\n * Connects to a given port\n *\n * @param {string} udid Device UDID\n * @param {number} port Port to connect\n * @param {?net.Socket} socket the socket of usbmuxd. It will default to /var/run/usbmuxd if it is not passed\n * @returns {net.Socket|Object} The socket or the object returned in the callback if the callback function exists\n */\nasync function connectPort (udid, port, socket = null) {\n  const usbmux = new Usbmux(socket || await getDefaultSocket());\n  try {\n    const device = await usbmux.findDevice(udid);\n    if (!device) {\n      throw new Error(`Could not find the expected device ${udid}`);\n    }\n    return await usbmux.connect(device.Properties.DeviceID, port, undefined);\n  } catch (e) {\n    usbmux.close();\n    throw e;\n  }\n}\n\nexport {\n  getConnectedDevices, getOSVersion, getDeviceName, getDeviceTime,\n  startLockdownSession, connectPort, connectPortSSL, getDeviceInfo\n};\n"],"mappings":";;;;;;;;;;;;;;;AAAA,IAAAA,OAAA,GAAAC,uBAAA,CAAAC,OAAA;AACA,IAAAC,UAAA,GAAAD,OAAA;AACA,IAAAE,OAAA,GAAAC,sBAAA,CAAAH,OAAA;AACA,IAAAI,OAAA,GAAAD,sBAAA,CAAAH,OAAA;AAA2B,SAAAK,yBAAAC,WAAA,eAAAC,OAAA,kCAAAC,iBAAA,OAAAD,OAAA,QAAAE,gBAAA,OAAAF,OAAA,YAAAF,wBAAA,YAAAA,CAAAC,WAAA,WAAAA,WAAA,GAAAG,gBAAA,GAAAD,iBAAA,KAAAF,WAAA;AAAA,SAAAP,wBAAAW,GAAA,EAAAJ,WAAA,SAAAA,WAAA,IAAAI,GAAA,IAAAA,GAAA,CAAAC,UAAA,WAAAD,GAAA,QAAAA,GAAA,oBAAAA,GAAA,wBAAAA,GAAA,4BAAAE,OAAA,EAAAF,GAAA,UAAAG,KAAA,GAAAR,wBAAA,CAAAC,WAAA,OAAAO,KAAA,IAAAA,KAAA,CAAAC,GAAA,CAAAJ,GAAA,YAAAG,KAAA,CAAAE,GAAA,CAAAL,GAAA,SAAAM,MAAA,WAAAC,qBAAA,GAAAC,MAAA,CAAAC,cAAA,IAAAD,MAAA,CAAAE,wBAAA,WAAAC,GAAA,IAAAX,GAAA,QAAAW,GAAA,kBAAAH,MAAA,CAAAI,SAAA,CAAAC,cAAA,CAAAC,IAAA,CAAAd,GAAA,EAAAW,GAAA,SAAAI,IAAA,GAAAR,qBAAA,GAAAC,MAAA,CAAAE,wBAAA,CAAAV,GAAA,EAAAW,GAAA,cAAAI,IAAA,KAAAA,IAAA,CAAAV,GAAA,IAAAU,IAAA,CAAAC,GAAA,KAAAR,MAAA,CAAAC,cAAA,CAAAH,MAAA,EAAAK,GAAA,EAAAI,IAAA,YAAAT,MAAA,CAAAK,GAAA,IAAAX,GAAA,CAAAW,GAAA,SAAAL,MAAA,CAAAJ,OAAA,GAAAF,GAAA,MAAAG,KAAA,IAAAA,KAAA,CAAAa,GAAA,CAAAhB,GAAA,EAAAM,MAAA,YAAAA,MAAA;AAG3B,MAAMW,gBAAgB,GAAG;EACvBC,WAAW,EAAE;IAAEC,GAAG,EAAE;EAAwB,CAAC;EAC7CC,iBAAiB,EAAE;IAAED,GAAG,EAAE;EAAwB,CAAC;EACnDE,gBAAgB,EAAE;IAAEF,GAAG,EAAE;EAAW,CAAC;EACrCG,cAAc,EAAE;IAAEH,GAAG,EAAE;EAAiB,CAAC;EACzCI,WAAW,EAAE;IAAEJ,GAAG,EAAE;EAAa;AACnC,CAAC;AAUD,eAAeK,mBAAmBA,CAAEC,MAAM,GAAG,IAAI,EAAE;EACjD,IAAIC,MAAM;EACV,IAAI;IACFA,MAAM,GAAG,IAAIC,eAAM,CAACF,MAAM,KAAI,MAAM,IAAAG,wBAAgB,GAAE,EAAC;EACzD,CAAC,CAAC,OAAOC,CAAC,EAAE;IACVC,eAAG,CAACC,KAAK,CAACF,CAAC,CAAC;IACZ,OAAO,EAAE;EACX;EACA,IAAI;IACF,MAAMG,OAAO,GAAG,MAAMN,MAAM,CAACO,WAAW,EAAE;IAC1C,MAAMC,KAAK,GAAGF,OAAO,CAACG,GAAG,CAAEC,MAAM,IAAKA,MAAM,CAACC,UAAU,CAACC,YAAY,CAAC;IACrE,OAAOC,eAAC,CAACC,IAAI,CAACN,KAAK,CAAC;EACtB,CAAC,SAAS;IACRR,MAAM,CAACe,KAAK,EAAE;EAChB;AACF;AASA,eAAeC,YAAYA,CAAEC,IAAI,EAAElB,MAAM,GAAG,IAAI,EAAE;EAChD,MAAMC,MAAM,GAAG,IAAIC,eAAM,CAACF,MAAM,KAAI,MAAM,IAAAG,wBAAgB,GAAE,EAAC;EAC7D,IAAI;IAEF,MAAMgB,QAAQ,GAAG,MAAMlB,MAAM,CAACmB,eAAe,CAACF,IAAI,CAAC;IACnD,OAAO,MAAMC,QAAQ,CAACE,QAAQ,CAAC7B,gBAAgB,CAACK,cAAc,CAAC;EACjE,CAAC,SAAS;IACRI,MAAM,CAACe,KAAK,EAAE;EAChB;AACF;AASA,eAAeM,aAAaA,CAAEJ,IAAI,EAAElB,MAAM,GAAG,IAAI,EAAE;EACjD,MAAMC,MAAM,GAAG,IAAIC,eAAM,CAACF,MAAM,KAAI,MAAM,IAAAG,wBAAgB,GAAE,EAAC;EAC7D,IAAI;IAEF,MAAMgB,QAAQ,GAAG,MAAMlB,MAAM,CAACmB,eAAe,CAACF,IAAI,CAAC;IACnD,OAAO,MAAMC,QAAQ,CAACE,QAAQ,CAAC7B,gBAAgB,CAACM,WAAW,CAAC;EAC9D,CAAC,SAAS;IACRG,MAAM,CAACe,KAAK,EAAE;EAChB;AACF;AAyCA,eAAeO,aAAaA,CAAEL,IAAI,EAAElB,MAAM,GAAG,IAAI,EAAE;EACjD,MAAMC,MAAM,GAAG,IAAIC,eAAM,CAACF,MAAM,KAAI,MAAM,IAAAG,wBAAgB,GAAE,EAAC;EAC7D,IAAI;IACF,MAAMgB,QAAQ,GAAG,MAAMlB,MAAM,CAACmB,eAAe,CAACF,IAAI,CAAC;IACnD,OAAO,MAAMC,QAAQ,CAACE,QAAQ,EAAE;EAClC,CAAC,SAAS;IACRpB,MAAM,CAACe,KAAK,EAAE;EAChB;AACF;AAkBA,eAAeQ,aAAaA,CAAEN,IAAI,EAAElB,MAAM,GAAG,IAAI,EAAE;EACjD,MAAMmB,QAAQ,GAAG,MAAMM,oBAAoB,CAACP,IAAI,EAAElB,MAAM,CAAC;EACzD,IAAI;IACF,OAAO;MACL0B,SAAS,EAAE,MAAMP,QAAQ,CAACE,QAAQ,CAAC7B,gBAAgB,CAACC,WAAW,CAAC;MAEhEkC,SAAS,EAAE,OAAMR,QAAQ,CAACE,QAAQ,CAAC7B,gBAAgB,CAACG,iBAAiB,CAAC,IAAG,EAAE;MAC3EiC,QAAQ,EAAE,MAAMT,QAAQ,CAACE,QAAQ,CAAC7B,gBAAgB,CAACI,gBAAgB;IACrE,CAAC;EACH,CAAC,SAAS;IACRuB,QAAQ,CAACH,KAAK,EAAE;EAClB;AACF;AASA,eAAeS,oBAAoBA,CAAEP,IAAI,EAAElB,MAAM,GAAG,IAAI,EAAE;EACxD,MAAMC,MAAM,GAAG,IAAIC,eAAM,CAACF,MAAM,KAAI,MAAM,IAAAG,wBAAgB,GAAE,EAAC;EAC7D,IAAI;IACF,MAAM0B,UAAU,GAAG,MAAM5B,MAAM,CAAC6B,cAAc,CAACZ,IAAI,CAAC;IACpD,IAAI,CAACW,UAAU,EAAE;MACf,MAAM,IAAIE,KAAK,CAAE,4CAA2Cb,IAAK,sCAAqC,CAAC;IACzG;IAEA,MAAMC,QAAQ,GAAG,MAAMlB,MAAM,CAACmB,eAAe,CAACF,IAAI,CAAC;IACnD,MAAMC,QAAQ,CAACa,YAAY,CAACH,UAAU,CAACI,MAAM,EAAEJ,UAAU,CAACK,UAAU,CAAC;IACrEf,QAAQ,CAACgB,gBAAgB,CAACN,UAAU,CAACO,cAAc,EAAEP,UAAU,CAACQ,eAAe,CAAC;IAChF,OAAOlB,QAAQ;EACjB,CAAC,CAAC,OAAOf,CAAC,EAAE;IACVH,MAAM,CAACe,KAAK,EAAE;IACd,MAAMZ,CAAC;EACT;AACF;AAWA,eAAekC,cAAcA,CAAEpB,IAAI,EAAEqB,IAAI,EAAEvC,MAAM,GAAG,IAAI,EAAEwC,aAAa,GAAG,KAAK,EAAE;EAC/E,MAAMvC,MAAM,GAAG,IAAIC,eAAM,CAACF,MAAM,KAAI,MAAM,IAAAG,wBAAgB,GAAE,EAAC;EAC7D,IAAI;IACF,MAAMQ,MAAM,GAAG,MAAMV,MAAM,CAACwC,UAAU,CAACvB,IAAI,CAAC;IAC5C,IAAI,CAACP,MAAM,EAAE;MACX,MAAM,IAAIoB,KAAK,CAAE,uCAAsCb,IAAK,GAAE,CAAC;IACjE;IACA,MAAMW,UAAU,GAAG,MAAM5B,MAAM,CAAC6B,cAAc,CAACZ,IAAI,CAAC;IACpD,IAAI,CAACW,UAAU,EAAE;MACf,MAAM,IAAIE,KAAK,CAAE,4CAA2Cb,IAAK,sCAAqC,CAAC;IACzG;IACA,MAAMlB,MAAM,GAAG,MAAMC,MAAM,CAACyC,OAAO,CAAC/B,MAAM,CAACC,UAAU,CAAC+B,QAAQ,EAAEJ,IAAI,EAAEK,SAAS,CAAC;IAChF,OAAOJ,aAAa,GAClB,MAAM,IAAAK,iCAAsB,EAAC7C,MAAM,EAAE6B,UAAU,CAACO,cAAc,EAAEP,UAAU,CAACQ,eAAe,CAAC,GAC3F,IAAAS,uBAAY,EAAC9C,MAAM,EAAE6B,UAAU,CAACO,cAAc,EAAEP,UAAU,CAACQ,eAAe,CAAC;EAC/E,CAAC,CAAC,OAAOjC,CAAC,EAAE;IACVH,MAAM,CAACe,KAAK,EAAE;IACd,MAAMZ,CAAC;EACT;AACF;AAUA,eAAe2C,WAAWA,CAAE7B,IAAI,EAAEqB,IAAI,EAAEvC,MAAM,GAAG,IAAI,EAAE;EACrD,MAAMC,MAAM,GAAG,IAAIC,eAAM,CAACF,MAAM,KAAI,MAAM,IAAAG,wBAAgB,GAAE,EAAC;EAC7D,IAAI;IACF,MAAMQ,MAAM,GAAG,MAAMV,MAAM,CAACwC,UAAU,CAACvB,IAAI,CAAC;IAC5C,IAAI,CAACP,MAAM,EAAE;MACX,MAAM,IAAIoB,KAAK,CAAE,sCAAqCb,IAAK,EAAC,CAAC;IAC/D;IACA,OAAO,MAAMjB,MAAM,CAACyC,OAAO,CAAC/B,MAAM,CAACC,UAAU,CAAC+B,QAAQ,EAAEJ,IAAI,EAAEK,SAAS,CAAC;EAC1E,CAAC,CAAC,OAAOxC,CAAC,EAAE;IACVH,MAAM,CAACe,KAAK,EAAE;IACd,MAAMZ,CAAC;EACT;AACF"}