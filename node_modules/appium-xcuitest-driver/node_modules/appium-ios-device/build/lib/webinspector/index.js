"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WebInspectorService = exports.WEB_INSPECTOR_SERVICE_NAME = void 0;
exports.cleanupRpcObject = cleanupRpcObject;
exports.default = void 0;
require("source-map-support/register");
var _webinspectorDecoder = _interopRequireDefault(require("./transformer/webinspector-decoder"));
var _webinspectorEncoder = _interopRequireDefault(require("./transformer/webinspector-encoder"));
var _plistServiceDecoder = _interopRequireDefault(require("../plist-service/transformer/plist-service-decoder"));
var _plistServiceEncoder = _interopRequireDefault(require("../plist-service/transformer/plist-service-encoder"));
var _lengthBasedSplitter = _interopRequireDefault(require("../util/transformer/length-based-splitter"));
var _streamLogger = _interopRequireDefault(require("../util/transformer/stream-logger"));
var _lodash = _interopRequireDefault(require("lodash"));
var _support = require("@appium/support");
var _constants = require("../constants");
var _logger = _interopRequireDefault(require("../logger"));
var _baseService = require("../base-service");
const WEB_INSPECTOR_SERVICE_NAME = 'com.apple.webinspector';
exports.WEB_INSPECTOR_SERVICE_NAME = WEB_INSPECTOR_SERVICE_NAME;
const MAX_FRAME_SIZE = 20 * _constants.MB;
const PARTIAL_MESSAGE_SUPPORT_DEPRECATION_VERSION = 11;
function cleanupRpcObject(obj) {
  const isArray = _lodash.default.isArray(obj);
  if (!_lodash.default.isPlainObject(obj) && !isArray) {
    return obj;
  }
  if (isArray) {
    return _lodash.default.filter(obj, _lodash.default.negate(_lodash.default.isNil));
  }
  return _lodash.default.reduce(obj, (result, value, key) => {
    if (!_lodash.default.isNil(value)) {
      result[key] = cleanupRpcObject(value);
    }
    return result;
  }, {});
}
class WebInspectorService extends _baseService.BaseServiceSocket {
  constructor(opts = {}) {
    const {
      majorOsVersion,
      isSimulator = false,
      socketChunkSize,
      verbose = false,
      verboseHexDump = false,
      socketClient,
      maxFrameLength = MAX_FRAME_SIZE
    } = opts;
    super(socketClient);
    if (_lodash.default.isFunction(socketClient.setMaxSendFragment) && !_lodash.default.isNil(socketChunkSize) && socketChunkSize > 0) {
      if (socketClient.setMaxSendFragment(socketChunkSize)) {
        _logger.default.debug(`Maximum TLS fragment size set to '${socketChunkSize}'`);
      } else {
        _logger.default.warn(`Unable to set TLS fragment size to '${socketChunkSize}'`);
      }
    }
    this._verbose = verbose;
    this._isSimulator = isSimulator;
    this._majorOsVersion = majorOsVersion;
    if (!isSimulator && majorOsVersion < PARTIAL_MESSAGE_SUPPORT_DEPRECATION_VERSION) {
      this._initializePartialMessageSupport(verboseHexDump, maxFrameLength);
    } else {
      this._initializeFullMessageSupport(verboseHexDump, maxFrameLength);
    }
  }
  _initializeFullMessageSupport(verbose, maxFrameLength) {
    this._decoder = new _plistServiceDecoder.default();
    this._socketClient.pipe(new _streamLogger.default(_streamLogger.default.RECEIVE, verbose)).pipe(this._splitter = new _lengthBasedSplitter.default({
      readableStream: this._socketClient,
      littleEndian: false,
      maxFrameLength,
      lengthFieldOffset: 0,
      lengthFieldLength: 4,
      lengthAdjustment: 4
    })).pipe(this._decoder);
    this._encoder = new _plistServiceEncoder.default();
    this._encoder.pipe(new _streamLogger.default(_streamLogger.default.SEND, verbose)).pipe(this._socketClient);
  }
  _initializePartialMessageSupport(verbose, maxFrameLength) {
    this._decoder = new _webinspectorDecoder.default(_constants.MB);
    this._socketClient.pipe(new _streamLogger.default(_streamLogger.default.RECEIVE, verbose)).pipe(this._splitter = new _lengthBasedSplitter.default({
      readableStream: this._socketClient,
      littleEndian: false,
      maxFrameLength,
      lengthFieldOffset: 0,
      lengthFieldLength: 4,
      lengthAdjustment: 4
    })).pipe(new _plistServiceDecoder.default()).pipe(this._decoder);
    this._encoder = new _webinspectorEncoder.default();
    this._encoder.pipe(new _plistServiceEncoder.default()).pipe(new _streamLogger.default(_streamLogger.default.SEND, verbose)).pipe(this._socketClient);
  }
  sendMessage(rpcObject) {
    if (_lodash.default.isNil(rpcObject)) {
      throw new Error('Cannot send a null object');
    }
    let message = rpcObject;
    let lastError;
    try {
      try {
        this._encoder.write(message);
      } catch (e) {
        if (e instanceof TypeError) {
          message = cleanupRpcObject(message);
          this._encoder.write(message);
        } else {
          throw e;
        }
      }
    } catch (err) {
      lastError = err;
    }
    if (this._verbose || lastError) {
      _logger.default.debug('Sent message to Web Inspector:');
      _logger.default.debug(_support.util.jsonStringify(message));
      if (!_lodash.default.isEqual(message, rpcObject)) {
        _logger.default.debug('Original message:');
        _logger.default.debug(_support.util.jsonStringify(rpcObject));
      }
    }
    if (lastError) {
      throw lastError;
    }
    if (!this._isSimulator && this._majorOsVersion >= PARTIAL_MESSAGE_SUPPORT_DEPRECATION_VERSION) {
      this._encoder.write(' ');
    }
  }
  listenMessage(onData) {
    this._decoder.on('data', data => {
      if (this._verbose) {
        _logger.default.debug('Received message from Web Inspector:');
        _logger.default.debug(_support.util.jsonStringify(data));
      }
      onData(data);
    });
  }
}
exports.WebInspectorService = WebInspectorService;
var _default = WebInspectorService;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,