{"version":3,"file":"index.js","names":["_webinspectorDecoder","_interopRequireDefault","require","_webinspectorEncoder","_plistServiceDecoder","_plistServiceEncoder","_lengthBasedSplitter","_streamLogger","_lodash","_support","_constants","_logger","_baseService","WEB_INSPECTOR_SERVICE_NAME","exports","MAX_FRAME_SIZE","MB","PARTIAL_MESSAGE_SUPPORT_DEPRECATION_VERSION","cleanupRpcObject","obj","isArray","_","isPlainObject","filter","negate","isNil","reduce","result","value","key","WebInspectorService","BaseServiceSocket","constructor","opts","majorOsVersion","isSimulator","socketChunkSize","verbose","verboseHexDump","socketClient","maxFrameLength","isFunction","setMaxSendFragment","log","debug","warn","_verbose","_isSimulator","_majorOsVersion","_initializePartialMessageSupport","_initializeFullMessageSupport","_decoder","PlistServiceDecoder","_socketClient","pipe","StreamLogger","RECEIVE","_splitter","LengthBasedSplitter","readableStream","littleEndian","lengthFieldOffset","lengthFieldLength","lengthAdjustment","_encoder","PlistServiceEncoder","SEND","WebInspectorDecoder","WebInspectorEncoder","sendMessage","rpcObject","Error","message","lastError","write","e","TypeError","err","util","jsonStringify","isEqual","listenMessage","onData","on","data","_default","default"],"sources":["../../../lib/webinspector/index.js"],"sourcesContent":["import WebInspectorDecoder from './transformer/webinspector-decoder';\nimport WebInspectorEncoder from './transformer/webinspector-encoder';\nimport PlistServiceDecoder from '../plist-service/transformer/plist-service-decoder';\nimport PlistServiceEncoder from '../plist-service/transformer/plist-service-encoder';\nimport LengthBasedSplitter from '../util/transformer/length-based-splitter';\nimport StreamLogger from '../util/transformer/stream-logger';\nimport _ from 'lodash';\nimport { util } from '@appium/support';\nimport { MB } from '../constants';\nimport log from '../logger';\nimport { BaseServiceSocket } from '../base-service';\n\n\nconst WEB_INSPECTOR_SERVICE_NAME = 'com.apple.webinspector';\nconst MAX_FRAME_SIZE = 20 * MB;\n\nconst PARTIAL_MESSAGE_SUPPORT_DEPRECATION_VERSION = 11;\n\nfunction cleanupRpcObject (obj) {\n  const isArray = _.isArray(obj);\n  if (!_.isPlainObject(obj) && !isArray) {\n    return obj;\n  }\n\n  if (isArray) {\n    return _.filter(obj, _.negate(_.isNil));\n  }\n\n  return _.reduce(obj, (result, value, key) => {\n    if (!_.isNil(value)) {\n      result[key] = cleanupRpcObject(value);\n    }\n    return result;\n  }, {});\n}\n\n/**\n * @typedef {Object} WebInspectorServiceOptions\n *\n * @property {number} majorOsVersion The major version of the os version\n * @property {boolean} isSimulator Whether the device is a simulator\n * @property {?number} socketChunkSize Size, in bytes of the chunks to send to\n *                                     real device (only iOS 11+). Defaults to\n *                                     16384 bytes (the TLSSocket max).\n * @property {boolean} verbose Turn on logging of each message sent or received.\n *                             Defaults to false\n * @property {boolean} verboseHexDump Turn on logging of _all_ communication as\n *                                    hex dump. Defaults to false\n * @property {*} socketClient The socket client where the communication will happen\n * @property {number} maxFrameLength [20 * 1024 * 1024] - The maximum size\n *                                   in bytes of a single data frame\n *                                   in the device communication protocol\n */\n\nclass WebInspectorService extends BaseServiceSocket {\n  /**\n   * The main service for communication with the webinspectord\n   *\n   * @param {WebInspectorServiceOptions}\n   */\n  constructor (opts = {}) {\n    const {\n      majorOsVersion,\n      isSimulator = false,\n      socketChunkSize,\n      verbose = false,\n      verboseHexDump = false,\n      socketClient,\n      maxFrameLength = MAX_FRAME_SIZE,\n    } = opts;\n\n    super(socketClient);\n\n    // set the largest fragment size for the socket, if the option is there\n    if (_.isFunction(socketClient.setMaxSendFragment) && !_.isNil(socketChunkSize) && socketChunkSize > 0) {\n      if (socketClient.setMaxSendFragment(socketChunkSize)) {\n        log.debug(`Maximum TLS fragment size set to '${socketChunkSize}'`);\n      } else {\n        // anything over the _actual_ maximum will fail, and things will remain the same\n        log.warn(`Unable to set TLS fragment size to '${socketChunkSize}'`);\n      }\n    }\n\n    this._verbose = verbose;\n    this._isSimulator = isSimulator;\n    this._majorOsVersion = majorOsVersion;\n\n    if (!isSimulator && majorOsVersion < PARTIAL_MESSAGE_SUPPORT_DEPRECATION_VERSION) {\n      this._initializePartialMessageSupport(verboseHexDump, maxFrameLength);\n    } else {\n      this._initializeFullMessageSupport(verboseHexDump, maxFrameLength);\n    }\n  }\n\n  /**\n   * Intializes the data flow for iOS 11+.\n   *\n   * @param {boolean} verbose - whether to print out the hex dump for communication\n   * @param {number} maxFrameLength - The maximum size in bytes of a single data frame\n   *                                  in the device communication protocol\n   */\n  _initializeFullMessageSupport (verbose, maxFrameLength) {\n    this._decoder = new PlistServiceDecoder();\n    this._socketClient\n      // log first, in case there is a problem in processing\n      .pipe(new StreamLogger(StreamLogger.RECEIVE, verbose))\n      .pipe(this._splitter = new LengthBasedSplitter({\n        readableStream: this._socketClient,\n        littleEndian: false,\n        maxFrameLength,\n        lengthFieldOffset: 0,\n        lengthFieldLength: 4,\n        lengthAdjustment: 4,\n      }))\n      .pipe(this._decoder);\n\n    this._encoder = new PlistServiceEncoder();\n    this._encoder\n      .pipe(new StreamLogger(StreamLogger.SEND, verbose))\n      .pipe(this._socketClient);\n  }\n\n  /**\n   * Intializes the data flow for iOS < 11, where data is separated into partial\n   * messages before sending.\n   *\n   * @param {boolean} verbose - whether to print out the hex dump for communication\n   * @param {number} maxFrameLength - The maximum size in bytes of a single data frame\n   *                                  in the device communication protocol\n   */\n  _initializePartialMessageSupport (verbose, maxFrameLength) {\n    // 1MB as buffer for bulding webinspector full messages. We can increase the value if more buffer is needed\n    this._decoder = new WebInspectorDecoder(MB);\n    this._socketClient\n      // log first, in case there is a problem in processing\n      .pipe(new StreamLogger(StreamLogger.RECEIVE, verbose))\n      .pipe(this._splitter = new LengthBasedSplitter({\n        readableStream: this._socketClient,\n        littleEndian: false,\n        maxFrameLength,\n        lengthFieldOffset: 0,\n        lengthFieldLength: 4,\n        lengthAdjustment: 4,\n      }))\n      .pipe(new PlistServiceDecoder())\n      .pipe(this._decoder);\n\n    this._encoder = new WebInspectorEncoder();\n    this._encoder\n      .pipe(new PlistServiceEncoder())\n      .pipe(new StreamLogger(StreamLogger.SEND, verbose))\n      .pipe(this._socketClient);\n  }\n\n  /**\n   * Sends an object to the webinspectord socket\n   * @param {Object} rpcObject The object that will be sent\n   * @throws Will throw an error when the object is null or undefined\n   */\n  sendMessage (rpcObject) {\n    if (_.isNil(rpcObject)) {\n      throw new Error('Cannot send a null object');\n    }\n\n    let message = rpcObject;\n    let lastError;\n    try {\n      try {\n        this._encoder.write(message);\n      } catch (e) {\n        // Workaround for https://github.com/joeferner/node-bplist-creator/issues/29\n        if (e instanceof TypeError) {\n          message = cleanupRpcObject(message);\n          this._encoder.write(message);\n        } else {\n          throw e;\n        }\n      }\n    } catch (err) {\n      lastError = err;\n    }\n\n    if (this._verbose || lastError) {\n      log.debug('Sent message to Web Inspector:');\n      log.debug(util.jsonStringify(message));\n      if (!_.isEqual(message, rpcObject)) {\n        log.debug('Original message:');\n        log.debug(util.jsonStringify(rpcObject));\n      }\n    }\n\n    if (lastError) {\n      throw lastError;\n    }\n\n    // write an empty message, which on real devices ensures the actual message\n    // gets sent to the device. without this it will periodically hang with\n    // nothing sent\n    // however, this causes webinspectord to crash on devices running iOS 10\n    if (!this._isSimulator && this._majorOsVersion >= PARTIAL_MESSAGE_SUPPORT_DEPRECATION_VERSION) {\n      this._encoder.write(' ');\n    }\n  }\n\n  /** The callback function which will be called during message listening\n   * @name MessageCallback\n   * @function\n   * @param {Object} object The rpc object that is sent from the webinspectord\n  */\n\n  /**\n   * Listen to messages coming from webinspectord\n   * @param {MessageCallback} callback\n   */\n  listenMessage (onData) {\n    this._decoder.on('data', (data) => {\n      if (this._verbose) {\n        log.debug('Received message from Web Inspector:');\n        log.debug(util.jsonStringify(data));\n      }\n      onData(data);\n    });\n  }\n}\n\nexport { WebInspectorService, WEB_INSPECTOR_SERVICE_NAME, cleanupRpcObject };\nexport default WebInspectorService;\n"],"mappings":"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"}