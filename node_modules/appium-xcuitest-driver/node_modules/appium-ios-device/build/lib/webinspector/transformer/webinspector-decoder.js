"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.WebInspectorDecoder = void 0;
require("source-map-support/register");
var _stream = _interopRequireDefault(require("stream"));
var _support = require("@appium/support");
class WebInspectorDecoder extends _stream.default.Transform {
  constructor(maxLength) {
    super({
      objectMode: true
    });
    this._frameBufferIndex = 0;
    this._frameBuffer = Buffer.allocUnsafeSlow(maxLength);
  }
  _transform(data, encoding, onData) {
    this._decode(data);
    onData();
  }
  _decode(data) {
    if (data.WIRFinalMessageKey) {
      const buffer = data.WIRFinalMessageKey;
      this._frameBufferIndex += this._readBytes(buffer, 0, this._frameBuffer, this._frameBufferIndex, buffer.length);
      const pref = _support.plist.parsePlist(this._frameBuffer.slice(0, this._frameBufferIndex));
      this.push(pref);
      this._resetBuffers();
    } else {
      const buffer = data.WIRPartialMessageKey;
      this._frameBufferIndex += this._readBytes(buffer, 0, this._frameBuffer, this._frameBufferIndex, buffer.length);
    }
  }
  _readBytes(src, srcIndex, target, targetIndex, nBytesToBeRead) {
    let availableBytes = Math.min(nBytesToBeRead, src.length - srcIndex);
    src.copy(target, targetIndex, srcIndex, srcIndex + availableBytes);
    return availableBytes;
  }
  _resetBuffers() {
    this._frameBufferIndex = 0;
  }
}
exports.WebInspectorDecoder = WebInspectorDecoder;
var _default = WebInspectorDecoder;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfc3RyZWFtIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfc3VwcG9ydCIsIldlYkluc3BlY3RvckRlY29kZXIiLCJTdHJlYW0iLCJUcmFuc2Zvcm0iLCJjb25zdHJ1Y3RvciIsIm1heExlbmd0aCIsIm9iamVjdE1vZGUiLCJfZnJhbWVCdWZmZXJJbmRleCIsIl9mcmFtZUJ1ZmZlciIsIkJ1ZmZlciIsImFsbG9jVW5zYWZlU2xvdyIsIl90cmFuc2Zvcm0iLCJkYXRhIiwiZW5jb2RpbmciLCJvbkRhdGEiLCJfZGVjb2RlIiwiV0lSRmluYWxNZXNzYWdlS2V5IiwiYnVmZmVyIiwiX3JlYWRCeXRlcyIsImxlbmd0aCIsInByZWYiLCJwbGlzdCIsInBhcnNlUGxpc3QiLCJzbGljZSIsInB1c2giLCJfcmVzZXRCdWZmZXJzIiwiV0lSUGFydGlhbE1lc3NhZ2VLZXkiLCJzcmMiLCJzcmNJbmRleCIsInRhcmdldCIsInRhcmdldEluZGV4IiwibkJ5dGVzVG9CZVJlYWQiLCJhdmFpbGFibGVCeXRlcyIsIk1hdGgiLCJtaW4iLCJjb3B5IiwiZXhwb3J0cyIsIl9kZWZhdWx0IiwiZGVmYXVsdCJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi93ZWJpbnNwZWN0b3IvdHJhbnNmb3JtZXIvd2ViaW5zcGVjdG9yLWRlY29kZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFN0cmVhbSBmcm9tICdzdHJlYW0nO1xuaW1wb3J0IHsgcGxpc3QgfSBmcm9tICdAYXBwaXVtL3N1cHBvcnQnO1xuXG5cbmNsYXNzIFdlYkluc3BlY3RvckRlY29kZXIgZXh0ZW5kcyBTdHJlYW0uVHJhbnNmb3JtIHtcbiAgY29uc3RydWN0b3IgKG1heExlbmd0aCkge1xuICAgIHN1cGVyKHsgb2JqZWN0TW9kZTogdHJ1ZSB9KTtcbiAgICB0aGlzLl9mcmFtZUJ1ZmZlckluZGV4ID0gMDtcbiAgICB0aGlzLl9mcmFtZUJ1ZmZlciA9IEJ1ZmZlci5hbGxvY1Vuc2FmZVNsb3cobWF4TGVuZ3RoKTtcbiAgfVxuXG4gIF90cmFuc2Zvcm0gKGRhdGEsIGVuY29kaW5nLCBvbkRhdGEpIHtcbiAgICB0aGlzLl9kZWNvZGUoZGF0YSk7XG4gICAgb25EYXRhKCk7XG4gIH1cblxuICBfZGVjb2RlIChkYXRhKSB7XG4gICAgaWYgKGRhdGEuV0lSRmluYWxNZXNzYWdlS2V5KSB7XG4gICAgICBjb25zdCBidWZmZXIgPSBkYXRhLldJUkZpbmFsTWVzc2FnZUtleTtcbiAgICAgIHRoaXMuX2ZyYW1lQnVmZmVySW5kZXggKz0gdGhpcy5fcmVhZEJ5dGVzKGJ1ZmZlciwgMCwgdGhpcy5fZnJhbWVCdWZmZXIsIHRoaXMuX2ZyYW1lQnVmZmVySW5kZXgsIGJ1ZmZlci5sZW5ndGgpO1xuICAgICAgY29uc3QgcHJlZiA9IHBsaXN0LnBhcnNlUGxpc3QodGhpcy5fZnJhbWVCdWZmZXIuc2xpY2UoMCwgdGhpcy5fZnJhbWVCdWZmZXJJbmRleCkpO1xuICAgICAgdGhpcy5wdXNoKHByZWYpO1xuICAgICAgdGhpcy5fcmVzZXRCdWZmZXJzKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGJ1ZmZlciA9IGRhdGEuV0lSUGFydGlhbE1lc3NhZ2VLZXk7XG4gICAgICB0aGlzLl9mcmFtZUJ1ZmZlckluZGV4ICs9IHRoaXMuX3JlYWRCeXRlcyhidWZmZXIsIDAsIHRoaXMuX2ZyYW1lQnVmZmVyLCB0aGlzLl9mcmFtZUJ1ZmZlckluZGV4LCBidWZmZXIubGVuZ3RoKTtcbiAgICB9XG4gIH1cblxuICBfcmVhZEJ5dGVzIChzcmMsIHNyY0luZGV4LCB0YXJnZXQsIHRhcmdldEluZGV4LCBuQnl0ZXNUb0JlUmVhZCkge1xuICAgIGxldCBhdmFpbGFibGVCeXRlcyA9IE1hdGgubWluKG5CeXRlc1RvQmVSZWFkLCBzcmMubGVuZ3RoIC0gc3JjSW5kZXgpO1xuICAgIHNyYy5jb3B5KHRhcmdldCwgdGFyZ2V0SW5kZXgsIHNyY0luZGV4LCBzcmNJbmRleCArIGF2YWlsYWJsZUJ5dGVzKTtcbiAgICByZXR1cm4gYXZhaWxhYmxlQnl0ZXM7XG4gIH1cblxuICBfcmVzZXRCdWZmZXJzICgpIHtcbiAgICB0aGlzLl9mcmFtZUJ1ZmZlckluZGV4ID0gMDtcbiAgfVxufVxuXG5leHBvcnQgeyBXZWJJbnNwZWN0b3JEZWNvZGVyIH07XG5leHBvcnQgZGVmYXVsdCBXZWJJbnNwZWN0b3JEZWNvZGVyO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBLElBQUFBLE9BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFFBQUEsR0FBQUQsT0FBQTtBQUdBLE1BQU1FLG1CQUFtQixTQUFTQyxlQUFNLENBQUNDLFNBQVMsQ0FBQztFQUNqREMsV0FBV0EsQ0FBRUMsU0FBUyxFQUFFO0lBQ3RCLEtBQUssQ0FBQztNQUFFQyxVQUFVLEVBQUU7SUFBSyxDQUFDLENBQUM7SUFDM0IsSUFBSSxDQUFDQyxpQkFBaUIsR0FBRyxDQUFDO0lBQzFCLElBQUksQ0FBQ0MsWUFBWSxHQUFHQyxNQUFNLENBQUNDLGVBQWUsQ0FBQ0wsU0FBUyxDQUFDO0VBQ3ZEO0VBRUFNLFVBQVVBLENBQUVDLElBQUksRUFBRUMsUUFBUSxFQUFFQyxNQUFNLEVBQUU7SUFDbEMsSUFBSSxDQUFDQyxPQUFPLENBQUNILElBQUksQ0FBQztJQUNsQkUsTUFBTSxFQUFFO0VBQ1Y7RUFFQUMsT0FBT0EsQ0FBRUgsSUFBSSxFQUFFO0lBQ2IsSUFBSUEsSUFBSSxDQUFDSSxrQkFBa0IsRUFBRTtNQUMzQixNQUFNQyxNQUFNLEdBQUdMLElBQUksQ0FBQ0ksa0JBQWtCO01BQ3RDLElBQUksQ0FBQ1QsaUJBQWlCLElBQUksSUFBSSxDQUFDVyxVQUFVLENBQUNELE1BQU0sRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDVCxZQUFZLEVBQUUsSUFBSSxDQUFDRCxpQkFBaUIsRUFBRVUsTUFBTSxDQUFDRSxNQUFNLENBQUM7TUFDOUcsTUFBTUMsSUFBSSxHQUFHQyxjQUFLLENBQUNDLFVBQVUsQ0FBQyxJQUFJLENBQUNkLFlBQVksQ0FBQ2UsS0FBSyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUNoQixpQkFBaUIsQ0FBQyxDQUFDO01BQ2pGLElBQUksQ0FBQ2lCLElBQUksQ0FBQ0osSUFBSSxDQUFDO01BQ2YsSUFBSSxDQUFDSyxhQUFhLEVBQUU7SUFDdEIsQ0FBQyxNQUFNO01BQ0wsTUFBTVIsTUFBTSxHQUFHTCxJQUFJLENBQUNjLG9CQUFvQjtNQUN4QyxJQUFJLENBQUNuQixpQkFBaUIsSUFBSSxJQUFJLENBQUNXLFVBQVUsQ0FBQ0QsTUFBTSxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUNULFlBQVksRUFBRSxJQUFJLENBQUNELGlCQUFpQixFQUFFVSxNQUFNLENBQUNFLE1BQU0sQ0FBQztJQUNoSDtFQUNGO0VBRUFELFVBQVVBLENBQUVTLEdBQUcsRUFBRUMsUUFBUSxFQUFFQyxNQUFNLEVBQUVDLFdBQVcsRUFBRUMsY0FBYyxFQUFFO0lBQzlELElBQUlDLGNBQWMsR0FBR0MsSUFBSSxDQUFDQyxHQUFHLENBQUNILGNBQWMsRUFBRUosR0FBRyxDQUFDUixNQUFNLEdBQUdTLFFBQVEsQ0FBQztJQUNwRUQsR0FBRyxDQUFDUSxJQUFJLENBQUNOLE1BQU0sRUFBRUMsV0FBVyxFQUFFRixRQUFRLEVBQUVBLFFBQVEsR0FBR0ksY0FBYyxDQUFDO0lBQ2xFLE9BQU9BLGNBQWM7RUFDdkI7RUFFQVAsYUFBYUEsQ0FBQSxFQUFJO0lBQ2YsSUFBSSxDQUFDbEIsaUJBQWlCLEdBQUcsQ0FBQztFQUM1QjtBQUNGO0FBQUM2QixPQUFBLENBQUFuQyxtQkFBQSxHQUFBQSxtQkFBQTtBQUFBLElBQUFvQyxRQUFBLEdBR2NwQyxtQkFBbUI7QUFBQW1DLE9BQUEsQ0FBQUUsT0FBQSxHQUFBRCxRQUFBIn0=