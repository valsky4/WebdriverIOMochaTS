{"version":3,"file":"defaults-utils.js","names":["toXmlArg","value","serialize","xmlDoc","_","isPlainObject","DOMParser","parseFromString","subKey","subValue","toPairs","keyEl","createElement","keyTextEl","createTextNode","appendChild","documentElement","subValueEl","importNode","isArray","isBoolean","isInteger","isNumber","isString","valueTextEl","TypeError","JSON","stringify","XMLSerializer","serializeToString","generateDefaultsCommandArgs","valuesMap","replace","resultArgs","key","dictArgs","push","arrayArgs","e","log","warn","message","NSUserDefaults","constructor","plist","asJson","stdout","exec","parse","Error","stderr","update","isEmpty","commandArgs","B","all","map","args"],"sources":["../../lib/defaults-utils.js"],"sourcesContent":["import _ from 'lodash';\nimport { DOMParser, XMLSerializer } from '@xmldom/xmldom';\nimport { exec } from 'teen_process';\nimport B from 'bluebird';\nimport log from './logger';\n\n/**\n * Serializes the given value to plist-compatible\n * XML representation, which is ready for further usage\n * with `defaults` command line tool arguments\n *\n * @param {*} value The value to be serialized\n * @param {boolean} serialize [true] Whether to serialize the resulting\n * XML to string or to return raw HTMLElement instance\n * @returns {HTMLElement|string} Either string or raw node representation of\n * the given value\n * @throws {TypeError} If it is not known how to serialize the given value\n */\nfunction toXmlArg (value, serialize = true) {\n  let xmlDoc = null;\n\n  if (_.isPlainObject(value)) {\n    xmlDoc = new DOMParser().parseFromString('<dict></dict>', 'text/xml');\n    for (const [subKey, subValue] of _.toPairs(value)) {\n      const keyEl = xmlDoc.createElement('key');\n      const keyTextEl = xmlDoc.createTextNode(subKey);\n      keyEl.appendChild(keyTextEl);\n      xmlDoc.documentElement.appendChild(keyEl);\n      const subValueEl = xmlDoc.importNode(toXmlArg(subValue, false), true);\n      xmlDoc.documentElement.appendChild(subValueEl);\n    }\n  } else if (_.isArray(value)) {\n    xmlDoc = new DOMParser().parseFromString('<array></array>', 'text/xml');\n    for (const subValue of value) {\n      const subValueEl = xmlDoc.importNode(toXmlArg(subValue, false), true);\n      xmlDoc.documentElement.appendChild(subValueEl);\n    }\n  } else if (_.isBoolean(value)) {\n    xmlDoc = new DOMParser().parseFromString(value ? '<true/>' : '<false/>', 'text/xml');\n  } else if (_.isInteger(value)) {\n    xmlDoc = new DOMParser().parseFromString(`<integer>${value}</integer>`, 'text/xml');\n  } else if (_.isNumber(value)) {\n    xmlDoc = new DOMParser().parseFromString(`<real>${value}</real>`, 'text/xml');\n  } else if (_.isString(value)) {\n    xmlDoc = new DOMParser().parseFromString(`<string></string>`, 'text/xml');\n    const valueTextEl = xmlDoc.createTextNode(value);\n    xmlDoc.documentElement.appendChild(valueTextEl);\n  }\n\n  if (!xmlDoc) {\n    throw new TypeError(`The defaults value ${JSON.stringify(value)} cannot be written, ` +\n      `because it is not known how to handle its type`);\n  }\n\n  return serialize\n    ? new XMLSerializer().serializeToString(xmlDoc.documentElement)\n    : xmlDoc.documentElement;\n}\n\n/**\n * Generates command line args for the `defaults`\n * command line utility based on the given preference values mapping.\n * See https://shadowfile.inode.link/blog/2018/06/advanced-defaults1-usage/\n * for more details.\n *\n * @param {Object} valuesMap Preferences mapping\n * @param {Boolean} replace [false] Whether to generate arguments that replace\n * complex typed values like arrays or dictionaries in the current plist or\n * update them (the default settings)\n * @returns {Array<Array<string>>} Each item in the array\n * is the `defaults write <plist>` command suffix\n */\nfunction generateDefaultsCommandArgs (valuesMap, replace = false) {\n  const resultArgs = [];\n  for (const [key, value] of _.toPairs(valuesMap)) {\n    try {\n      if (!replace && _.isPlainObject(value)) {\n        const dictArgs = [key, '-dict-add'];\n        for (const [subKey, subValue] of _.toPairs(value)) {\n          dictArgs.push(subKey, toXmlArg(subValue));\n        }\n        resultArgs.push(dictArgs);\n      } else if (!replace && _.isArray(value)) {\n        const arrayArgs = [key, '-array-add'];\n        for (const subValue of value) {\n          arrayArgs.push(toXmlArg(subValue));\n        }\n        resultArgs.push(arrayArgs);\n      } else {\n        resultArgs.push([key, toXmlArg(value)]);\n      }\n    } catch (e) {\n      if (e instanceof TypeError) {\n        log.warn(e.message);\n      } else {\n        throw e;\n      }\n    }\n  }\n  return resultArgs;\n}\n\n\nclass NSUserDefaults {\n  constructor (plist) {\n    this.plist = plist;\n  }\n\n  /**\n   * Reads the content of the given plist file using plutil command line tool\n   * and serializes it to a JSON representation\n   *\n   * @returns {Object} The serialized plist content\n   * @throws {Error} If there was an error during serialization\n   */\n  async asJson () {\n    try {\n      const {stdout} = await exec('plutil', ['-convert', 'json', '-o', '-', this.plist]);\n      return JSON.parse(stdout);\n    } catch (e) {\n      throw new Error(`'${this.plist}' cannot be converted to JSON. Original error: ${e.stderr || e.message}`);\n    }\n  }\n\n  /**\n   * Updates the content of the given plist file.\n   * If the plist does not exist yet then it is going to be created.\n   *\n   * @param {Object} valuesMap Mapping of preference values to update.\n   * If any of item values are of dictionary type then only the first level dictionary gets\n   * updated. Everything below this level will be replaced. This is the known limitation\n   * of the `defaults` command line tool. A workaround for it would be to read the current\n   * preferences mapping first and merge it with this value.\n   * @throws {Error} If there was an error while updating the plist\n   */\n  async update (valuesMap) {\n    if (!_.isPlainObject(valuesMap)) {\n      throw new TypeError(`plist values must be a map. '${valuesMap}' is given instead`);\n    }\n    if (_.isEmpty(valuesMap)) {\n      return;\n    }\n\n    const commandArgs = generateDefaultsCommandArgs(valuesMap);\n    try {\n      await B.all(commandArgs.map((args) => exec('defaults', ['write', this.plist, ...args])));\n    } catch (e) {\n      throw new Error(`Could not write defaults into '${this.plist}'. Original error: ${e.stderr || e.message}`);\n    }\n  }\n}\n\n\nexport {\n  NSUserDefaults,\n  toXmlArg, generateDefaultsCommandArgs,\n};\n"],"mappings":";;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAcA,SAASA,QAAQ,CAAEC,KAAK,EAAEC,SAAS,GAAG,IAAI,EAAE;EAC1C,IAAIC,MAAM,GAAG,IAAI;EAEjB,IAAIC,eAAC,CAACC,aAAa,CAACJ,KAAK,CAAC,EAAE;IAC1BE,MAAM,GAAG,IAAIG,iBAAS,EAAE,CAACC,eAAe,CAAC,eAAe,EAAE,UAAU,CAAC;IACrE,KAAK,MAAM,CAACC,MAAM,EAAEC,QAAQ,CAAC,IAAIL,eAAC,CAACM,OAAO,CAACT,KAAK,CAAC,EAAE;MACjD,MAAMU,KAAK,GAAGR,MAAM,CAACS,aAAa,CAAC,KAAK,CAAC;MACzC,MAAMC,SAAS,GAAGV,MAAM,CAACW,cAAc,CAACN,MAAM,CAAC;MAC/CG,KAAK,CAACI,WAAW,CAACF,SAAS,CAAC;MAC5BV,MAAM,CAACa,eAAe,CAACD,WAAW,CAACJ,KAAK,CAAC;MACzC,MAAMM,UAAU,GAAGd,MAAM,CAACe,UAAU,CAAClB,QAAQ,CAACS,QAAQ,EAAE,KAAK,CAAC,EAAE,IAAI,CAAC;MACrEN,MAAM,CAACa,eAAe,CAACD,WAAW,CAACE,UAAU,CAAC;IAChD;EACF,CAAC,MAAM,IAAIb,eAAC,CAACe,OAAO,CAAClB,KAAK,CAAC,EAAE;IAC3BE,MAAM,GAAG,IAAIG,iBAAS,EAAE,CAACC,eAAe,CAAC,iBAAiB,EAAE,UAAU,CAAC;IACvE,KAAK,MAAME,QAAQ,IAAIR,KAAK,EAAE;MAC5B,MAAMgB,UAAU,GAAGd,MAAM,CAACe,UAAU,CAAClB,QAAQ,CAACS,QAAQ,EAAE,KAAK,CAAC,EAAE,IAAI,CAAC;MACrEN,MAAM,CAACa,eAAe,CAACD,WAAW,CAACE,UAAU,CAAC;IAChD;EACF,CAAC,MAAM,IAAIb,eAAC,CAACgB,SAAS,CAACnB,KAAK,CAAC,EAAE;IAC7BE,MAAM,GAAG,IAAIG,iBAAS,EAAE,CAACC,eAAe,CAACN,KAAK,GAAG,SAAS,GAAG,UAAU,EAAE,UAAU,CAAC;EACtF,CAAC,MAAM,IAAIG,eAAC,CAACiB,SAAS,CAACpB,KAAK,CAAC,EAAE;IAC7BE,MAAM,GAAG,IAAIG,iBAAS,EAAE,CAACC,eAAe,CAAE,YAAWN,KAAM,YAAW,EAAE,UAAU,CAAC;EACrF,CAAC,MAAM,IAAIG,eAAC,CAACkB,QAAQ,CAACrB,KAAK,CAAC,EAAE;IAC5BE,MAAM,GAAG,IAAIG,iBAAS,EAAE,CAACC,eAAe,CAAE,SAAQN,KAAM,SAAQ,EAAE,UAAU,CAAC;EAC/E,CAAC,MAAM,IAAIG,eAAC,CAACmB,QAAQ,CAACtB,KAAK,CAAC,EAAE;IAC5BE,MAAM,GAAG,IAAIG,iBAAS,EAAE,CAACC,eAAe,CAAE,mBAAkB,EAAE,UAAU,CAAC;IACzE,MAAMiB,WAAW,GAAGrB,MAAM,CAACW,cAAc,CAACb,KAAK,CAAC;IAChDE,MAAM,CAACa,eAAe,CAACD,WAAW,CAACS,WAAW,CAAC;EACjD;EAEA,IAAI,CAACrB,MAAM,EAAE;IACX,MAAM,IAAIsB,SAAS,CAAE,sBAAqBC,IAAI,CAACC,SAAS,CAAC1B,KAAK,CAAE,sBAAqB,GAClF,gDAA+C,CAAC;EACrD;EAEA,OAAOC,SAAS,GACZ,IAAI0B,qBAAa,EAAE,CAACC,iBAAiB,CAAC1B,MAAM,CAACa,eAAe,CAAC,GAC7Db,MAAM,CAACa,eAAe;AAC5B;AAeA,SAASc,2BAA2B,CAAEC,SAAS,EAAEC,OAAO,GAAG,KAAK,EAAE;EAChE,MAAMC,UAAU,GAAG,EAAE;EACrB,KAAK,MAAM,CAACC,GAAG,EAAEjC,KAAK,CAAC,IAAIG,eAAC,CAACM,OAAO,CAACqB,SAAS,CAAC,EAAE;IAC/C,IAAI;MACF,IAAI,CAACC,OAAO,IAAI5B,eAAC,CAACC,aAAa,CAACJ,KAAK,CAAC,EAAE;QACtC,MAAMkC,QAAQ,GAAG,CAACD,GAAG,EAAE,WAAW,CAAC;QACnC,KAAK,MAAM,CAAC1B,MAAM,EAAEC,QAAQ,CAAC,IAAIL,eAAC,CAACM,OAAO,CAACT,KAAK,CAAC,EAAE;UACjDkC,QAAQ,CAACC,IAAI,CAAC5B,MAAM,EAAER,QAAQ,CAACS,QAAQ,CAAC,CAAC;QAC3C;QACAwB,UAAU,CAACG,IAAI,CAACD,QAAQ,CAAC;MAC3B,CAAC,MAAM,IAAI,CAACH,OAAO,IAAI5B,eAAC,CAACe,OAAO,CAAClB,KAAK,CAAC,EAAE;QACvC,MAAMoC,SAAS,GAAG,CAACH,GAAG,EAAE,YAAY,CAAC;QACrC,KAAK,MAAMzB,QAAQ,IAAIR,KAAK,EAAE;UAC5BoC,SAAS,CAACD,IAAI,CAACpC,QAAQ,CAACS,QAAQ,CAAC,CAAC;QACpC;QACAwB,UAAU,CAACG,IAAI,CAACC,SAAS,CAAC;MAC5B,CAAC,MAAM;QACLJ,UAAU,CAACG,IAAI,CAAC,CAACF,GAAG,EAAElC,QAAQ,CAACC,KAAK,CAAC,CAAC,CAAC;MACzC;IACF,CAAC,CAAC,OAAOqC,CAAC,EAAE;MACV,IAAIA,CAAC,YAAYb,SAAS,EAAE;QAC1Bc,eAAG,CAACC,IAAI,CAACF,CAAC,CAACG,OAAO,CAAC;MACrB,CAAC,MAAM;QACL,MAAMH,CAAC;MACT;IACF;EACF;EACA,OAAOL,UAAU;AACnB;AAGA,MAAMS,cAAc,CAAC;EACnBC,WAAW,CAAEC,KAAK,EAAE;IAClB,IAAI,CAACA,KAAK,GAAGA,KAAK;EACpB;EASA,MAAMC,MAAM,GAAI;IACd,IAAI;MACF,MAAM;QAACC;MAAM,CAAC,GAAG,MAAM,IAAAC,kBAAI,EAAC,QAAQ,EAAE,CAAC,UAAU,EAAE,MAAM,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,CAACH,KAAK,CAAC,CAAC;MAClF,OAAOlB,IAAI,CAACsB,KAAK,CAACF,MAAM,CAAC;IAC3B,CAAC,CAAC,OAAOR,CAAC,EAAE;MACV,MAAM,IAAIW,KAAK,CAAE,IAAG,IAAI,CAACL,KAAM,kDAAiDN,CAAC,CAACY,MAAM,IAAIZ,CAAC,CAACG,OAAQ,EAAC,CAAC;IAC1G;EACF;EAaA,MAAMU,MAAM,CAAEpB,SAAS,EAAE;IACvB,IAAI,CAAC3B,eAAC,CAACC,aAAa,CAAC0B,SAAS,CAAC,EAAE;MAC/B,MAAM,IAAIN,SAAS,CAAE,gCAA+BM,SAAU,oBAAmB,CAAC;IACpF;IACA,IAAI3B,eAAC,CAACgD,OAAO,CAACrB,SAAS,CAAC,EAAE;MACxB;IACF;IAEA,MAAMsB,WAAW,GAAGvB,2BAA2B,CAACC,SAAS,CAAC;IAC1D,IAAI;MACF,MAAMuB,iBAAC,CAACC,GAAG,CAACF,WAAW,CAACG,GAAG,CAAEC,IAAI,IAAK,IAAAV,kBAAI,EAAC,UAAU,EAAE,CAAC,OAAO,EAAE,IAAI,CAACH,KAAK,EAAE,GAAGa,IAAI,CAAC,CAAC,CAAC,CAAC;IAC1F,CAAC,CAAC,OAAOnB,CAAC,EAAE;MACV,MAAM,IAAIW,KAAK,CAAE,kCAAiC,IAAI,CAACL,KAAM,sBAAqBN,CAAC,CAACY,MAAM,IAAIZ,CAAC,CAACG,OAAQ,EAAC,CAAC;IAC5G;EACF;AACF;AAAC"}