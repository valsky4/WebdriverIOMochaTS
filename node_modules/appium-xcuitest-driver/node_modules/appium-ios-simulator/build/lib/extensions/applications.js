"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("source-map-support/register");
var _lodash = _interopRequireDefault(require("lodash"));
var _path = _interopRequireDefault(require("path"));
var _support = require("@appium/support");
var _logger = _interopRequireDefault(require("../logger"));
var _bluebird = _interopRequireDefault(require("bluebird"));
var _asyncbox = require("asyncbox");
const extensions = {};
extensions.installApp = async function installApp(app) {
  return await this.simctl.installApp(app);
};
extensions.getUserInstalledBundleIdsByBundleName = async function getUserInstalledBundleIdsByBundleName(bundleName) {
  const appsRoot = _path.default.resolve(this.getDir(), 'Containers', 'Bundle', 'Application');
  const infoPlists = await _support.fs.glob('*/*.app/Info.plist', {
    cwd: appsRoot,
    nosort: true,
    strict: false,
    absolute: true
  });
  if (_lodash.default.isEmpty(infoPlists)) {
    return [];
  }
  const bundleInfoPromises = [];
  for (const infoPlist of infoPlists) {
    bundleInfoPromises.push((async () => {
      try {
        return await _support.plist.parsePlistFile(infoPlist);
      } catch (ign) {}
    })());
  }
  const bundleInfos = (await _bluebird.default.all(bundleInfoPromises)).filter(_lodash.default.isPlainObject);
  const bundleIds = bundleInfos.filter(({
    CFBundleName
  }) => CFBundleName === bundleName).map(({
    CFBundleIdentifier
  }) => CFBundleIdentifier);
  if (_lodash.default.isEmpty(bundleIds)) {
    return [];
  }
  _logger.default.debug(`The simulator has ${_support.util.pluralize('bundle', bundleIds.length, true)} which ` + `have '${bundleName}' as their 'CFBundleName': ${JSON.stringify(bundleIds)}`);
  return bundleIds;
};
extensions.isAppInstalled = async function isAppInstalled(bundleId) {
  try {
    const appContainer = await this.simctl.getAppContainer(bundleId);
    return appContainer.endsWith('.app');
  } catch (err) {
    try {
      const info = await this.simctl.appInfo(bundleId);
      return info.includes('ApplicationType');
    } catch (e) {
      return false;
    }
  }
};
extensions.removeApp = async function removeApp(bundleId) {
  await this.simctl.removeApp(bundleId);
};
extensions.launchApp = async function launchApp(bundleId, opts = {}) {
  await this.simctl.launchApp(bundleId);
  const {
    wait = false,
    timeoutMs = 10000
  } = opts;
  if (!wait) {
    return;
  }
  try {
    await (0, _asyncbox.waitForCondition)(async () => await this.isAppRunning(bundleId), {
      waitMs: timeoutMs,
      intervalMs: 300
    });
  } catch (e) {
    throw new Error(`App '${bundleId}' is not runnning after ${timeoutMs}ms timeout.`);
  }
};
extensions.terminateApp = async function terminateApp(bundleId) {
  await this.simctl.terminateApp(bundleId);
};
extensions.isAppRunning = async function isAppRunning(bundleId) {
  return (await this.ps()).some(({
    name
  }) => name === bundleId);
};
extensions.scrubApp = async function scrubApp(bundleId) {
  const appDataRoot = await this.simctl.getAppContainer(bundleId, 'data');
  const appFiles = await _support.fs.glob('**/*', {
    cwd: appDataRoot,
    nosort: true,
    strict: false,
    nodir: true,
    absolute: true
  });
  _logger.default.info(`Found ${appFiles.length} ${bundleId} app ${_support.util.pluralize('file', appFiles.length, false)} to scrub`);
  if (_lodash.default.isEmpty(appFiles)) {
    return;
  }
  try {
    await this.terminateApp(bundleId);
  } catch (ign) {}
  await _bluebird.default.all(appFiles.map(p => _support.fs.rimraf(p)));
};
var _default = extensions;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJleHRlbnNpb25zIiwiaW5zdGFsbEFwcCIsImFwcCIsInNpbWN0bCIsImdldFVzZXJJbnN0YWxsZWRCdW5kbGVJZHNCeUJ1bmRsZU5hbWUiLCJidW5kbGVOYW1lIiwiYXBwc1Jvb3QiLCJwYXRoIiwicmVzb2x2ZSIsImdldERpciIsImluZm9QbGlzdHMiLCJmcyIsImdsb2IiLCJjd2QiLCJub3NvcnQiLCJzdHJpY3QiLCJhYnNvbHV0ZSIsIl8iLCJpc0VtcHR5IiwiYnVuZGxlSW5mb1Byb21pc2VzIiwiaW5mb1BsaXN0IiwicHVzaCIsInBsaXN0IiwicGFyc2VQbGlzdEZpbGUiLCJpZ24iLCJidW5kbGVJbmZvcyIsIkIiLCJhbGwiLCJmaWx0ZXIiLCJpc1BsYWluT2JqZWN0IiwiYnVuZGxlSWRzIiwiQ0ZCdW5kbGVOYW1lIiwibWFwIiwiQ0ZCdW5kbGVJZGVudGlmaWVyIiwibG9nIiwiZGVidWciLCJ1dGlsIiwicGx1cmFsaXplIiwibGVuZ3RoIiwiSlNPTiIsInN0cmluZ2lmeSIsImlzQXBwSW5zdGFsbGVkIiwiYnVuZGxlSWQiLCJhcHBDb250YWluZXIiLCJnZXRBcHBDb250YWluZXIiLCJlbmRzV2l0aCIsImVyciIsImluZm8iLCJhcHBJbmZvIiwiaW5jbHVkZXMiLCJlIiwicmVtb3ZlQXBwIiwibGF1bmNoQXBwIiwib3B0cyIsIndhaXQiLCJ0aW1lb3V0TXMiLCJ3YWl0Rm9yQ29uZGl0aW9uIiwiaXNBcHBSdW5uaW5nIiwid2FpdE1zIiwiaW50ZXJ2YWxNcyIsIkVycm9yIiwidGVybWluYXRlQXBwIiwicHMiLCJzb21lIiwibmFtZSIsInNjcnViQXBwIiwiYXBwRGF0YVJvb3QiLCJhcHBGaWxlcyIsIm5vZGlyIiwicCIsInJpbXJhZiJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9leHRlbnNpb25zL2FwcGxpY2F0aW9ucy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgeyBmcywgcGxpc3QsIHV0aWwgfSBmcm9tICdAYXBwaXVtL3N1cHBvcnQnO1xuaW1wb3J0IGxvZyBmcm9tICcuLi9sb2dnZXInO1xuaW1wb3J0IEIgZnJvbSAnYmx1ZWJpcmQnO1xuaW1wb3J0IHsgd2FpdEZvckNvbmRpdGlvbiB9IGZyb20gJ2FzeW5jYm94JztcblxuY29uc3QgZXh0ZW5zaW9ucyA9IHt9O1xuXG4vKipcbiAqIEluc3RhbGwgdmFsaWQgLmFwcCBwYWNrYWdlIG9uIFNpbXVsYXRvci5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYXBwIC0gVGhlIHBhdGggdG8gdGhlIC5hcHAgcGFja2FnZS5cbiAqL1xuZXh0ZW5zaW9ucy5pbnN0YWxsQXBwID0gYXN5bmMgZnVuY3Rpb24gaW5zdGFsbEFwcCAoYXBwKSB7XG4gIHJldHVybiBhd2FpdCB0aGlzLnNpbWN0bC5pbnN0YWxsQXBwKGFwcCk7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdXNlciBpbnN0YWxsZWQgYnVuZGxlIGlkcyB3aGljaCBoYXMgJ2J1bmRsZU5hbWUnIGluIHRoZWlyIEluZm8uUGxpc3QgYXMgJ0NGQnVuZGxlTmFtZSdcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYnVuZGxlTmFtZSAtIFRoZSBidW5kbGUgbmFtZSBvZiB0aGUgYXBwbGljYXRpb24gdG8gYmUgY2hlY2tlZC5cbiAqIEByZXR1cm4ge2FycmF5PHN0cmluZz59IC0gVGhlIGxpc3Qgb2YgYnVuZGxlIGlkcyB3aGljaCBoYXZlICdidW5kbGVOYW1lJ1xuICovXG5leHRlbnNpb25zLmdldFVzZXJJbnN0YWxsZWRCdW5kbGVJZHNCeUJ1bmRsZU5hbWUgPSBhc3luYyBmdW5jdGlvbiBnZXRVc2VySW5zdGFsbGVkQnVuZGxlSWRzQnlCdW5kbGVOYW1lIChidW5kbGVOYW1lKSB7XG4gIGNvbnN0IGFwcHNSb290ID0gcGF0aC5yZXNvbHZlKHRoaXMuZ2V0RGlyKCksICdDb250YWluZXJzJywgJ0J1bmRsZScsICdBcHBsaWNhdGlvbicpO1xuICAvLyBnbG9iIGFsbCBJbmZvLnBsaXN0IGZyb20gc2ltZGlyL2RhdGEvQ29udGFpbmVycy9CdW5kbGUvQXBwbGljYXRpb25cbiAgY29uc3QgaW5mb1BsaXN0cyA9IGF3YWl0IGZzLmdsb2IoJyovKi5hcHAvSW5mby5wbGlzdCcsIHtcbiAgICBjd2Q6IGFwcHNSb290LFxuICAgIG5vc29ydDogdHJ1ZSxcbiAgICBzdHJpY3Q6IGZhbHNlLFxuICAgIGFic29sdXRlOiB0cnVlLFxuICB9KTtcbiAgaWYgKF8uaXNFbXB0eShpbmZvUGxpc3RzKSkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIGNvbnN0IGJ1bmRsZUluZm9Qcm9taXNlcyA9IFtdO1xuICBmb3IgKGNvbnN0IGluZm9QbGlzdCBvZiBpbmZvUGxpc3RzKSB7XG4gICAgYnVuZGxlSW5mb1Byb21pc2VzLnB1c2goKGFzeW5jICgpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBhd2FpdCBwbGlzdC5wYXJzZVBsaXN0RmlsZShpbmZvUGxpc3QpO1xuICAgICAgfSBjYXRjaCAoaWduKSB7fVxuICAgIH0pKCkpO1xuICB9XG4gIGNvbnN0IGJ1bmRsZUluZm9zID0gKGF3YWl0IEIuYWxsKGJ1bmRsZUluZm9Qcm9taXNlcykpLmZpbHRlcihfLmlzUGxhaW5PYmplY3QpO1xuICBjb25zdCBidW5kbGVJZHMgPSBidW5kbGVJbmZvc1xuICAgIC5maWx0ZXIoKHsgQ0ZCdW5kbGVOYW1lIH0pID0+IENGQnVuZGxlTmFtZSA9PT0gYnVuZGxlTmFtZSlcbiAgICAubWFwKCh7IENGQnVuZGxlSWRlbnRpZmllciB9KSA9PiBDRkJ1bmRsZUlkZW50aWZpZXIpO1xuICBpZiAoXy5pc0VtcHR5KGJ1bmRsZUlkcykpIHtcbiAgICByZXR1cm4gW107XG4gIH1cblxuICBsb2cuZGVidWcoXG4gICAgYFRoZSBzaW11bGF0b3IgaGFzICR7dXRpbC5wbHVyYWxpemUoJ2J1bmRsZScsIGJ1bmRsZUlkcy5sZW5ndGgsIHRydWUpfSB3aGljaCBgICtcbiAgICBgaGF2ZSAnJHtidW5kbGVOYW1lfScgYXMgdGhlaXIgJ0NGQnVuZGxlTmFtZSc6ICR7SlNPTi5zdHJpbmdpZnkoYnVuZGxlSWRzKX1gXG4gICk7XG4gIHJldHVybiBidW5kbGVJZHM7XG59O1xuXG4vKipcbiAqIFZlcmlmeSB3aGV0aGVyIHRoZSBwYXJ0aWN1bGFyIGFwcGxpY2F0aW9uIGlzIGluc3RhbGxlZCBvbiBTaW11bGF0b3IuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJ1bmRsZUlkIC0gVGhlIGJ1bmRsZSBpZCBvZiB0aGUgYXBwbGljYXRpb24gdG8gYmUgY2hlY2tlZC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIGdpdmVuIGFwcGxpY2F0aW9uIGlzIGluc3RhbGxlZC5cbiAqL1xuZXh0ZW5zaW9ucy5pc0FwcEluc3RhbGxlZCA9IGFzeW5jIGZ1bmN0aW9uIGlzQXBwSW5zdGFsbGVkIChidW5kbGVJZCkge1xuICB0cnkge1xuICAgIGNvbnN0IGFwcENvbnRhaW5lciA9IGF3YWl0IHRoaXMuc2ltY3RsLmdldEFwcENvbnRhaW5lcihidW5kbGVJZCk7XG4gICAgcmV0dXJuIGFwcENvbnRhaW5lci5lbmRzV2l0aCgnLmFwcCcpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBnZXRfYXBwX2NvbnRhaW5lciBzdWJjb21tYW5kIGZhaWxzIGZvciBzeXN0ZW0gYXBwbGljYXRpb25zLFxuICAgIC8vIHNvIHdlIHRyeSB0aGUgaGlkZGVuIGFwcGluZm8gc3ViY29tbWFuZCwgd2hpY2ggcHJpbnRzIGNvcnJlY3QgaW5mbyBmb3JcbiAgICAvLyBzeXN0ZW0vaGlkZGVuIGFwcHNcbiAgICB0cnkge1xuICAgICAgY29uc3QgaW5mbyA9IGF3YWl0IHRoaXMuc2ltY3RsLmFwcEluZm8oYnVuZGxlSWQpO1xuICAgICAgcmV0dXJuIGluZm8uaW5jbHVkZXMoJ0FwcGxpY2F0aW9uVHlwZScpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogVW5pbnN0YWxsIHRoZSBnaXZlbiBhcHBsaWNhdGlvbiBmcm9tIHRoZSBjdXJyZW50IFNpbXVsYXRvci5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYnVuZGxlSWQgLSBUaGUgYnVpbmRsZSBJRCBvZiB0aGUgYXBwbGljYXRpb24gdG8gYmUgcmVtb3ZlZC5cbiAqL1xuZXh0ZW5zaW9ucy5yZW1vdmVBcHAgPSBhc3luYyBmdW5jdGlvbiByZW1vdmVBcHAgKGJ1bmRsZUlkKSB7XG4gIGF3YWl0IHRoaXMuc2ltY3RsLnJlbW92ZUFwcChidW5kbGVJZCk7XG59O1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IExhdW5jaEFwcE9wdHNcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gd2FpdCBbZmFsc2VdIFdoZXRoZXIgdG8gd2FpdCB1bnRpbCB0aGUgYXBwIGhhcyBmdWxseSBzdGFydGVkIGFuZFxuICogaXMgcHJlc2VudCBpbiBwcm9jZXNzZXMgbGlzdFxuICogQHByb3BlcnR5IHtudW1iZXJ9IHRpbWVvdXRNcyBbMTAwMDBdIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIHdhaXQgdW50aWxcbiAqIHRoZSBhcHAgaXMgZnVsbHkgc3RhcnRlZC4gT25seSBhcHBsaWNhdGJsZSBpZiBgd2FpdGAgaXMgdHJ1ZS5cbiAqL1xuXG4vKipcbiAqIFN0YXJ0cyB0aGUgZ2l2ZW4gYXBwbGljYXRpb24gb24gU2ltdWxhdG9yXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJ1bmRsZUlkIC0gVGhlIGJ1aW5kbGUgSUQgb2YgdGhlIGFwcGxpY2F0aW9uIHRvIGJlIGxhdW5jaGVkXG4gKiBAcGFyYW0ge0xhdW5jaEFwcE9wdHN9IG9wdHNcbiAqL1xuZXh0ZW5zaW9ucy5sYXVuY2hBcHAgPSBhc3luYyBmdW5jdGlvbiBsYXVuY2hBcHAgKGJ1bmRsZUlkLCBvcHRzID0ge30pIHtcbiAgYXdhaXQgdGhpcy5zaW1jdGwubGF1bmNoQXBwKGJ1bmRsZUlkKTtcbiAgY29uc3Qge1xuICAgIHdhaXQgPSBmYWxzZSxcbiAgICB0aW1lb3V0TXMgPSAxMDAwMCxcbiAgfSA9IG9wdHM7XG4gIGlmICghd2FpdCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRyeSB7XG4gICAgYXdhaXQgd2FpdEZvckNvbmRpdGlvbihhc3luYyAoKSA9PiBhd2FpdCB0aGlzLmlzQXBwUnVubmluZyhidW5kbGVJZCksIHtcbiAgICAgIHdhaXRNczogdGltZW91dE1zLFxuICAgICAgaW50ZXJ2YWxNczogMzAwXG4gICAgfSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYEFwcCAnJHtidW5kbGVJZH0nIGlzIG5vdCBydW5ubmluZyBhZnRlciAke3RpbWVvdXRNc31tcyB0aW1lb3V0LmApO1xuICB9XG59O1xuXG4vKipcbiAqIFN0b3BzIHRoZSBnaXZlbiBhcHBsaWNhdGlvbiBvbiAgU2ltdWxhdG9yLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBidW5kbGVJZCAtIFRoZSBidWluZGxlIElEIG9mIHRoZSBhcHBsaWNhdGlvbiB0byBiZSBzdG9wcGVkXG4gKi9cbmV4dGVuc2lvbnMudGVybWluYXRlQXBwID0gYXN5bmMgZnVuY3Rpb24gdGVybWluYXRlQXBwIChidW5kbGVJZCkge1xuICBhd2FpdCB0aGlzLnNpbWN0bC50ZXJtaW5hdGVBcHAoYnVuZGxlSWQpO1xufTtcblxuLyoqXG4gKiBDaGVjayBpZiBhcHAgd2l0aCB0aGUgZ2l2ZW4gaWRlbnRpZmllciBpcyBydW5uaW5nLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBidW5kbGVJZCAtIFRoZSBidWluZGxlIElEIG9mIHRoZSBhcHBsaWNhdGlvbiB0byBiZSBjaGVja2VkLlxuICovXG5leHRlbnNpb25zLmlzQXBwUnVubmluZyA9IGFzeW5jIGZ1bmN0aW9uIGlzQXBwUnVubmluZyAoYnVuZGxlSWQpIHtcbiAgcmV0dXJuIChhd2FpdCB0aGlzLnBzKCkpLnNvbWUoKHtuYW1lfSkgPT4gbmFtZSA9PT0gYnVuZGxlSWQpO1xufTtcblxuLyoqXG4gKiBTY3J1YiAoZGVsZXRlIHRoZSBwcmVmZXJlbmNlcyBhbmQgY2hhbmdlZCBmaWxlcykgdGhlIHBhcnRpY3VsYXIgYXBwbGljYXRpb24gb24gU2ltdWxhdG9yLlxuICogVGhlIGFwcCB3aWxsIGJlIHRlcm1pbmF0ZWQgYXV0b21hdGljYWxseSBpZiBpdCBpcyBydW5uaW5nLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBidW5kbGVJZCAtIEJ1bmRsZSBpZGVudGlmaWVyIG9mIHRoZSBhcHBsaWNhdGlvbi5cbiAqIEB0aHJvd3Mge0Vycm9yfSBpZiB0aGUgZ2l2ZW4gYXBwIGlzIG5vdCBpbnN0YWxsZWQuXG4gKi9cbmV4dGVuc2lvbnMuc2NydWJBcHAgPSBhc3luYyBmdW5jdGlvbiBzY3J1YkFwcCAoYnVuZGxlSWQpIHtcbiAgY29uc3QgYXBwRGF0YVJvb3QgPSBhd2FpdCB0aGlzLnNpbWN0bC5nZXRBcHBDb250YWluZXIoYnVuZGxlSWQsICdkYXRhJyk7XG4gIGNvbnN0IGFwcEZpbGVzID0gYXdhaXQgZnMuZ2xvYignKiovKicsIHtcbiAgICBjd2Q6IGFwcERhdGFSb290LFxuICAgIG5vc29ydDogdHJ1ZSxcbiAgICBzdHJpY3Q6IGZhbHNlLFxuICAgIG5vZGlyOiB0cnVlLFxuICAgIGFic29sdXRlOiB0cnVlLFxuICB9KTtcbiAgbG9nLmluZm8oYEZvdW5kICR7YXBwRmlsZXMubGVuZ3RofSAke2J1bmRsZUlkfSBhcHAgJHt1dGlsLnBsdXJhbGl6ZSgnZmlsZScsIGFwcEZpbGVzLmxlbmd0aCwgZmFsc2UpfSB0byBzY3J1YmApO1xuICBpZiAoXy5pc0VtcHR5KGFwcEZpbGVzKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRyeSB7XG4gICAgYXdhaXQgdGhpcy50ZXJtaW5hdGVBcHAoYnVuZGxlSWQpO1xuICB9IGNhdGNoIChpZ24pIHt9XG4gIGF3YWl0IEIuYWxsKGFwcEZpbGVzLm1hcCgocCkgPT4gZnMucmltcmFmKHApKSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBleHRlbnNpb25zO1xuIl0sIm1hcHBpbmdzIjoiOzs7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