"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("source-map-support/register");
var _lodash = _interopRequireDefault(require("lodash"));
var _logger = _interopRequireDefault(require("../logger"));
const extensions = {};
extensions.isBiometricEnrolled = async function isBiometricEnrolled() {
  const output = await this.executeUIClientScript(`
    tell application "System Events"
      tell process "Simulator"
        set dstMenuItem to menu item "Toggle Enrolled State" of menu 1 of menu item "Touch ID" of menu 1 of menu bar item "Hardware" of menu bar 1
        set isChecked to (value of attribute "AXMenuItemMarkChar" of dstMenuItem) is "✓"
      end tell
    end tell
  `);
  _logger.default.debug(`Touch ID enrolled state: ${output}`);
  return _lodash.default.isString(output) && output.trim() === 'true';
};
extensions.enrollBiometric = async function enrollBiometric(isEnabled = true) {
  await this.executeUIClientScript(`
    tell application "System Events"
      tell process "Simulator"
        set dstMenuItem to menu item "Toggle Enrolled State" of menu 1 of menu item "Touch ID" of menu 1 of menu bar item "Hardware" of menu bar 1
        set isChecked to (value of attribute "AXMenuItemMarkChar" of dstMenuItem) is "✓"
        if ${isEnabled ? 'not ' : ''}isChecked then
          click dstMenuItem
        end if
      end tell
    end tell
  `);
};
extensions.sendBiometricMatch = async function sendBiometricMatch(shouldMatch = true) {
  await this.executeUIClientScript(`
    tell application "System Events"
      tell process "Simulator"
        set dstMenuItem to menu item "${shouldMatch ? 'Matching Touch' : 'Non-matching Touch'}" of menu 1 of menu item "Touch ID" of menu 1 of menu bar item "Hardware" of menu bar 1
        click dstMenuItem
      end tell
    end tell
  `);
};
var _default = extensions;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJleHRlbnNpb25zIiwiaXNCaW9tZXRyaWNFbnJvbGxlZCIsIm91dHB1dCIsImV4ZWN1dGVVSUNsaWVudFNjcmlwdCIsImxvZyIsImRlYnVnIiwiXyIsImlzU3RyaW5nIiwidHJpbSIsImVucm9sbEJpb21ldHJpYyIsImlzRW5hYmxlZCIsInNlbmRCaW9tZXRyaWNNYXRjaCIsInNob3VsZE1hdGNoIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vbGliL2V4dGVuc2lvbnMvYmlvbWV0cmljLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgbG9nIGZyb20gJy4uL2xvZ2dlcic7XG5cbmNvbnN0IGV4dGVuc2lvbnMgPSB7fTtcblxuLyoqXG4gKiBHZXQgdGhlIGN1cnJlbnQgc3RhdGUgb2YgQmlvbWV0cmljIEVucm9sbG1lbnQgZmVhdHVyZS5cbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gRWl0aGVyIHRydWUgb3IgZmFsc2VcbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiBFbnJvbGxtZW50IHN0YXRlIGNhbm5vdCBiZSBkZXRlcm1pbmVkXG4gKi9cbmV4dGVuc2lvbnMuaXNCaW9tZXRyaWNFbnJvbGxlZCA9IGFzeW5jIGZ1bmN0aW9uIGlzQmlvbWV0cmljRW5yb2xsZWQgKCkge1xuICBjb25zdCBvdXRwdXQgPSBhd2FpdCB0aGlzLmV4ZWN1dGVVSUNsaWVudFNjcmlwdChgXG4gICAgdGVsbCBhcHBsaWNhdGlvbiBcIlN5c3RlbSBFdmVudHNcIlxuICAgICAgdGVsbCBwcm9jZXNzIFwiU2ltdWxhdG9yXCJcbiAgICAgICAgc2V0IGRzdE1lbnVJdGVtIHRvIG1lbnUgaXRlbSBcIlRvZ2dsZSBFbnJvbGxlZCBTdGF0ZVwiIG9mIG1lbnUgMSBvZiBtZW51IGl0ZW0gXCJUb3VjaCBJRFwiIG9mIG1lbnUgMSBvZiBtZW51IGJhciBpdGVtIFwiSGFyZHdhcmVcIiBvZiBtZW51IGJhciAxXG4gICAgICAgIHNldCBpc0NoZWNrZWQgdG8gKHZhbHVlIG9mIGF0dHJpYnV0ZSBcIkFYTWVudUl0ZW1NYXJrQ2hhclwiIG9mIGRzdE1lbnVJdGVtKSBpcyBcIuKck1wiXG4gICAgICBlbmQgdGVsbFxuICAgIGVuZCB0ZWxsXG4gIGApO1xuICBsb2cuZGVidWcoYFRvdWNoIElEIGVucm9sbGVkIHN0YXRlOiAke291dHB1dH1gKTtcbiAgcmV0dXJuIF8uaXNTdHJpbmcob3V0cHV0KSAmJiBvdXRwdXQudHJpbSgpID09PSAndHJ1ZSc7XG59O1xuXG4vKipcbiAqIEVucm9sbHMgYmlvbWV0cmljIChUb3VjaElkLCBGYWNlSWQpIGZlYXR1cmUgdGVzdGluZyBpbiBTaW11bGF0b3IgVUkgY2xpZW50LlxuICpcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNFbmFibGVkIC0gRGVmaW5lcyB3aGV0aGVyIGJpb21ldHJpYyBzdGF0ZSBpcyBlbmFibGVkL2Rpc2FibGVkXG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIGVucm9sbGVkIHN0YXRlIGNhbm5vdCBiZSBjaGFuZ2VkXG4gKi9cbmV4dGVuc2lvbnMuZW5yb2xsQmlvbWV0cmljID0gYXN5bmMgZnVuY3Rpb24gZW5yb2xsQmlvbWV0cmljIChpc0VuYWJsZWQgPSB0cnVlKSB7XG4gIGF3YWl0IHRoaXMuZXhlY3V0ZVVJQ2xpZW50U2NyaXB0KGBcbiAgICB0ZWxsIGFwcGxpY2F0aW9uIFwiU3lzdGVtIEV2ZW50c1wiXG4gICAgICB0ZWxsIHByb2Nlc3MgXCJTaW11bGF0b3JcIlxuICAgICAgICBzZXQgZHN0TWVudUl0ZW0gdG8gbWVudSBpdGVtIFwiVG9nZ2xlIEVucm9sbGVkIFN0YXRlXCIgb2YgbWVudSAxIG9mIG1lbnUgaXRlbSBcIlRvdWNoIElEXCIgb2YgbWVudSAxIG9mIG1lbnUgYmFyIGl0ZW0gXCJIYXJkd2FyZVwiIG9mIG1lbnUgYmFyIDFcbiAgICAgICAgc2V0IGlzQ2hlY2tlZCB0byAodmFsdWUgb2YgYXR0cmlidXRlIFwiQVhNZW51SXRlbU1hcmtDaGFyXCIgb2YgZHN0TWVudUl0ZW0pIGlzIFwi4pyTXCJcbiAgICAgICAgaWYgJHtpc0VuYWJsZWQgPyAnbm90ICcgOiAnJ31pc0NoZWNrZWQgdGhlblxuICAgICAgICAgIGNsaWNrIGRzdE1lbnVJdGVtXG4gICAgICAgIGVuZCBpZlxuICAgICAgZW5kIHRlbGxcbiAgICBlbmQgdGVsbFxuICBgKTtcbn07XG5cbi8qKlxuICogU2VuZHMgYSBub3RpZmljYXRpb24gdG8gbWF0Y2gvbm90IG1hdGNoIHRoZSB0b3VjaCBpZC5cbiAqXG4gKiBAcGFyYW0gez9ib29sZWFufSBzaG91bGRNYXRjaCBbdHJ1ZV0gLSBTZXQgaXQgdG8gdHJ1ZSBvciBmYWxzZSBpbiBvcmRlciB0byBlbXVsYXRlXG4gKiBtYXRjaGluZy9ub3QgbWF0Y2hpbmcgdGhlIGNvcnJlc3BvbmRpbmcgYmlvbWV0cmljXG4gKi9cbmV4dGVuc2lvbnMuc2VuZEJpb21ldHJpY01hdGNoID0gYXN5bmMgZnVuY3Rpb24gc2VuZEJpb21ldHJpY01hdGNoIChzaG91bGRNYXRjaCA9IHRydWUpIHtcbiAgYXdhaXQgdGhpcy5leGVjdXRlVUlDbGllbnRTY3JpcHQoYFxuICAgIHRlbGwgYXBwbGljYXRpb24gXCJTeXN0ZW0gRXZlbnRzXCJcbiAgICAgIHRlbGwgcHJvY2VzcyBcIlNpbXVsYXRvclwiXG4gICAgICAgIHNldCBkc3RNZW51SXRlbSB0byBtZW51IGl0ZW0gXCIke3Nob3VsZE1hdGNoID8gJ01hdGNoaW5nIFRvdWNoJyA6ICdOb24tbWF0Y2hpbmcgVG91Y2gnfVwiIG9mIG1lbnUgMSBvZiBtZW51IGl0ZW0gXCJUb3VjaCBJRFwiIG9mIG1lbnUgMSBvZiBtZW51IGJhciBpdGVtIFwiSGFyZHdhcmVcIiBvZiBtZW51IGJhciAxXG4gICAgICAgIGNsaWNrIGRzdE1lbnVJdGVtXG4gICAgICBlbmQgdGVsbFxuICAgIGVuZCB0ZWxsXG4gIGApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZXh0ZW5zaW9ucztcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtBQUNBO0FBRUEsTUFBTUEsVUFBVSxHQUFHLENBQUMsQ0FBQztBQVFyQkEsVUFBVSxDQUFDQyxtQkFBbUIsR0FBRyxlQUFlQSxtQkFBbUIsR0FBSTtFQUNyRSxNQUFNQyxNQUFNLEdBQUcsTUFBTSxJQUFJLENBQUNDLHFCQUFxQixDQUFFO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUcsQ0FBQztFQUNGQyxlQUFHLENBQUNDLEtBQUssQ0FBRSw0QkFBMkJILE1BQU8sRUFBQyxDQUFDO0VBQy9DLE9BQU9JLGVBQUMsQ0FBQ0MsUUFBUSxDQUFDTCxNQUFNLENBQUMsSUFBSUEsTUFBTSxDQUFDTSxJQUFJLEVBQUUsS0FBSyxNQUFNO0FBQ3ZELENBQUM7QUFRRFIsVUFBVSxDQUFDUyxlQUFlLEdBQUcsZUFBZUEsZUFBZSxDQUFFQyxTQUFTLEdBQUcsSUFBSSxFQUFFO0VBQzdFLE1BQU0sSUFBSSxDQUFDUCxxQkFBcUIsQ0FBRTtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWFPLFNBQVMsR0FBRyxNQUFNLEdBQUcsRUFBRztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUcsQ0FBQztBQUNKLENBQUM7QUFRRFYsVUFBVSxDQUFDVyxrQkFBa0IsR0FBRyxlQUFlQSxrQkFBa0IsQ0FBRUMsV0FBVyxHQUFHLElBQUksRUFBRTtFQUNyRixNQUFNLElBQUksQ0FBQ1QscUJBQXFCLENBQUU7QUFDcEM7QUFDQTtBQUNBLHdDQUF3Q1MsV0FBVyxHQUFHLGdCQUFnQixHQUFHLG9CQUFxQjtBQUM5RjtBQUNBO0FBQ0E7QUFDQSxHQUFHLENBQUM7QUFDSixDQUFDO0FBQUMsZUFFYVosVUFBVTtBQUFBIn0=