{"version":3,"file":"biometric.js","names":["extensions","isBiometricEnrolled","output","executeUIClientScript","log","debug","_","isString","trim","enrollBiometric","isEnabled","sendBiometricMatch","shouldMatch"],"sources":["../../../lib/extensions/biometric.js"],"sourcesContent":["import _ from 'lodash';\nimport log from '../logger';\n\nconst extensions = {};\n\n/**\n * Get the current state of Biometric Enrollment feature.\n *\n * @returns {boolean} Either true or false\n * @throws {Error} If Enrollment state cannot be determined\n */\nextensions.isBiometricEnrolled = async function isBiometricEnrolled () {\n  const output = await this.executeUIClientScript(`\n    tell application \"System Events\"\n      tell process \"Simulator\"\n        set dstMenuItem to menu item \"Toggle Enrolled State\" of menu 1 of menu item \"Touch ID\" of menu 1 of menu bar item \"Hardware\" of menu bar 1\n        set isChecked to (value of attribute \"AXMenuItemMarkChar\" of dstMenuItem) is \"✓\"\n      end tell\n    end tell\n  `);\n  log.debug(`Touch ID enrolled state: ${output}`);\n  return _.isString(output) && output.trim() === 'true';\n};\n\n/**\n * Enrolls biometric (TouchId, FaceId) feature testing in Simulator UI client.\n *\n * @param {boolean} isEnabled - Defines whether biometric state is enabled/disabled\n * @throws {Error} If the enrolled state cannot be changed\n */\nextensions.enrollBiometric = async function enrollBiometric (isEnabled = true) {\n  await this.executeUIClientScript(`\n    tell application \"System Events\"\n      tell process \"Simulator\"\n        set dstMenuItem to menu item \"Toggle Enrolled State\" of menu 1 of menu item \"Touch ID\" of menu 1 of menu bar item \"Hardware\" of menu bar 1\n        set isChecked to (value of attribute \"AXMenuItemMarkChar\" of dstMenuItem) is \"✓\"\n        if ${isEnabled ? 'not ' : ''}isChecked then\n          click dstMenuItem\n        end if\n      end tell\n    end tell\n  `);\n};\n\n/**\n * Sends a notification to match/not match the touch id.\n *\n * @param {?boolean} shouldMatch [true] - Set it to true or false in order to emulate\n * matching/not matching the corresponding biometric\n */\nextensions.sendBiometricMatch = async function sendBiometricMatch (shouldMatch = true) {\n  await this.executeUIClientScript(`\n    tell application \"System Events\"\n      tell process \"Simulator\"\n        set dstMenuItem to menu item \"${shouldMatch ? 'Matching Touch' : 'Non-matching Touch'}\" of menu 1 of menu item \"Touch ID\" of menu 1 of menu bar item \"Hardware\" of menu bar 1\n        click dstMenuItem\n      end tell\n    end tell\n  `);\n};\n\nexport default extensions;\n"],"mappings":";;;;;;;;AAAA;AACA;AAEA,MAAMA,UAAU,GAAG,CAAC,CAAC;AAQrBA,UAAU,CAACC,mBAAmB,GAAG,eAAeA,mBAAmB,GAAI;EACrE,MAAMC,MAAM,GAAG,MAAM,IAAI,CAACC,qBAAqB,CAAE;AACnD;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,CAAC;EACFC,eAAG,CAACC,KAAK,CAAE,4BAA2BH,MAAO,EAAC,CAAC;EAC/C,OAAOI,eAAC,CAACC,QAAQ,CAACL,MAAM,CAAC,IAAIA,MAAM,CAACM,IAAI,EAAE,KAAK,MAAM;AACvD,CAAC;AAQDR,UAAU,CAACS,eAAe,GAAG,eAAeA,eAAe,CAAEC,SAAS,GAAG,IAAI,EAAE;EAC7E,MAAM,IAAI,CAACP,qBAAqB,CAAE;AACpC;AACA;AACA;AACA;AACA,aAAaO,SAAS,GAAG,MAAM,GAAG,EAAG;AACrC;AACA;AACA;AACA;AACA,GAAG,CAAC;AACJ,CAAC;AAQDV,UAAU,CAACW,kBAAkB,GAAG,eAAeA,kBAAkB,CAAEC,WAAW,GAAG,IAAI,EAAE;EACrF,MAAM,IAAI,CAACT,qBAAqB,CAAE;AACpC;AACA;AACA,wCAAwCS,WAAW,GAAG,gBAAgB,GAAG,oBAAqB;AAC9F;AACA;AACA;AACA,GAAG,CAAC;AACJ,CAAC;AAAC,eAEaZ,UAAU;AAAA"}