"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("source-map-support/register");
var _lodash = _interopRequireDefault(require("lodash"));
var _path = _interopRequireDefault(require("path"));
var _support = require("@appium/support");
var _logger = _interopRequireDefault(require("../logger"));
var _teen_process = require("teen_process");
var _utils = require("../utils");
const extensions = {};
extensions.getLaunchDaemonsRoot = async function getLaunchDaemonsRoot() {
  const devRoot = await (0, _utils.getDeveloperRoot)();
  return _path.default.resolve(devRoot, 'Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/System/Library/LaunchDaemons');
};
extensions.backupKeychains = async function backupKeychains() {
  if (!(await _support.fs.exists(this.keychainPath))) {
    return false;
  }
  const backupPath = await _support.tempDir.path({
    prefix: `keychains_backup_${Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1)}`,
    suffix: '.zip'
  });
  const zipArgs = ['-r', backupPath, `${this.keychainPath}${_path.default.sep}`];
  _logger.default.debug(`Creating keychains backup with 'zip ${zipArgs.join(' ')}' command`);
  await (0, _teen_process.exec)('zip', zipArgs);
  if (_lodash.default.isString(this._keychainsBackupPath) && (await _support.fs.exists(this._keychainsBackupPath))) {
    await _support.fs.unlink(this._keychainsBackupPath);
  }
  this._keychainsBackupPath = backupPath;
  return true;
};
extensions.restoreKeychains = async function restoreKeychains(excludePatterns = []) {
  if (!_lodash.default.isString(this._keychainsBackupPath) || !(await _support.fs.exists(this._keychainsBackupPath))) {
    throw new Error(`The keychains backup archive does not exist. ` + `Are you sure it was created before?`);
  }
  if (_lodash.default.isString(excludePatterns)) {
    excludePatterns = excludePatterns.split(',').map(x => x.trim());
  }
  const isServerRunning = await this.isRunning();
  let plistPath;
  if (isServerRunning) {
    plistPath = _path.default.resolve(await this.getLaunchDaemonsRoot(), 'com.apple.securityd.plist');
    if (!(await _support.fs.exists(plistPath))) {
      throw new Error(`Cannot clear keychains because '${plistPath}' does not exist`);
    }
    await this.simctl.spawnProcess(['launchctl', 'unload', plistPath]);
  }
  try {
    await _support.fs.rimraf(this.keychainPath);
    await (0, _support.mkdirp)(this.keychainPath);
    const unzipArgs = ['-o', this._keychainsBackupPath, ..._lodash.default.flatMap(excludePatterns.map(x => ['-x', x])), '-d', '/'];
    _logger.default.debug(`Restoring keychains with 'unzip ${unzipArgs.join(' ')}' command`);
    await (0, _teen_process.exec)('unzip', unzipArgs);
    await _support.fs.unlink(this._keychainsBackupPath);
    this._keychainsBackupPath = null;
  } finally {
    if (isServerRunning && plistPath) {
      await this.simctl.spawnProcess(['launchctl', 'load', plistPath]);
    }
  }
  return true;
};
extensions.clearKeychains = async function clearKeychains() {
  const plistPath = _path.default.resolve(await this.getLaunchDaemonsRoot(), 'com.apple.securityd.plist');
  if (!(await _support.fs.exists(plistPath))) {
    throw new Error(`Cannot clear keychains because '${plistPath}' does not exist`);
  }
  await this.simctl.spawnProcess(['launchctl', 'unload', plistPath]);
  try {
    if (await _support.fs.exists(this.keychainPath)) {
      await _support.fs.rimraf(this.keychainPath);
      await (0, _support.mkdirp)(this.keychainPath);
    }
  } finally {
    await this.simctl.spawnProcess(['launchctl', 'load', plistPath]);
  }
};
var _default = extensions;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,