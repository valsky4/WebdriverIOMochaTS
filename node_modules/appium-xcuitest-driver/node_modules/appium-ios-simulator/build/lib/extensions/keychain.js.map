{"version":3,"file":"keychain.js","names":["extensions","getLaunchDaemonsRoot","devRoot","getDeveloperRoot","path","resolve","backupKeychains","fs","exists","keychainPath","backupPath","tempDir","prefix","Math","floor","random","toString","substring","suffix","zipArgs","sep","log","debug","join","exec","_","isString","_keychainsBackupPath","unlink","restoreKeychains","excludePatterns","Error","split","map","x","trim","isServerRunning","isRunning","plistPath","simctl","spawnProcess","rimraf","mkdirp","unzipArgs","flatMap","clearKeychains"],"sources":["../../../lib/extensions/keychain.js"],"sourcesContent":["import _ from 'lodash';\nimport path from 'path';\nimport { fs, mkdirp, tempDir } from '@appium/support';\nimport log from '../logger';\nimport { exec } from 'teen_process';\nimport { getDeveloperRoot } from '../utils';\n\nconst extensions = {};\n\n/**\n * Resolve full path to Simlator's LaunchDaemons root folder\n *\n * @returns {string} Full path to Simlator's LaunchDaemons root folder\n */\nextensions.getLaunchDaemonsRoot = async function getLaunchDaemonsRoot () {\n  const devRoot = await getDeveloperRoot();\n  return path.resolve(\n    devRoot,\n    'Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/System/Library/LaunchDaemons'\n  );\n};\n\n/**\n * Create the backup of keychains folder.\n * The previously created backup will be automatically\n * deleted if this method was called twice in a row without\n * `restoreKeychains` being invoked.\n *\n * @returns {boolean} True if the backup operation was successfull.\n */\nextensions.backupKeychains = async function backupKeychains () {\n  if (!await fs.exists(this.keychainPath)) {\n    return false;\n  }\n\n  const backupPath = await tempDir.path({\n    prefix: `keychains_backup_${Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1)}`,\n    suffix: '.zip',\n  });\n  const zipArgs = [\n    '-r', backupPath,\n    `${this.keychainPath}${path.sep}`\n  ];\n  log.debug(`Creating keychains backup with 'zip ${zipArgs.join(' ')}' command`);\n  await exec('zip', zipArgs);\n  if (_.isString(this._keychainsBackupPath) && await fs.exists(this._keychainsBackupPath)) {\n    await fs.unlink(this._keychainsBackupPath);\n  }\n  this._keychainsBackupPath = backupPath;\n  return true;\n};\n\n/**\n * Restore the previsouly created keychains backup.\n *\n * @param {?string|Array<string>} excludePatterns - The list\n * of file name patterns to be excluded from restore. The format\n * of each item should be the same as '-x' option format for\n * 'unzip' utility. This can also be a comma-separated string,\n * which is going be transformed into a list automatically,\n * for example: '*.db*,blabla.sqlite'\n * @returns {boolean} If the restore opration was successful.\n * @throws {Error} If there is no keychains backup available for restore.\n */\nextensions.restoreKeychains = async function restoreKeychains (excludePatterns = []) {\n  if (!_.isString(this._keychainsBackupPath) || !await fs.exists(this._keychainsBackupPath)) {\n    throw new Error(`The keychains backup archive does not exist. ` +\n                    `Are you sure it was created before?`);\n  }\n\n  if (_.isString(excludePatterns)) {\n    excludePatterns = excludePatterns.split(',').map((x) => x.trim());\n  }\n  const isServerRunning = await this.isRunning();\n  let plistPath;\n  if (isServerRunning) {\n    plistPath = path.resolve(await this.getLaunchDaemonsRoot(), 'com.apple.securityd.plist');\n    if (!await fs.exists(plistPath)) {\n      throw new Error(`Cannot clear keychains because '${plistPath}' does not exist`);\n    }\n    await this.simctl.spawnProcess(['launchctl', 'unload', plistPath]);\n  }\n  try {\n    await fs.rimraf(this.keychainPath);\n    await mkdirp(this.keychainPath);\n    const unzipArgs = [\n      '-o', this._keychainsBackupPath,\n      ...(_.flatMap(excludePatterns.map((x) => ['-x', x]))),\n      '-d', '/'\n    ];\n    log.debug(`Restoring keychains with 'unzip ${unzipArgs.join(' ')}' command`);\n    await exec('unzip', unzipArgs);\n    await fs.unlink(this._keychainsBackupPath);\n    this._keychainsBackupPath = null;\n  } finally {\n    if (isServerRunning && plistPath) {\n      await this.simctl.spawnProcess(['launchctl', 'load', plistPath]);\n    }\n  }\n  return true;\n};\n\n/**\n * Clears Keychains for the particular simulator in runtime (there is no need to stop it).\n *\n * @throws {Error} If keychain cleanup has failed.\n */\nextensions.clearKeychains = async function clearKeychains () {\n  const plistPath = path.resolve(await this.getLaunchDaemonsRoot(), 'com.apple.securityd.plist');\n  if (!await fs.exists(plistPath)) {\n    throw new Error(`Cannot clear keychains because '${plistPath}' does not exist`);\n  }\n  await this.simctl.spawnProcess(['launchctl', 'unload', plistPath]);\n  try {\n    if (await fs.exists(this.keychainPath)) {\n      await fs.rimraf(this.keychainPath);\n      await mkdirp(this.keychainPath);\n    }\n  } finally {\n    await this.simctl.spawnProcess(['launchctl', 'load', plistPath]);\n  }\n};\n\nexport default extensions;\n"],"mappings":"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"}