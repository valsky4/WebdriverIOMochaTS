"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("source-map-support/register");
var _logger = _interopRequireDefault(require("../logger"));
var _lodash = _interopRequireDefault(require("lodash"));
var _support = require("@appium/support");
var _teen_process = require("teen_process");
var _path = _interopRequireDefault(require("path"));
const STATUS = Object.freeze({
  UNSET: 'unset',
  NO: 'no',
  YES: 'yes',
  LIMITED: 'limited'
});
const WIX_SIM_UTILS = 'applesimutils';
const SERVICES = Object.freeze({
  calendar: 'kTCCServiceCalendar',
  camera: 'kTCCServiceCamera',
  contacts: 'kTCCServiceAddressBook',
  homekit: 'kTCCServiceWillow',
  microphone: 'kTCCServiceMicrophone',
  photos: 'kTCCServicePhotos',
  reminders: 'kTCCServiceReminders',
  medialibrary: 'kTCCServiceMediaLibrary',
  motion: 'kTCCServiceMotion',
  health: 'kTCCServiceMSO',
  siri: 'kTCCServiceSiri',
  speech: 'kTCCServiceSpeechRecognition'
});
function toInternalServiceName(serviceName) {
  if (_lodash.default.has(SERVICES, _lodash.default.toLower(serviceName))) {
    return SERVICES[_lodash.default.toLower(serviceName)];
  }
  throw new Error(`'${serviceName}' is unknown. Only the following service names are supported: ${JSON.stringify(_lodash.default.keys(SERVICES))}`);
}
function formatStatus(status) {
  return [STATUS.UNSET, STATUS.NO].includes(status) ? _lodash.default.toUpper(status) : status;
}
async function execSQLiteQuery(db, query) {
  _logger.default.debug(`Executing SQL query "${query}" on '${db}'`);
  try {
    return (await (0, _teen_process.exec)('sqlite3', ['-line', db, query])).stdout;
  } catch (err) {
    throw new Error(`Cannot execute SQLite query "${query}" to '${db}'. Original error: ${err.stderr}`);
  }
}
async function execWix(args) {
  try {
    await _support.fs.which(WIX_SIM_UTILS);
  } catch (e) {
    throw new Error(`${WIX_SIM_UTILS} binary has not been found in your PATH. ` + `Please install it ('brew tap wix/brew && brew install wix/brew/applesimutils') to ` + `be able to change application permissions`);
  }
  _logger.default.debug(`Executing: ${WIX_SIM_UTILS} ${_support.util.quote(args)}`);
  try {
    const {
      stdout
    } = await (0, _teen_process.exec)(WIX_SIM_UTILS, args);
    _logger.default.debug(`Command output: ${stdout}`);
    return stdout;
  } catch (e) {
    throw new Error(`Cannot execute "${WIX_SIM_UTILS} ${_support.util.quote(args)}". Original error: ${e.stderr || e.message}`);
  }
}
async function setAccess(udid, bundleId, permissionsMapping) {
  const permissionsArg = _lodash.default.toPairs(permissionsMapping).map(x => `${x[0]}=${formatStatus(x[1])}`).join(',');
  return await execWix(['--byId', udid, '--bundle', bundleId, '--setPermissions', permissionsArg]);
}
async function getAccess(bundleId, serviceName, simDataRoot) {
  const internalServiceName = toInternalServiceName(serviceName);
  const dbPath = _path.default.resolve(simDataRoot, 'Library', 'TCC', 'TCC.db');
  const getAccessStatus = async (statusPairs, statusKey) => {
    for (const [statusValue, status] of statusPairs) {
      const sql = `SELECT count(*) FROM 'access' ` + `WHERE client='${bundleId}' AND ${statusKey}=${statusValue} AND service='${internalServiceName}'`;
      const count = await execSQLiteQuery(dbPath, sql);
      if (parseInt(count.split('=')[1], 10) > 0) {
        return status;
      }
    }
    return STATUS.UNSET;
  };
  try {
    return await getAccessStatus([['0', STATUS.NO], ['2', STATUS.YES], ['3', STATUS.LIMITED]], 'auth_value');
  } catch {
    return await getAccessStatus([['0', STATUS.NO], ['1', STATUS.YES]], 'allowed');
  }
}
const extensions = {};
extensions.setPermission = async function setPermission(bundleId, permission, value) {
  await this.setPermissions(bundleId, {
    [permission]: value
  });
};
extensions.setPermissions = async function setPermissions(bundleId, permissionsMapping) {
  _logger.default.debug(`Setting access for '${bundleId}': ${JSON.stringify(permissionsMapping, null, 2)}`);
  await setAccess(this.udid, bundleId, permissionsMapping);
};
extensions.getPermission = async function getPermission(bundleId, serviceName) {
  const result = await getAccess(bundleId, serviceName, this.getDir());
  _logger.default.debug(`Got ${serviceName} access status for '${bundleId}': ${result}`);
  return result;
};
var _default = extensions;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,