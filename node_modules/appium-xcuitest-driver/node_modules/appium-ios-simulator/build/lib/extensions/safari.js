"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("source-map-support/register");
var _lodash = _interopRequireDefault(require("lodash"));
var _path = _interopRequireDefault(require("path"));
var _support = require("@appium/support");
var _logger = _interopRequireDefault(require("../logger"));
var _bluebird = _interopRequireDefault(require("bluebird"));
var _utils = require("../utils");
const DATA_FILES = [['Caches', '*'], ['Image Cache', '*'], ['WebKit', _utils.MOBILE_SAFARI_BUNDLE_ID, '*'], ['WebKit', 'GeolocationSites.plist'], ['WebKit', 'LocalStorage', '*.*'], ['Safari', '*'], ['Cookies', '*.binarycookies'], ['..', 'tmp', _utils.MOBILE_SAFARI_BUNDLE_ID, '*']];
const extensions = {};
extensions.openUrl = async function openUrl(url) {
  if (!(await this.isRunning())) {
    throw new Error(`Tried to open '${url}', but Simulator is not in Booted state`);
  }
  const timer = new _support.timing.Timer().start();
  try {
    await this.launchApp(_utils.MOBILE_SAFARI_BUNDLE_ID, {
      wait: true,
      timeoutMs: _utils.SAFARI_STARTUP_TIMEOUT_MS
    });
    await this.simctl.openUrl(url);
  } catch (err) {
    throw new Error(`Safari could not open '${url}' after ${timer.getDuration().asSeconds.toFixed(3)}s. ` + `Original error: ${err.stderr || err.message}`);
  }
  _logger.default.debug(`Safari successfully opened '${url}' in ${timer.getDuration().asSeconds.toFixed(3)}s`);
};
extensions.scrubSafari = async function scrubSafari(keepPrefs = true) {
  try {
    await this.terminateApp(_utils.MOBILE_SAFARI_BUNDLE_ID);
  } catch (ign) {}
  _logger.default.debug('Scrubbing Safari data files');
  const safariData = await this.simctl.getAppContainer(_utils.MOBILE_SAFARI_BUNDLE_ID, 'data');
  const libraryDir = _path.default.resolve(safariData, 'Library');
  const deletePromises = DATA_FILES.map(p => _support.fs.rimraf(_path.default.join(libraryDir, ...p)));
  if (!keepPrefs) {
    deletePromises.push(_support.fs.rimraf(_path.default.join(libraryDir, 'Preferences', '*.plist')));
  }
  await _bluebird.default.all(deletePromises);
};
extensions.updateSafariSettings = async function updateSafariSettings(updates) {
  if (_lodash.default.isEmpty(updates)) {
    return false;
  }
  const containerRoot = await this.simctl.getAppContainer(_utils.MOBILE_SAFARI_BUNDLE_ID, 'data');
  const plistPath = _path.default.join(containerRoot, 'Library', 'Preferences', 'com.apple.mobilesafari.plist');
  return await this.updateSettings(plistPath, updates);
};
var _default = extensions;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,