"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("source-map-support/register");
var _lodash = _interopRequireDefault(require("lodash"));
var _defaultsUtils = require("../defaults-utils");
var _bluebird = _interopRequireDefault(require("bluebird"));
const extensions = {};
extensions.setReduceMotion = async function setReduceMotion(reduceMotion) {
  return await this.updateSettings('com.apple.Accessibility', {
    ReduceMotionEnabled: Number(reduceMotion)
  });
};
extensions.setReduceTransparency = async function setReduceTransparency(reduceTransparency) {
  return await this.updateSettings('com.apple.Accessibility', {
    EnhancedBackgroundContrastEnabled: Number(reduceTransparency)
  });
};
extensions.updateSettings = async function updateSettings(domain, updates) {
  if (_lodash.default.isEmpty(updates)) {
    return false;
  }
  const argChunks = (0, _defaultsUtils.generateDefaultsCommandArgs)(updates);
  await _bluebird.default.all(argChunks.map(args => this.simctl.spawnProcess(['defaults', 'write', domain, ...args])));
  return true;
};
extensions.setAppearance = async function setAppearance() {
  throw new Error(`Xcode SDK '${this.xcodeVersion}' is too old to set UI appearance`);
};
extensions.getAppearance = async function getAppearance() {
  throw new Error(`Xcode SDK '${this.xcodeVersion}' is too old to get UI appearance`);
};
extensions.configureLocalization = async function configureLocalization() {
  throw new Error(`Xcode SDK '${this.xcodeVersion}' is too old to configure the Simulator locale`);
};
var _default = extensions;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJleHRlbnNpb25zIiwic2V0UmVkdWNlTW90aW9uIiwicmVkdWNlTW90aW9uIiwidXBkYXRlU2V0dGluZ3MiLCJSZWR1Y2VNb3Rpb25FbmFibGVkIiwiTnVtYmVyIiwic2V0UmVkdWNlVHJhbnNwYXJlbmN5IiwicmVkdWNlVHJhbnNwYXJlbmN5IiwiRW5oYW5jZWRCYWNrZ3JvdW5kQ29udHJhc3RFbmFibGVkIiwiZG9tYWluIiwidXBkYXRlcyIsIl8iLCJpc0VtcHR5IiwiYXJnQ2h1bmtzIiwiZ2VuZXJhdGVEZWZhdWx0c0NvbW1hbmRBcmdzIiwiQiIsImFsbCIsIm1hcCIsImFyZ3MiLCJzaW1jdGwiLCJzcGF3blByb2Nlc3MiLCJzZXRBcHBlYXJhbmNlIiwiRXJyb3IiLCJ4Y29kZVZlcnNpb24iLCJnZXRBcHBlYXJhbmNlIiwiY29uZmlndXJlTG9jYWxpemF0aW9uIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vbGliL2V4dGVuc2lvbnMvc2V0dGluZ3MuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IGdlbmVyYXRlRGVmYXVsdHNDb21tYW5kQXJncyB9IGZyb20gJy4uL2RlZmF1bHRzLXV0aWxzJztcbmltcG9ydCBCIGZyb20gJ2JsdWViaXJkJztcblxuY29uc3QgZXh0ZW5zaW9ucyA9IHt9O1xuXG4vKipcbiAqIFVwZGF0ZXMgUmVkdWNlIE1vdGlvbiBzZXR0aW5nIHN0YXRlLlxuICpcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gcmVkdWNlTW90aW9uIFdoZXRoZXIgdG8gZW5hYmxlIG9yIGRpc2FibGUgdGhlIHNldHRpbmcuXG4gKi9cbmV4dGVuc2lvbnMuc2V0UmVkdWNlTW90aW9uID0gYXN5bmMgZnVuY3Rpb24gc2V0UmVkdWNlTW90aW9uIChyZWR1Y2VNb3Rpb24pIHtcbiAgcmV0dXJuIGF3YWl0IHRoaXMudXBkYXRlU2V0dGluZ3MoJ2NvbS5hcHBsZS5BY2Nlc3NpYmlsaXR5Jywge1xuICAgIFJlZHVjZU1vdGlvbkVuYWJsZWQ6IE51bWJlcihyZWR1Y2VNb3Rpb24pXG4gIH0pO1xufTtcblxuLyoqXG4gKiBVcGRhdGVzIFJlZHVjZSBUcmFuc3BhcmVuY3kgc2V0dGluZyBzdGF0ZS5cbiAqXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHJlZHVjZVRyYW5zcGFyZW5jeSBXaGV0aGVyIHRvIGVuYWJsZSBvciBkaXNhYmxlIHRoZSBzZXR0aW5nLlxuICovXG5leHRlbnNpb25zLnNldFJlZHVjZVRyYW5zcGFyZW5jeSA9IGFzeW5jIGZ1bmN0aW9uIHNldFJlZHVjZVRyYW5zcGFyZW5jeSAocmVkdWNlVHJhbnNwYXJlbmN5KSB7XG4gIHJldHVybiBhd2FpdCB0aGlzLnVwZGF0ZVNldHRpbmdzKCdjb20uYXBwbGUuQWNjZXNzaWJpbGl0eScsIHtcbiAgICBFbmhhbmNlZEJhY2tncm91bmRDb250cmFzdEVuYWJsZWQ6IE51bWJlcihyZWR1Y2VUcmFuc3BhcmVuY3kpXG4gIH0pO1xufTtcblxuLyoqXG4gKiBBbGxvd3MgdG8gdXBkYXRlIFNpbXVsYXRvciBwcmVmZXJlbmNlcyBpbiBydW50aW1lLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBkb21haW4gVGhlIG5hbWUgb2YgcHJlZmVyZW5jZXMgZG9tYWluIHRvIGJlIHVwZGF0ZWQsXG4gKiBmb3IgZXhhbXBsZSwgJ2NvbS5hcHBsZS5QcmVmZXJlbmNlcycgb3IgJ2NvbS5hcHBsZS5BY2Nlc3NpYmlsaXR5JyBvclxuICogZnVsbCBwYXRoIHRvIGEgcGxpc3QgZmlsZSBvbiB0aGUgbG9jYWwgZmlsZSBzeXN0ZW0uXG4gKiBAcGFyYW0ge29iamVjdH0gdXBkYXRlcyBNYXBwaW5nIG9mIGtleXMvdmFsdWVzIHRvIGJlIHVwZGF0ZWRcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHNldHRpbmdzIHdlcmUgYWN0dWFsbHkgY2hhbmdlZFxuICovXG5leHRlbnNpb25zLnVwZGF0ZVNldHRpbmdzID0gYXN5bmMgZnVuY3Rpb24gdXBkYXRlU2V0dGluZ3MgKGRvbWFpbiwgdXBkYXRlcykge1xuICBpZiAoXy5pc0VtcHR5KHVwZGF0ZXMpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgY29uc3QgYXJnQ2h1bmtzID0gZ2VuZXJhdGVEZWZhdWx0c0NvbW1hbmRBcmdzKHVwZGF0ZXMpO1xuICBhd2FpdCBCLmFsbChhcmdDaHVua3MubWFwKChhcmdzKSA9PiB0aGlzLnNpbWN0bC5zcGF3blByb2Nlc3MoW1xuICAgICdkZWZhdWx0cycsICd3cml0ZScsIGRvbWFpbiwgLi4uYXJnc1xuICBdKSkpO1xuICByZXR1cm4gdHJ1ZTtcbn07XG5cbi8qKlxuICogU2V0cyBVSSBhcHBlYXJhbmNlIHN0eWxlLlxuICogVGhpcyBmdW5jdGlvbiBjYW4gb25seSBiZSBjYWxsZWQgb24gYSBib290ZWQgc2ltdWxhdG9yLlxuICpcbiAqIEBzaW5jZSBYY29kZSBTREsgMTEuNFxuICovXG5leHRlbnNpb25zLnNldEFwcGVhcmFuY2UgPSBhc3luYyBmdW5jdGlvbiBzZXRBcHBlYXJhbmNlICgvKiB2YWx1ZSAqLykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlcXVpcmUtYXdhaXRcbiAgdGhyb3cgbmV3IEVycm9yKGBYY29kZSBTREsgJyR7dGhpcy54Y29kZVZlcnNpb259JyBpcyB0b28gb2xkIHRvIHNldCBVSSBhcHBlYXJhbmNlYCk7XG59O1xuXG4vKipcbiAqIEdldHMgdGhlIGN1cnJlbnQgVUkgYXBwZWFyYW5jZSBzdHlsZVxuICogVGhpcyBmdW5jdGlvbiBjYW4gb25seSBiZSBjYWxsZWQgb24gYSBib290ZWQgc2ltdWxhdG9yLlxuICpcbiAqIEBzaW5jZSBYY29kZSBTREsgMTEuNFxuICovXG5leHRlbnNpb25zLmdldEFwcGVhcmFuY2UgPSBhc3luYyBmdW5jdGlvbiBnZXRBcHBlYXJhbmNlICgpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSByZXF1aXJlLWF3YWl0XG4gIHRocm93IG5ldyBFcnJvcihgWGNvZGUgU0RLICcke3RoaXMueGNvZGVWZXJzaW9ufScgaXMgdG9vIG9sZCB0byBnZXQgVUkgYXBwZWFyYW5jZWApO1xufTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlcXVpcmUtYXdhaXRcbmV4dGVuc2lvbnMuY29uZmlndXJlTG9jYWxpemF0aW9uID0gYXN5bmMgZnVuY3Rpb24gY29uZmlndXJlTG9jYWxpemF0aW9uICgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKGBYY29kZSBTREsgJyR7dGhpcy54Y29kZVZlcnNpb259JyBpcyB0b28gb2xkIHRvIGNvbmZpZ3VyZSB0aGUgU2ltdWxhdG9yIGxvY2FsZWApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZXh0ZW5zaW9ucztcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFFQSxNQUFNQSxVQUFVLEdBQUcsQ0FBQyxDQUFDO0FBT3JCQSxVQUFVLENBQUNDLGVBQWUsR0FBRyxlQUFlQSxlQUFlLENBQUVDLFlBQVksRUFBRTtFQUN6RSxPQUFPLE1BQU0sSUFBSSxDQUFDQyxjQUFjLENBQUMseUJBQXlCLEVBQUU7SUFDMURDLG1CQUFtQixFQUFFQyxNQUFNLENBQUNILFlBQVk7RUFDMUMsQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQU9ERixVQUFVLENBQUNNLHFCQUFxQixHQUFHLGVBQWVBLHFCQUFxQixDQUFFQyxrQkFBa0IsRUFBRTtFQUMzRixPQUFPLE1BQU0sSUFBSSxDQUFDSixjQUFjLENBQUMseUJBQXlCLEVBQUU7SUFDMURLLGlDQUFpQyxFQUFFSCxNQUFNLENBQUNFLGtCQUFrQjtFQUM5RCxDQUFDLENBQUM7QUFDSixDQUFDO0FBV0RQLFVBQVUsQ0FBQ0csY0FBYyxHQUFHLGVBQWVBLGNBQWMsQ0FBRU0sTUFBTSxFQUFFQyxPQUFPLEVBQUU7RUFDMUUsSUFBSUMsZUFBQyxDQUFDQyxPQUFPLENBQUNGLE9BQU8sQ0FBQyxFQUFFO0lBQ3RCLE9BQU8sS0FBSztFQUNkO0VBRUEsTUFBTUcsU0FBUyxHQUFHLElBQUFDLDBDQUEyQixFQUFDSixPQUFPLENBQUM7RUFDdEQsTUFBTUssaUJBQUMsQ0FBQ0MsR0FBRyxDQUFDSCxTQUFTLENBQUNJLEdBQUcsQ0FBRUMsSUFBSSxJQUFLLElBQUksQ0FBQ0MsTUFBTSxDQUFDQyxZQUFZLENBQUMsQ0FDM0QsVUFBVSxFQUFFLE9BQU8sRUFBRVgsTUFBTSxFQUFFLEdBQUdTLElBQUksQ0FDckMsQ0FBQyxDQUFDLENBQUM7RUFDSixPQUFPLElBQUk7QUFDYixDQUFDO0FBUURsQixVQUFVLENBQUNxQixhQUFhLEdBQUcsZUFBZUEsYUFBYSxHQUFlO0VBQ3BFLE1BQU0sSUFBSUMsS0FBSyxDQUFFLGNBQWEsSUFBSSxDQUFDQyxZQUFhLG1DQUFrQyxDQUFDO0FBQ3JGLENBQUM7QUFRRHZCLFVBQVUsQ0FBQ3dCLGFBQWEsR0FBRyxlQUFlQSxhQUFhLEdBQUk7RUFDekQsTUFBTSxJQUFJRixLQUFLLENBQUUsY0FBYSxJQUFJLENBQUNDLFlBQWEsbUNBQWtDLENBQUM7QUFDckYsQ0FBQztBQUdEdkIsVUFBVSxDQUFDeUIscUJBQXFCLEdBQUcsZUFBZUEscUJBQXFCLEdBQUk7RUFDekUsTUFBTSxJQUFJSCxLQUFLLENBQUUsY0FBYSxJQUFJLENBQUNDLFlBQWEsZ0RBQStDLENBQUM7QUFDbEcsQ0FBQztBQUFDLGVBRWF2QixVQUFVO0FBQUEifQ==