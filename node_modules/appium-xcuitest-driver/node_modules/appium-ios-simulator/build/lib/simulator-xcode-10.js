"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("source-map-support/register");
var _simulatorXcode = _interopRequireDefault(require("./simulator-xcode-9.3"));
var _support = require("@appium/support");
var _asyncbox = require("asyncbox");
var _utils = require("./utils");
var _logger = _interopRequireDefault(require("./logger"));
class SimulatorXcode10 extends _simulatorXcode.default {
  constructor(udid, xcodeVersion) {
    super(udid, xcodeVersion);
  }
  async isAppInstalled(bundleId) {
    try {
      const appContainer = await this.simctl.getAppContainer(bundleId);
      if (!appContainer.endsWith('.app')) {
        return false;
      }
      return await _support.fs.exists(appContainer);
    } catch (err) {
      try {
        const info = await this.simctl.appInfo(bundleId);
        return info.includes('ApplicationType');
      } catch (ign) {}
    }
    return false;
  }
  async openUrl(url) {
    if (!(await this.isRunning())) {
      throw new Error(`Tried to open '${url}', but Simulator is not in Booted state`);
    }
    const timer = new _support.timing.Timer().start();
    await this.simctl.openUrl(url);
    let psError;
    try {
      await (0, _asyncbox.waitForCondition)(async () => {
        let procList = [];
        try {
          procList = await this.ps();
          psError = null;
        } catch (e) {
          _logger.default.debug(e.message);
          psError = e;
        }
        return procList.some(({
          name
        }) => name === _utils.MOBILE_SAFARI_BUNDLE_ID);
      }, {
        waitMs: _utils.SAFARI_STARTUP_TIMEOUT_MS,
        intervalMs: 500
      });
    } catch (err) {
      const secondsElapsed = timer.getDuration().asSeconds;
      if (psError) {
        _logger.default.warn(`Mobile Safari process existence cannot be verified after ${secondsElapsed.toFixed(3)}s. ` + `Original error: ${psError.message}`);
        _logger.default.warn('Continuing anyway');
      } else {
        throw new Error(`Mobile Safari cannot open '${url}' after ${secondsElapsed.toFixed(3)}s. ` + `Its process ${_utils.MOBILE_SAFARI_BUNDLE_ID} does not exist in the list of Simulator processes`);
      }
    }
    _logger.default.debug(`Safari successfully opened '${url}' in ${timer.getDuration().asSeconds.toFixed(3)}s`);
  }
}
var _default = SimulatorXcode10;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTaW11bGF0b3JYY29kZTEwIiwiU2ltdWxhdG9yWGNvZGU5MyIsImNvbnN0cnVjdG9yIiwidWRpZCIsInhjb2RlVmVyc2lvbiIsImlzQXBwSW5zdGFsbGVkIiwiYnVuZGxlSWQiLCJhcHBDb250YWluZXIiLCJzaW1jdGwiLCJnZXRBcHBDb250YWluZXIiLCJlbmRzV2l0aCIsImZzIiwiZXhpc3RzIiwiZXJyIiwiaW5mbyIsImFwcEluZm8iLCJpbmNsdWRlcyIsImlnbiIsIm9wZW5VcmwiLCJ1cmwiLCJpc1J1bm5pbmciLCJFcnJvciIsInRpbWVyIiwidGltaW5nIiwiVGltZXIiLCJzdGFydCIsInBzRXJyb3IiLCJ3YWl0Rm9yQ29uZGl0aW9uIiwicHJvY0xpc3QiLCJwcyIsImUiLCJsb2ciLCJkZWJ1ZyIsIm1lc3NhZ2UiLCJzb21lIiwibmFtZSIsIk1PQklMRV9TQUZBUklfQlVORExFX0lEIiwid2FpdE1zIiwiU0FGQVJJX1NUQVJUVVBfVElNRU9VVF9NUyIsImludGVydmFsTXMiLCJzZWNvbmRzRWxhcHNlZCIsImdldER1cmF0aW9uIiwiYXNTZWNvbmRzIiwid2FybiIsInRvRml4ZWQiXSwic291cmNlcyI6WyIuLi8uLi9saWIvc2ltdWxhdG9yLXhjb2RlLTEwLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBTaW11bGF0b3JYY29kZTkzIGZyb20gJy4vc2ltdWxhdG9yLXhjb2RlLTkuMyc7XG5pbXBvcnQgeyBmcywgdGltaW5nIH0gZnJvbSAnQGFwcGl1bS9zdXBwb3J0JztcbmltcG9ydCB7IHdhaXRGb3JDb25kaXRpb24gfSBmcm9tICdhc3luY2JveCc7XG5pbXBvcnQgeyBNT0JJTEVfU0FGQVJJX0JVTkRMRV9JRCwgU0FGQVJJX1NUQVJUVVBfVElNRU9VVF9NUyB9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IGxvZyBmcm9tICcuL2xvZ2dlcic7XG5cblxuY2xhc3MgU2ltdWxhdG9yWGNvZGUxMCBleHRlbmRzIFNpbXVsYXRvclhjb2RlOTMge1xuICBjb25zdHJ1Y3RvciAodWRpZCwgeGNvZGVWZXJzaW9uKSB7XG4gICAgc3VwZXIodWRpZCwgeGNvZGVWZXJzaW9uKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBWZXJpZnkgd2hldGhlciB0aGUgcGFydGljdWxhciBhcHBsaWNhdGlvbiBpcyBpbnN0YWxsZWQgb24gU2ltdWxhdG9yLlxuICAgKiBAb3ZlcnJpZGVcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGJ1bmRsZUlkIC0gVGhlIGJ1bmRsZSBpZCBvZiB0aGUgYXBwbGljYXRpb24gdG8gYmUgY2hlY2tlZC5cbiAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgZ2l2ZW4gYXBwbGljYXRpb24gaXMgaW5zdGFsbGVkLlxuICAgKi9cbiAgYXN5bmMgaXNBcHBJbnN0YWxsZWQgKGJ1bmRsZUlkKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGFwcENvbnRhaW5lciA9IGF3YWl0IHRoaXMuc2ltY3RsLmdldEFwcENvbnRhaW5lcihidW5kbGVJZCk7XG4gICAgICBpZiAoIWFwcENvbnRhaW5lci5lbmRzV2l0aCgnLmFwcCcpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhd2FpdCBmcy5leGlzdHMoYXBwQ29udGFpbmVyKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIC8vIGdldF9hcHBfY29udGFpbmVyIHN1YmNvbW1hbmQgZmFpbHMgZm9yIHN5c3RlbSBhcHBsaWNhdGlvbnMsXG4gICAgICAvLyBzbyB3ZSB0cnkgdGhlIGhpZGRlbiBhcHBpbmZvIHN1YmNvbW1hbmQsIHdoaWNoIHByaW50cyBjb3JyZWN0IGluZm8gZm9yXG4gICAgICAvLyBzeXN0ZW0vaGlkZGVuIGFwcHNcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGluZm8gPSBhd2FpdCB0aGlzLnNpbWN0bC5hcHBJbmZvKGJ1bmRsZUlkKTtcbiAgICAgICAgcmV0dXJuIGluZm8uaW5jbHVkZXMoJ0FwcGxpY2F0aW9uVHlwZScpO1xuICAgICAgfSBjYXRjaCAoaWduKSB7fVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBhc3luYyBvcGVuVXJsICh1cmwpIHtcbiAgICBpZiAoIWF3YWl0IHRoaXMuaXNSdW5uaW5nKCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgVHJpZWQgdG8gb3BlbiAnJHt1cmx9JywgYnV0IFNpbXVsYXRvciBpcyBub3QgaW4gQm9vdGVkIHN0YXRlYCk7XG4gICAgfVxuICAgIGNvbnN0IHRpbWVyID0gbmV3IHRpbWluZy5UaW1lcigpLnN0YXJ0KCk7XG4gICAgYXdhaXQgdGhpcy5zaW1jdGwub3BlblVybCh1cmwpO1xuICAgIGxldCBwc0Vycm9yO1xuICAgIHRyeSB7XG4gICAgICBhd2FpdCB3YWl0Rm9yQ29uZGl0aW9uKGFzeW5jICgpID0+IHtcbiAgICAgICAgbGV0IHByb2NMaXN0ID0gW107XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcHJvY0xpc3QgPSBhd2FpdCB0aGlzLnBzKCk7XG4gICAgICAgICAgcHNFcnJvciA9IG51bGw7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBsb2cuZGVidWcoZS5tZXNzYWdlKTtcbiAgICAgICAgICBwc0Vycm9yID0gZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcHJvY0xpc3Quc29tZSgoe25hbWV9KSA9PiBuYW1lID09PSBNT0JJTEVfU0FGQVJJX0JVTkRMRV9JRCk7XG4gICAgICB9LCB7XG4gICAgICAgIHdhaXRNczogU0FGQVJJX1NUQVJUVVBfVElNRU9VVF9NUyxcbiAgICAgICAgaW50ZXJ2YWxNczogNTAwLFxuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBjb25zdCBzZWNvbmRzRWxhcHNlZCA9IHRpbWVyLmdldER1cmF0aW9uKCkuYXNTZWNvbmRzO1xuICAgICAgaWYgKHBzRXJyb3IpIHtcbiAgICAgICAgbG9nLndhcm4oYE1vYmlsZSBTYWZhcmkgcHJvY2VzcyBleGlzdGVuY2UgY2Fubm90IGJlIHZlcmlmaWVkIGFmdGVyICR7c2Vjb25kc0VsYXBzZWQudG9GaXhlZCgzKX1zLiBgICtcbiAgICAgICAgICBgT3JpZ2luYWwgZXJyb3I6ICR7cHNFcnJvci5tZXNzYWdlfWApO1xuICAgICAgICBsb2cud2FybignQ29udGludWluZyBhbnl3YXknKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgTW9iaWxlIFNhZmFyaSBjYW5ub3Qgb3BlbiAnJHt1cmx9JyBhZnRlciAke3NlY29uZHNFbGFwc2VkLnRvRml4ZWQoMyl9cy4gYCArXG4gICAgICAgICAgYEl0cyBwcm9jZXNzICR7TU9CSUxFX1NBRkFSSV9CVU5ETEVfSUR9IGRvZXMgbm90IGV4aXN0IGluIHRoZSBsaXN0IG9mIFNpbXVsYXRvciBwcm9jZXNzZXNgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgbG9nLmRlYnVnKGBTYWZhcmkgc3VjY2Vzc2Z1bGx5IG9wZW5lZCAnJHt1cmx9JyBpbiAke3RpbWVyLmdldER1cmF0aW9uKCkuYXNTZWNvbmRzLnRvRml4ZWQoMyl9c2ApO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFNpbXVsYXRvclhjb2RlMTA7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBLE1BQU1BLGdCQUFnQixTQUFTQyx1QkFBZ0IsQ0FBQztFQUM5Q0MsV0FBVyxDQUFFQyxJQUFJLEVBQUVDLFlBQVksRUFBRTtJQUMvQixLQUFLLENBQUNELElBQUksRUFBRUMsWUFBWSxDQUFDO0VBQzNCO0VBU0EsTUFBTUMsY0FBYyxDQUFFQyxRQUFRLEVBQUU7SUFDOUIsSUFBSTtNQUNGLE1BQU1DLFlBQVksR0FBRyxNQUFNLElBQUksQ0FBQ0MsTUFBTSxDQUFDQyxlQUFlLENBQUNILFFBQVEsQ0FBQztNQUNoRSxJQUFJLENBQUNDLFlBQVksQ0FBQ0csUUFBUSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1FBQ2xDLE9BQU8sS0FBSztNQUNkO01BQ0EsT0FBTyxNQUFNQyxXQUFFLENBQUNDLE1BQU0sQ0FBQ0wsWUFBWSxDQUFDO0lBQ3RDLENBQUMsQ0FBQyxPQUFPTSxHQUFHLEVBQUU7TUFJWixJQUFJO1FBQ0YsTUFBTUMsSUFBSSxHQUFHLE1BQU0sSUFBSSxDQUFDTixNQUFNLENBQUNPLE9BQU8sQ0FBQ1QsUUFBUSxDQUFDO1FBQ2hELE9BQU9RLElBQUksQ0FBQ0UsUUFBUSxDQUFDLGlCQUFpQixDQUFDO01BQ3pDLENBQUMsQ0FBQyxPQUFPQyxHQUFHLEVBQUUsQ0FBQztJQUNqQjtJQUNBLE9BQU8sS0FBSztFQUNkO0VBS0EsTUFBTUMsT0FBTyxDQUFFQyxHQUFHLEVBQUU7SUFDbEIsSUFBSSxFQUFDLE1BQU0sSUFBSSxDQUFDQyxTQUFTLEVBQUUsR0FBRTtNQUMzQixNQUFNLElBQUlDLEtBQUssQ0FBRSxrQkFBaUJGLEdBQUkseUNBQXdDLENBQUM7SUFDakY7SUFDQSxNQUFNRyxLQUFLLEdBQUcsSUFBSUMsZUFBTSxDQUFDQyxLQUFLLEVBQUUsQ0FBQ0MsS0FBSyxFQUFFO0lBQ3hDLE1BQU0sSUFBSSxDQUFDakIsTUFBTSxDQUFDVSxPQUFPLENBQUNDLEdBQUcsQ0FBQztJQUM5QixJQUFJTyxPQUFPO0lBQ1gsSUFBSTtNQUNGLE1BQU0sSUFBQUMsMEJBQWdCLEVBQUMsWUFBWTtRQUNqQyxJQUFJQyxRQUFRLEdBQUcsRUFBRTtRQUNqQixJQUFJO1VBQ0ZBLFFBQVEsR0FBRyxNQUFNLElBQUksQ0FBQ0MsRUFBRSxFQUFFO1VBQzFCSCxPQUFPLEdBQUcsSUFBSTtRQUNoQixDQUFDLENBQUMsT0FBT0ksQ0FBQyxFQUFFO1VBQ1ZDLGVBQUcsQ0FBQ0MsS0FBSyxDQUFDRixDQUFDLENBQUNHLE9BQU8sQ0FBQztVQUNwQlAsT0FBTyxHQUFHSSxDQUFDO1FBQ2I7UUFDQSxPQUFPRixRQUFRLENBQUNNLElBQUksQ0FBQyxDQUFDO1VBQUNDO1FBQUksQ0FBQyxLQUFLQSxJQUFJLEtBQUtDLDhCQUF1QixDQUFDO01BQ3BFLENBQUMsRUFBRTtRQUNEQyxNQUFNLEVBQUVDLGdDQUF5QjtRQUNqQ0MsVUFBVSxFQUFFO01BQ2QsQ0FBQyxDQUFDO0lBQ0osQ0FBQyxDQUFDLE9BQU8xQixHQUFHLEVBQUU7TUFDWixNQUFNMkIsY0FBYyxHQUFHbEIsS0FBSyxDQUFDbUIsV0FBVyxFQUFFLENBQUNDLFNBQVM7TUFDcEQsSUFBSWhCLE9BQU8sRUFBRTtRQUNYSyxlQUFHLENBQUNZLElBQUksQ0FBRSw0REFBMkRILGNBQWMsQ0FBQ0ksT0FBTyxDQUFDLENBQUMsQ0FBRSxLQUFJLEdBQ2hHLG1CQUFrQmxCLE9BQU8sQ0FBQ08sT0FBUSxFQUFDLENBQUM7UUFDdkNGLGVBQUcsQ0FBQ1ksSUFBSSxDQUFDLG1CQUFtQixDQUFDO01BQy9CLENBQUMsTUFBTTtRQUNMLE1BQU0sSUFBSXRCLEtBQUssQ0FBRSw4QkFBNkJGLEdBQUksV0FBVXFCLGNBQWMsQ0FBQ0ksT0FBTyxDQUFDLENBQUMsQ0FBRSxLQUFJLEdBQ3ZGLGVBQWNSLDhCQUF3QixvREFBbUQsQ0FBQztNQUMvRjtJQUNGO0lBQ0FMLGVBQUcsQ0FBQ0MsS0FBSyxDQUFFLCtCQUE4QmIsR0FBSSxRQUFPRyxLQUFLLENBQUNtQixXQUFXLEVBQUUsQ0FBQ0MsU0FBUyxDQUFDRSxPQUFPLENBQUMsQ0FBQyxDQUFFLEdBQUUsQ0FBQztFQUNsRztBQUNGO0FBQUMsZUFFYzVDLGdCQUFnQjtBQUFBIn0=