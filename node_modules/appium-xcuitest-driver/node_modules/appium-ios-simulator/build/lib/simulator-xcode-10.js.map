{"version":3,"file":"simulator-xcode-10.js","names":["SimulatorXcode10","SimulatorXcode93","constructor","udid","xcodeVersion","isAppInstalled","bundleId","appContainer","simctl","getAppContainer","endsWith","fs","exists","err","info","appInfo","includes","ign","openUrl","url","isRunning","Error","timer","timing","Timer","start","psError","waitForCondition","procList","ps","e","log","debug","message","some","name","MOBILE_SAFARI_BUNDLE_ID","waitMs","SAFARI_STARTUP_TIMEOUT_MS","intervalMs","secondsElapsed","getDuration","asSeconds","warn","toFixed"],"sources":["../../lib/simulator-xcode-10.js"],"sourcesContent":["import SimulatorXcode93 from './simulator-xcode-9.3';\nimport { fs, timing } from '@appium/support';\nimport { waitForCondition } from 'asyncbox';\nimport { MOBILE_SAFARI_BUNDLE_ID, SAFARI_STARTUP_TIMEOUT_MS } from './utils';\nimport log from './logger';\n\n\nclass SimulatorXcode10 extends SimulatorXcode93 {\n  constructor (udid, xcodeVersion) {\n    super(udid, xcodeVersion);\n  }\n\n  /**\n   * Verify whether the particular application is installed on Simulator.\n   * @override\n   *\n   * @param {string} bundleId - The bundle id of the application to be checked.\n   * @return {boolean} True if the given application is installed.\n   */\n  async isAppInstalled (bundleId) {\n    try {\n      const appContainer = await this.simctl.getAppContainer(bundleId);\n      if (!appContainer.endsWith('.app')) {\n        return false;\n      }\n      return await fs.exists(appContainer);\n    } catch (err) {\n      // get_app_container subcommand fails for system applications,\n      // so we try the hidden appinfo subcommand, which prints correct info for\n      // system/hidden apps\n      try {\n        const info = await this.simctl.appInfo(bundleId);\n        return info.includes('ApplicationType');\n      } catch (ign) {}\n    }\n    return false;\n  }\n\n  /**\n   * @override\n   */\n  async openUrl (url) {\n    if (!await this.isRunning()) {\n      throw new Error(`Tried to open '${url}', but Simulator is not in Booted state`);\n    }\n    const timer = new timing.Timer().start();\n    await this.simctl.openUrl(url);\n    let psError;\n    try {\n      await waitForCondition(async () => {\n        let procList = [];\n        try {\n          procList = await this.ps();\n          psError = null;\n        } catch (e) {\n          log.debug(e.message);\n          psError = e;\n        }\n        return procList.some(({name}) => name === MOBILE_SAFARI_BUNDLE_ID);\n      }, {\n        waitMs: SAFARI_STARTUP_TIMEOUT_MS,\n        intervalMs: 500,\n      });\n    } catch (err) {\n      const secondsElapsed = timer.getDuration().asSeconds;\n      if (psError) {\n        log.warn(`Mobile Safari process existence cannot be verified after ${secondsElapsed.toFixed(3)}s. ` +\n          `Original error: ${psError.message}`);\n        log.warn('Continuing anyway');\n      } else {\n        throw new Error(`Mobile Safari cannot open '${url}' after ${secondsElapsed.toFixed(3)}s. ` +\n          `Its process ${MOBILE_SAFARI_BUNDLE_ID} does not exist in the list of Simulator processes`);\n      }\n    }\n    log.debug(`Safari successfully opened '${url}' in ${timer.getDuration().asSeconds.toFixed(3)}s`);\n  }\n}\n\nexport default SimulatorXcode10;\n"],"mappings":";;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAGA,MAAMA,gBAAgB,SAASC,uBAAgB,CAAC;EAC9CC,WAAW,CAAEC,IAAI,EAAEC,YAAY,EAAE;IAC/B,KAAK,CAACD,IAAI,EAAEC,YAAY,CAAC;EAC3B;EASA,MAAMC,cAAc,CAAEC,QAAQ,EAAE;IAC9B,IAAI;MACF,MAAMC,YAAY,GAAG,MAAM,IAAI,CAACC,MAAM,CAACC,eAAe,CAACH,QAAQ,CAAC;MAChE,IAAI,CAACC,YAAY,CAACG,QAAQ,CAAC,MAAM,CAAC,EAAE;QAClC,OAAO,KAAK;MACd;MACA,OAAO,MAAMC,WAAE,CAACC,MAAM,CAACL,YAAY,CAAC;IACtC,CAAC,CAAC,OAAOM,GAAG,EAAE;MAIZ,IAAI;QACF,MAAMC,IAAI,GAAG,MAAM,IAAI,CAACN,MAAM,CAACO,OAAO,CAACT,QAAQ,CAAC;QAChD,OAAOQ,IAAI,CAACE,QAAQ,CAAC,iBAAiB,CAAC;MACzC,CAAC,CAAC,OAAOC,GAAG,EAAE,CAAC;IACjB;IACA,OAAO,KAAK;EACd;EAKA,MAAMC,OAAO,CAAEC,GAAG,EAAE;IAClB,IAAI,EAAC,MAAM,IAAI,CAACC,SAAS,EAAE,GAAE;MAC3B,MAAM,IAAIC,KAAK,CAAE,kBAAiBF,GAAI,yCAAwC,CAAC;IACjF;IACA,MAAMG,KAAK,GAAG,IAAIC,eAAM,CAACC,KAAK,EAAE,CAACC,KAAK,EAAE;IACxC,MAAM,IAAI,CAACjB,MAAM,CAACU,OAAO,CAACC,GAAG,CAAC;IAC9B,IAAIO,OAAO;IACX,IAAI;MACF,MAAM,IAAAC,0BAAgB,EAAC,YAAY;QACjC,IAAIC,QAAQ,GAAG,EAAE;QACjB,IAAI;UACFA,QAAQ,GAAG,MAAM,IAAI,CAACC,EAAE,EAAE;UAC1BH,OAAO,GAAG,IAAI;QAChB,CAAC,CAAC,OAAOI,CAAC,EAAE;UACVC,eAAG,CAACC,KAAK,CAACF,CAAC,CAACG,OAAO,CAAC;UACpBP,OAAO,GAAGI,CAAC;QACb;QACA,OAAOF,QAAQ,CAACM,IAAI,CAAC,CAAC;UAACC;QAAI,CAAC,KAAKA,IAAI,KAAKC,8BAAuB,CAAC;MACpE,CAAC,EAAE;QACDC,MAAM,EAAEC,gCAAyB;QACjCC,UAAU,EAAE;MACd,CAAC,CAAC;IACJ,CAAC,CAAC,OAAO1B,GAAG,EAAE;MACZ,MAAM2B,cAAc,GAAGlB,KAAK,CAACmB,WAAW,EAAE,CAACC,SAAS;MACpD,IAAIhB,OAAO,EAAE;QACXK,eAAG,CAACY,IAAI,CAAE,4DAA2DH,cAAc,CAACI,OAAO,CAAC,CAAC,CAAE,KAAI,GAChG,mBAAkBlB,OAAO,CAACO,OAAQ,EAAC,CAAC;QACvCF,eAAG,CAACY,IAAI,CAAC,mBAAmB,CAAC;MAC/B,CAAC,MAAM;QACL,MAAM,IAAItB,KAAK,CAAE,8BAA6BF,GAAI,WAAUqB,cAAc,CAACI,OAAO,CAAC,CAAC,CAAE,KAAI,GACvF,eAAcR,8BAAwB,oDAAmD,CAAC;MAC/F;IACF;IACAL,eAAG,CAACC,KAAK,CAAE,+BAA8Bb,GAAI,QAAOG,KAAK,CAACmB,WAAW,EAAE,CAACC,SAAS,CAACE,OAAO,CAAC,CAAC,CAAE,GAAE,CAAC;EAClG;AACF;AAAC,eAEc5C,gBAAgB;AAAA"}