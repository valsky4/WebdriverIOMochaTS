"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("source-map-support/register");
var _lodash = _interopRequireDefault(require("lodash"));
var _simulatorXcode = _interopRequireDefault(require("./simulator-xcode-11"));
class SimulatorXcode11_4 extends _simulatorXcode.default {
  constructor(udid, xcodeVersion) {
    super(udid, xcodeVersion);
    this._locationMenu = 'Features';
  }
  async setAppearance(value) {
    await this.simctl.setAppearance(_lodash.default.toLower(value));
  }
  async getAppearance() {
    return await this.simctl.getAppearance();
  }
  async addCertificate(payload, opts = {}) {
    const {
      isRoot = true
    } = opts;
    const methodName = isRoot ? 'addRootCertificate' : 'addCertificate';
    await this.simctl[methodName](payload, {
      raw: true
    });
    return true;
  }
  async pushNotification(payload) {
    await this.simctl.pushNotification(payload);
  }
  async setPermissions(bundleId, permissionsMapping) {
    return await super.setPermissions(bundleId, permissionsMapping);
  }
  async clearKeychains() {
    await this.simctl.resetKeychain();
  }
  async launchWindow(isUiClientRunning, opts) {
    if (!isUiClientRunning) {
      await this.startUIClient(opts);
    }
    await this.boot();
  }
  async ps() {
    const {
      stdout
    } = await this.simctl.spawnProcess(['launchctl', 'list']);
    const extractGroup = lbl => lbl.includes(':') ? lbl.split(':')[0] : null;
    const extractName = lbl => {
      let res = lbl;
      const colonIdx = res.indexOf(':');
      if (colonIdx >= 0 && res.length > colonIdx) {
        res = res.substring(colonIdx + 1);
      }
      const bracketIdx = res.indexOf('[');
      if (bracketIdx >= 0) {
        res = res.substring(0, bracketIdx);
      }
      return res;
    };
    const result = [];
    for (const line of stdout.split('\n')) {
      const trimmedLine = _lodash.default.trim(line);
      if (!trimmedLine) {
        continue;
      }
      const [pidStr,, label] = trimmedLine.split(/\s+/);
      const pid = parseInt(pidStr, 10);
      if (!pid || !label) {
        continue;
      }
      result.push({
        pid,
        group: extractGroup(label),
        name: extractName(label)
      });
    }
    return result;
  }
}
var _default = SimulatorXcode11_4;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,