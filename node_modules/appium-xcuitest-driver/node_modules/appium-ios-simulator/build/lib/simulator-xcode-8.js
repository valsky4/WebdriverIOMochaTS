"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("source-map-support/register");
var _lodash = _interopRequireDefault(require("lodash"));
var _logger = _interopRequireDefault(require("./logger"));
var _teen_process = require("teen_process");
var _utils = require("./utils");
var _path = _interopRequireDefault(require("path"));
var _appiumXcode = require("appium-xcode");
var _support = require("@appium/support");
var _asyncLock = _interopRequireDefault(require("async-lock"));
var _asyncbox = require("asyncbox");
var _events = require("events");
var _nodeSimctl = _interopRequireDefault(require("node-simctl"));
var _index = _interopRequireDefault(require("./extensions/index"));
const BOOT_COMPLETED_EVENT = 'bootCompleted';
const STARTUP_TIMEOUT_MS = 120 * 1000;
const UI_CLIENT_ACCESS_GUARD = new _asyncLock.default();
const UI_CLIENT_BUNDLE_ID = 'com.apple.iphonesimulator';
class SimulatorXcode8 extends _events.EventEmitter {
  constructor(udid, xcodeVersion) {
    super(udid, xcodeVersion);
    this.udid = String(udid);
    this.simctl = new _nodeSimctl.default({
      udid: this.udid
    });
    this.xcodeVersion = xcodeVersion;
    this._platformVersion = null;
    this.keychainPath = _path.default.resolve(this.getDir(), 'Library', 'Keychains');
    this._idb = null;
    this._locationMenu = 'Debug';
  }
  get uiClientBundleId() {
    return UI_CLIENT_BUNDLE_ID;
  }
  get devicesSetPath() {
    return this.simctl.devicesSetPath;
  }
  set devicesSetPath(value) {
    this.simctl.devicesSetPath = value;
  }
  async getUIClientPid() {
    let stdout;
    try {
      ({
        stdout
      } = await (0, _teen_process.exec)('pgrep', ['-fn', `${_utils.SIMULATOR_APP_NAME}/Contents/MacOS/`]));
    } catch (e) {
      return null;
    }
    if (isNaN(parseInt(stdout, 10))) {
      return null;
    }
    stdout = stdout.trim();
    _logger.default.debug(`Got Simulator UI client PID: ${stdout}`);
    return stdout;
  }
  async isUIClientRunning() {
    return !_lodash.default.isNull(await this.getUIClientPid());
  }
  async getPlatformVersion() {
    if (!this._platformVersion) {
      const {
        sdk
      } = await this.stat();
      this._platformVersion = sdk;
    }
    return this._platformVersion;
  }
  getRootDir() {
    return _path.default.resolve(process.env.HOME, 'Library', 'Developer', 'CoreSimulator', 'Devices');
  }
  getDir() {
    return _path.default.resolve(this.getRootDir(), this.udid, 'data');
  }
  getLogDir() {
    return _path.default.resolve(process.env.HOME, 'Library', 'Logs', 'CoreSimulator', this.udid);
  }
  async stat() {
    for (const [sdk, deviceArr] of _lodash.default.toPairs(await this.simctl.getDevices())) {
      for (let device of deviceArr) {
        if (device.udid === this.udid) {
          device.sdk = sdk;
          return device;
        }
      }
    }
    return {};
  }
  async isFresh() {
    const cachesRoot = _path.default.resolve(this.getDir(), 'Library', 'Caches');
    return (await _support.fs.exists(cachesRoot)) ? (await _support.fs.glob('*', {
      cwd: cachesRoot,
      nosort: true,
      strict: false
    })).length === 0 : true;
  }
  async isRunning() {
    try {
      await this.simctl.getEnv('dummy');
      return true;
    } catch (e) {
      return false;
    }
  }
  async isShutdown() {
    try {
      await this.simctl.getEnv('dummy');
      return false;
    } catch (e) {
      return _lodash.default.includes(e.stderr, 'Current state: Shutdown');
    }
  }
  async startUIClient(opts = {}) {
    opts = _lodash.default.cloneDeep(opts);
    _lodash.default.defaultsDeep(opts, {
      scaleFactor: null,
      startupTimeout: this.startupTimeout
    });
    const simulatorApp = _path.default.resolve(await (0, _appiumXcode.getPath)(), 'Applications', _utils.SIMULATOR_APP_NAME);
    const args = ['-Fn', simulatorApp, '--args', '-CurrentDeviceUDID', this.udid];
    if (opts.scaleFactor) {
      const {
        name
      } = await this.stat();
      const formattedDeviceName = name.replace(/\s+/g, '-');
      const argumentName = `-SimulatorWindowLastScale-com.apple.CoreSimulator.SimDeviceType.${formattedDeviceName}`;
      args.push(argumentName, opts.scaleFactor);
    }
    _logger.default.info(`Starting Simulator UI with command: open ${args.join(' ')}`);
    try {
      await (0, _teen_process.exec)('open', args, {
        timeout: opts.startupTimeout
      });
    } catch (err) {
      if (!(err.stdout || '').includes('-10825') && !(err.stderr || '').includes('-10825')) {
        throw err;
      }
      _logger.default.warn(`Error while opening UI: ${err.stdout || err.stderr}. Continuing`);
    }
  }
  async run(opts = {}) {
    opts = Object.assign({
      startupTimeout: this.startupTimeout
    }, opts);
    const isServerRunning = await this.isRunning();
    const isUIClientRunning = await this.isUIClientRunning();
    if (isServerRunning && isUIClientRunning) {
      _logger.default.info(`Both Simulator with UDID ${this.udid} and the UI client are currently running`);
      return;
    }
    const timer = new _support.timing.Timer().start();
    try {
      await this.shutdown();
    } catch (err) {
      _logger.default.warn(`Error on Simulator shutdown: ${err.message}`);
    }
    await this.startUIClient(opts);
    await this.waitForBoot(opts.startupTimeout);
    _logger.default.info(`Simulator with UDID ${this.udid} booted in ${timer.getDuration().asSeconds.toFixed(3)}s`);
  }
  async clean() {
    _logger.default.info(`Cleaning simulator ${this.udid}`);
    await this.simctl.eraseDevice(10000);
  }
  async shutdown(opts = {}) {
    if (await this.isShutdown()) {
      return;
    }
    await (0, _asyncbox.retryInterval)(5, 500, this.simctl.shutdownDevice.bind(this.simctl));
    const waitMs = parseInt(opts.timeout, 10);
    if (waitMs > 0) {
      try {
        await (0, _asyncbox.waitForCondition)(async () => await this.isShutdown(), {
          waitMs,
          intervalMs: 100
        });
      } catch (err) {
        throw new Error(`Simulator is not in 'Shutdown' state after ${waitMs}ms`);
      }
    }
  }
  async delete() {
    await this.simctl.deleteDevice();
  }
  async _activateWindow() {
    const pid = await this.getUIClientPid();
    if (pid) {
      try {
        return await (0, _utils.activateApp)(pid);
      } catch (e) {
        _logger.default.debug(e.stderr || e.message);
      }
    }
    return `
      tell application "System Events"
        tell process "Simulator"
          set frontmost to false
          set frontmost to true
        end tell
      end tell
    `;
  }
  async executeUIClientScript(appleScript) {
    const windowActivationScript = await this._activateWindow();
    const resultScript = `${windowActivationScript ? windowActivationScript + '\n' : ''}${appleScript}`;
    _logger.default.debug(`Executing UI Apple Script on Simulator with UDID ${this.udid}: ${resultScript}`);
    return await UI_CLIENT_ACCESS_GUARD.acquire(_utils.SIMULATOR_APP_NAME, async () => {
      try {
        const {
          stdout
        } = await (0, _teen_process.exec)('osascript', ['-e', resultScript]);
        return stdout;
      } catch (err) {
        _logger.default.errorAndThrow(`Could not complete operation. Make sure Simulator UI is running and the parent Appium application (e. g. Appium.app or Terminal.app) ` + `is present in System Preferences > Security & Privacy > Privacy > Accessibility list. If the operation is still unsuccessful then ` + `it is not supported by this Simulator. Original error: ${err.message}`);
      }
    });
  }
  async ps() {
    const {
      stdout
    } = await this.simctl.spawnProcess(['launchctl', 'print', 'system']);
    const servicesMatch = /^\s*services\s*=\s*{([^}]+)/m.exec(stdout);
    if (!servicesMatch) {
      _logger.default.debug(stdout);
      throw new Error(`The list of active processes cannot be retrieved`);
    }
    const result = [];
    const pattern = /^\s*(\d+)\s+[\d-]+\s+([\w\-.]+:)?([\w\-.]+)/gm;
    let match;
    while (match = pattern.exec(servicesMatch[1])) {
      result.push({
        pid: parseInt(match[1], 10),
        group: _lodash.default.trimEnd(match[2], ':') || null,
        name: match[3]
      });
    }
    return result;
  }
  async getWebInspectorSocket() {
    return null;
  }
  set idb(value) {
    this._idb = value;
  }
  get idb() {
    return this._idb;
  }
  async killUIClient(opts = {}) {
    let {
      pid,
      signal = 2
    } = opts;
    pid = pid || (await this.getUIClientPid());
    if (!pid) {
      return false;
    }
    _logger.default.debug(`Sending ${signal} kill signal to Simulator UI client with PID ${pid}`);
    try {
      await (0, _teen_process.exec)('kill', [`-${signal}`, pid]);
      return true;
    } catch (e) {
      if (e.code === 1) {
        return false;
      }
      throw new Error(`Cannot kill the Simulator UI client. Original error: ${e.message}`);
    }
  }
  get startupTimeout() {
    return STARTUP_TIMEOUT_MS;
  }
  async waitForBoot(startupTimeout) {
    await this.simctl.startBootMonitor({
      timeout: startupTimeout
    });
    this.emit(BOOT_COMPLETED_EVENT);
  }
}
for (const [cmd, fn] of _lodash.default.toPairs(_index.default)) {
  SimulatorXcode8.prototype[cmd] = fn;
}
var _default = SimulatorXcode8;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,