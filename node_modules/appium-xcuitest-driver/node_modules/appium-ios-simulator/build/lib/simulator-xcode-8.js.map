{"version":3,"file":"simulator-xcode-8.js","names":["BOOT_COMPLETED_EVENT","STARTUP_TIMEOUT_MS","UI_CLIENT_ACCESS_GUARD","AsyncLock","UI_CLIENT_BUNDLE_ID","SimulatorXcode8","EventEmitter","constructor","udid","xcodeVersion","String","simctl","Simctl","_platformVersion","keychainPath","path","resolve","getDir","_idb","_locationMenu","uiClientBundleId","devicesSetPath","value","getUIClientPid","stdout","exec","SIMULATOR_APP_NAME","e","isNaN","parseInt","trim","log","debug","isUIClientRunning","_","isNull","getPlatformVersion","sdk","stat","getRootDir","process","env","HOME","getLogDir","deviceArr","toPairs","getDevices","device","isFresh","cachesRoot","fs","exists","glob","cwd","nosort","strict","length","isRunning","getEnv","isShutdown","includes","stderr","startUIClient","opts","cloneDeep","defaultsDeep","scaleFactor","startupTimeout","simulatorApp","getXcodePath","args","name","formattedDeviceName","replace","argumentName","push","info","join","timeout","err","warn","run","Object","assign","isServerRunning","timer","timing","Timer","start","shutdown","message","waitForBoot","getDuration","asSeconds","toFixed","clean","eraseDevice","retryInterval","shutdownDevice","bind","waitMs","waitForCondition","intervalMs","Error","delete","deleteDevice","_activateWindow","pid","activateApp","executeUIClientScript","appleScript","windowActivationScript","resultScript","acquire","errorAndThrow","ps","spawnProcess","servicesMatch","result","pattern","match","group","trimEnd","getWebInspectorSocket","idb","killUIClient","signal","code","startBootMonitor","emit","cmd","fn","extensions","prototype"],"sources":["../../lib/simulator-xcode-8.js"],"sourcesContent":["import _ from 'lodash';\nimport log from './logger';\nimport { exec } from 'teen_process';\nimport { activateApp, SIMULATOR_APP_NAME } from './utils';\nimport path from 'path';\nimport { getPath as getXcodePath } from 'appium-xcode';\nimport { fs, timing } from '@appium/support';\nimport AsyncLock from 'async-lock';\nimport { retryInterval, waitForCondition } from 'asyncbox';\nimport { EventEmitter } from 'events';\nimport Simctl from 'node-simctl';\nimport extensions from './extensions/index';\n\n/*\n * This event is emitted as soon as iOS Simulator\n * has finished booting and it is ready to accept xcrun commands.\n * The event handler is called after 'run' method is completed\n * for Xcode 7 and older and is only useful in Xcode 8+,\n * since one can start doing stuff (for example install/uninstall an app) in parallel\n * with Simulator UI startup, which shortens session startup time.\n */\nconst BOOT_COMPLETED_EVENT = 'bootCompleted';\n\nconst STARTUP_TIMEOUT_MS = 120 * 1000;\nconst UI_CLIENT_ACCESS_GUARD = new AsyncLock();\nconst UI_CLIENT_BUNDLE_ID = 'com.apple.iphonesimulator';\n\n\nclass SimulatorXcode8 extends EventEmitter {\n  /**\n   * Constructs the object with the `udid` and version of Xcode. Use the exported `getSimulator(udid)` method instead.\n   *\n   * @param {string} udid - The Simulator ID.\n   * @param {object} xcodeVersion - The target Xcode version in format {major, minor, build}.\n   */\n  constructor (udid, xcodeVersion) {\n    super(udid, xcodeVersion);\n\n    this.udid = String(udid);\n    this.simctl = new Simctl({\n      udid: this.udid,\n    });\n    this.xcodeVersion = xcodeVersion;\n\n    // platformVersion cannot be found initially, since getting it has side effects for\n    // our logic for figuring out if a sim has been run\n    // it will be set when it is needed\n    this._platformVersion = null;\n\n    this.keychainPath = path.resolve(this.getDir(), 'Library', 'Keychains');\n    this._idb = null;\n\n    // for setting the location using AppleScript, the top-level menu through which\n    // the 'Location' option is found\n    this._locationMenu = 'Debug';\n  }\n\n  /**\n   * @return {string} Bundle identifier of Simulator UI client.\n   */\n  get uiClientBundleId () {\n    return UI_CLIENT_BUNDLE_ID;\n  }\n\n  /**\n   * @return {?string} The full path to the devices set where the current simulator is located.\n   * `null` value means that the default path is used, which is usually `~/Library/Developer/CoreSimulator/Devices`\n   */\n  get devicesSetPath () {\n    return this.simctl.devicesSetPath;\n  }\n\n  /**\n   * Set the full path to the devices set. It is recommended to set this value\n   * once right after Simulator instance is created and to not change it during\n   * the instance lifecycle\n   *\n   * @param {?string} value The full path to the devices set root on the\n   * local file system\n   */\n  set devicesSetPath (value) {\n    this.simctl.devicesSetPath = value;\n  }\n\n  /**\n   * Retrieves the current process id of the UI client\n   *\n   * @return {?string} The process ID or null if the UI client is not running\n   */\n  async getUIClientPid () {\n    let stdout;\n    try {\n      ({stdout} = await exec('pgrep', ['-fn', `${SIMULATOR_APP_NAME}/Contents/MacOS/`]));\n    } catch (e) {\n      return null;\n    }\n    if (isNaN(parseInt(stdout, 10))) {\n      return null;\n    }\n    stdout = stdout.trim();\n    log.debug(`Got Simulator UI client PID: ${stdout}`);\n    return stdout;\n  }\n\n  /**\n   * Check the state of Simulator UI client.\n   *\n   * @return {boolean} True of if UI client is running or false otherwise.\n   */\n  async isUIClientRunning () {\n    return !_.isNull(await this.getUIClientPid());\n  }\n\n  /**\n   * Get the platform version of the current Simulator.\n   *\n   * @return {string} SDK version, for example '8.3'.\n   */\n  async getPlatformVersion () {\n    if (!this._platformVersion) {\n      const {sdk} = await this.stat();\n      this._platformVersion = sdk;\n    }\n    return this._platformVersion;\n  }\n\n  /**\n   * Retrieve the full path to the directory where Simulator stuff is located.\n   *\n   * @return {string} The path string.\n   */\n  getRootDir () {\n    return path.resolve(process.env.HOME, 'Library', 'Developer', 'CoreSimulator', 'Devices');\n  }\n\n  /**\n   * Retrieve the full path to the directory where Simulator applications data is located.\n   *\n   * @return {string} The path string.\n   */\n  getDir () {\n    return path.resolve(this.getRootDir(), this.udid, 'data');\n  }\n\n  /**\n   * Retrieve the full path to the directory where Simulator logs are stored.\n   *\n   * @return {string} The path string.\n   */\n  getLogDir () {\n    return path.resolve(process.env.HOME, 'Library', 'Logs', 'CoreSimulator', this.udid);\n  }\n\n  /**\n   * Get the state and specifics of this sim.\n   *\n   * @return {object} Simulator stats mapping, for example:\n   * { name: 'iPhone 4s',\n   *   udid: 'C09B34E5-7DCB-442E-B79C-AB6BC0357417',\n   *   state: 'Shutdown',\n   *   sdk: '8.3'\n   * }\n   */\n  async stat () {\n    for (const [sdk, deviceArr] of _.toPairs(await this.simctl.getDevices())) {\n      for (let device of deviceArr) {\n        if (device.udid === this.udid) {\n          device.sdk = sdk;\n          return device;\n        }\n      }\n    }\n\n    return {};\n  }\n\n  /**\n   * Check if the Simulator has been booted at least once\n   * and has not been erased before\n   *\n   * @return {boolean} True if the current Simulator has never been started before\n   */\n  async isFresh () {\n    const cachesRoot = path.resolve(this.getDir(), 'Library', 'Caches');\n    return (await fs.exists(cachesRoot))\n      ? (await fs.glob('*', {cwd: cachesRoot, nosort: true, strict: false})).length === 0\n      : true;\n  }\n\n  /**\n   * Retrieves the state of the current Simulator. One should distinguish the\n   * states of Simulator UI and the Simulator itself.\n   *\n   * @return {boolean} True if the current Simulator is running.\n   */\n  async isRunning () {\n    try {\n      await this.simctl.getEnv('dummy');\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  /**\n   * Checks if the simulator is in shutdown state.\n   * This method is necessary, because Simulator might also be\n   * in the transitional Shutting Down state right after the `shutdown`\n   * command has been issued.\n   *\n   * @return {boolean} True if the current Simulator is shut down.\n   */\n  async isShutdown () {\n    try {\n      await this.simctl.getEnv('dummy');\n      return false;\n    } catch (e) {\n      return _.includes(e.stderr, 'Current state: Shutdown');\n    }\n  }\n\n  /**\n   * @typedef {Object} SimulatorOptions\n   * @property {?string} scaleFactor [null] - Defines the window scale value for the UI client window for the current Simulator.\n   *   Equals to null by default, which keeps the current scale unchanged.\n   *   It should be one of ['1.0', '0.75', '0.5', '0.33', '0.25'].\n   * @property {number} startupTimeout [60000] - Number of milliseconds to wait until Simulator booting\n   *   process is completed. The default timeout will be used if not set explicitly.\n   */\n\n  /**\n   * Start the Simulator UI client with the given arguments\n   * @param {SimulatorOptions} opts - Simulator startup options\n   */\n  async startUIClient (opts = {}) {\n    opts = _.cloneDeep(opts);\n    _.defaultsDeep(opts, {\n      scaleFactor: null,\n      startupTimeout: this.startupTimeout,\n    });\n\n    const simulatorApp = path.resolve(await getXcodePath(), 'Applications', SIMULATOR_APP_NAME);\n    const args = [\n      '-Fn', simulatorApp,\n      '--args', '-CurrentDeviceUDID', this.udid,\n    ];\n\n    if (opts.scaleFactor) {\n      const {name} = await this.stat();\n      const formattedDeviceName = name.replace(/\\s+/g, '-');\n      const argumentName = `-SimulatorWindowLastScale-com.apple.CoreSimulator.SimDeviceType.${formattedDeviceName}`;\n      args.push(argumentName, opts.scaleFactor);\n    }\n\n    log.info(`Starting Simulator UI with command: open ${args.join(' ')}`);\n    try {\n      await exec('open', args, {timeout: opts.startupTimeout});\n    } catch (err) {\n      if (!(err.stdout || '').includes('-10825') && !(err.stderr || '').includes('-10825')) {\n        throw err;\n      }\n      log.warn(`Error while opening UI: ${err.stdout || err.stderr}. Continuing`);\n    }\n  }\n\n  /**\n   * Executes given Simulator with options. The Simulator will not be restarted if\n   * it is already running.\n   *\n   * @param {object} opts - One or more of available Simulator options.\n   *   See {#startUIClient(opts)} documentation for more details on other supported keys.\n   */\n  async run (opts = {}) {\n    opts = Object.assign({\n      startupTimeout: this.startupTimeout,\n    }, opts);\n    const isServerRunning = await this.isRunning();\n    const isUIClientRunning = await this.isUIClientRunning();\n    if (isServerRunning && isUIClientRunning) {\n      log.info(`Both Simulator with UDID ${this.udid} and the UI client are currently running`);\n      return;\n    }\n    const timer = new timing.Timer().start();\n    try {\n      await this.shutdown();\n    } catch (err) {\n      log.warn(`Error on Simulator shutdown: ${err.message}`);\n    }\n    await this.startUIClient(opts);\n\n    await this.waitForBoot(opts.startupTimeout);\n    log.info(`Simulator with UDID ${this.udid} booted in ${timer.getDuration().asSeconds.toFixed(3)}s`);\n  }\n\n  /**\n   * Reset the current Simulator to the clean state.\n   * It is expected the simulator is in shutdown state when this API is called.\n   */\n  async clean () {\n    log.info(`Cleaning simulator ${this.udid}`);\n    await this.simctl.eraseDevice(10000);\n  }\n\n  /**\n   * @typedef {Object} ShutdownOptions\n   * @property {?number|string} timeout The number of milliseconds to wait until\n   * Simulator is shut down completely. No wait happens if the timeout value is not set\n   */\n\n  /**\n   * Shut down the current Simulator.\n   *\n   * @param {?ShutdownOptions} opts\n   * @throws {Error} If Simulator fails to transition into Shutdown state after\n   * the given timeout\n   */\n  async shutdown (opts = {}) {\n    if (await this.isShutdown()) {\n      return;\n    }\n\n    await retryInterval(5, 500, this.simctl.shutdownDevice.bind(this.simctl));\n    const waitMs = parseInt(opts.timeout, 10);\n    if (waitMs > 0) {\n      try {\n        await waitForCondition(async () => await this.isShutdown(), {\n          waitMs,\n          intervalMs: 100,\n        });\n      } catch (err) {\n        throw new Error(`Simulator is not in 'Shutdown' state after ${waitMs}ms`);\n      }\n    }\n  }\n\n  /**\n   * Delete the particular Simulator from devices list\n   */\n  async delete () {\n    await this.simctl.deleteDevice();\n  }\n\n  /**\n   * Activates Simulator window.\n   *\n   * @private\n   * @returns {?string} If the method returns a string then it should be a valid Apple Script which\n   * is appended before each UI client command is executed. Otherwise the method should activate the window\n   * itself and return nothing.\n   */\n  async _activateWindow () { // eslint-disable-line require-await\n    const pid = await this.getUIClientPid();\n    if (pid) {\n      try {\n        return await activateApp(pid);\n      } catch (e) {\n        log.debug(e.stderr || e.message);\n      }\n    }\n    return `\n      tell application \"System Events\"\n        tell process \"Simulator\"\n          set frontmost to false\n          set frontmost to true\n        end tell\n      end tell\n    `;\n  }\n\n  /**\n   * Execute given Apple Script inside a critical section, so other\n   * sessions cannot influence the UI client at the same time.\n   *\n   * @param {string} appleScript - The valid Apple Script snippet to be executed.\n   * @return {string} The stdout output produced by the script.\n   * @throws {Error} If osascript tool returns non-zero exit code.\n   */\n  async executeUIClientScript (appleScript) {\n    const windowActivationScript = await this._activateWindow();\n    const resultScript = `${windowActivationScript ? windowActivationScript + '\\n' : ''}${appleScript}`;\n    log.debug(`Executing UI Apple Script on Simulator with UDID ${this.udid}: ${resultScript}`);\n    return await UI_CLIENT_ACCESS_GUARD.acquire(SIMULATOR_APP_NAME, async () => {\n      try {\n        const {stdout} = await exec('osascript', ['-e', resultScript]);\n        return stdout;\n      } catch (err) {\n        log.errorAndThrow(\n          `Could not complete operation. Make sure Simulator UI is running and the parent Appium application (e. g. Appium.app or Terminal.app) ` +\n          `is present in System Preferences > Security & Privacy > Privacy > Accessibility list. If the operation is still unsuccessful then ` +\n          `it is not supported by this Simulator. Original error: ${err.message}`\n        );\n      }\n    });\n  }\n\n  /**\n   * @typedef {Object} ProcessInfo\n   * @property {number} pid The actual process identifier.\n   * Could be zero if the process is the system one.\n   * @property {?string} group The process group identifier.\n   * This could be `null` if the process is not a part of the\n   * particular group. For `normal` application processes the group\n   * name usually equals to `UIKitApplication`.\n   * @property {string} name The process name, for example\n   * `com.apple.Preferences`\n   */\n\n  /**\n   * Lists processes that are currently running on the given Simulator.\n   * The simulator must be in running state in order for this\n   * method to work properly.\n   *\n   * @return {Array<ProcessInfo>} The list of retrieved process\n   * information\n   * @throws {Error} if no process information could be retrieved.\n   */\n  async ps () {\n    const {stdout} = await this.simctl.spawnProcess([\n      'launchctl',\n      'print',\n      'system',\n    ]);\n\n    const servicesMatch = /^\\s*services\\s*=\\s*{([^}]+)/m.exec(stdout);\n    if (!servicesMatch) {\n      log.debug(stdout);\n      throw new Error(`The list of active processes cannot be retrieved`);\n    }\n    /*\n    Example match:\n        0     78 \tcom.apple.resourcegrabberd\n    82158      - \tcom.apple.assistant_service\n    82120      - \tcom.apple.nanoregistryd\n    82087      - \tcom.apple.notifyd\n    82264      - \tUIKitApplication:com.apple.Preferences[704b][rb-legacy]\n    */\n    const result = [];\n    const pattern = /^\\s*(\\d+)\\s+[\\d-]+\\s+([\\w\\-.]+:)?([\\w\\-.]+)/gm;\n    let match;\n    while ((match = pattern.exec(servicesMatch[1]))) {\n      result.push({\n        pid: parseInt(match[1], 10),\n        group: _.trimEnd(match[2], ':') || null,\n        name: match[3],\n      });\n    }\n    return result;\n  }\n\n  /**\n   * @return {?string} The full path to the simulator's WebInspector Unix Domain Socket\n   *   or `null` if there is no socket.\n   */\n  async getWebInspectorSocket () { // eslint-disable-line require-await\n    // there is no WebInspector socket for this version of Xcode\n    return null;\n  }\n\n  /**\n   * IDB instance setter\n   *\n   * @param {IDB} value\n   */\n  set idb (value) {\n    this._idb = value;\n  }\n\n  /**\n   * @return {IDB} idb instance\n   */\n  get idb () {\n    return this._idb;\n  }\n\n  /**\n   * @typedef {Object} killOpts\n   * @property {?number|string} pid - Process id of the UI Simulator window\n   * @property {number|string} signal [2] - The signal number to send to the\n   * `kill` command\n   */\n\n  /**\n   * Kill the UI client if it is running.\n   *\n   * @param {?killOpts} opts\n   * @return {boolean} True if the UI client was successfully killed or false\n   *                   if it is not running.\n   * @throws {Error} If sending the signal to the client process fails\n   */\n  async killUIClient (opts = {}) {\n    let {\n      pid,\n      signal = 2,\n    } = opts;\n    pid = pid || await this.getUIClientPid();\n    if (!pid) {\n      return false;\n    }\n\n    log.debug(`Sending ${signal} kill signal to Simulator UI client with PID ${pid}`);\n    try {\n      await exec('kill', [`-${signal}`, pid]);\n      return true;\n    } catch (e) {\n      if (e.code === 1) {\n        return false;\n      }\n      throw new Error(`Cannot kill the Simulator UI client. Original error: ${e.message}`);\n    }\n  }\n\n  /**\n   * @return {number} The max number of milliseconds to wait until Simulator booting is completed.\n   */\n  get startupTimeout () {\n    return STARTUP_TIMEOUT_MS;\n  }\n\n  /**\n   * Verify whether the Simulator booting is completed and/or wait for it\n   * until the timeout expires.\n   *\n   * @param {number} startupTimeout - the number of milliseconds to wait until booting is completed.\n   * @emits BOOT_COMPLETED_EVENT if the current Simulator is ready to accept simctl commands, like 'install'.\n   */\n  async waitForBoot (startupTimeout) {\n    await this.simctl.startBootMonitor({timeout: startupTimeout});\n    this.emit(BOOT_COMPLETED_EVENT);\n  }\n}\n\nfor (const [cmd, fn] of _.toPairs(extensions)) {\n  SimulatorXcode8.prototype[cmd] = fn;\n}\n\nexport default SimulatorXcode8;\n"],"mappings":"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"}