"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("source-map-support/register");
var _simulatorXcode = _interopRequireDefault(require("./simulator-xcode-9"));
var _teen_process = require("teen_process");
var _logger = _interopRequireDefault(require("./logger"));
class SimulatorXcode93 extends _simulatorXcode.default {
  constructor(udid, xcodeVersion) {
    super(udid, xcodeVersion);
    this.webInspectorSocket = null;
  }
  async getWebInspectorSocket() {
    if (this.webInspectorSocket) {
      return this.webInspectorSocket;
    }
    const {
      stdout
    } = await (0, _teen_process.exec)('lsof', ['-aUc', 'launchd_sim']);
    const udidPattern = `([0-9]{1,5}).+${this.udid}`;
    const udidMatch = stdout.match(new RegExp(udidPattern));
    if (!udidMatch) {
      _logger.default.debug(`Failed to get Web Inspector socket. lsof result: ${stdout}`);
      return null;
    }
    const pidPattern = `${udidMatch[1]}.+\\s+(\\S+com\\.apple\\.webinspectord_sim\\.socket)`;
    const pidMatch = stdout.match(new RegExp(pidPattern));
    if (!pidMatch) {
      _logger.default.debug(`Failed to get Web Inspector socket. lsof result: ${stdout}`);
      return null;
    }
    this.webInspectorSocket = pidMatch[1];
    return this.webInspectorSocket;
  }
}
var _default = SimulatorXcode93;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTaW11bGF0b3JYY29kZTkzIiwiU2ltdWxhdG9yWGNvZGU5IiwiY29uc3RydWN0b3IiLCJ1ZGlkIiwieGNvZGVWZXJzaW9uIiwid2ViSW5zcGVjdG9yU29ja2V0IiwiZ2V0V2ViSW5zcGVjdG9yU29ja2V0Iiwic3Rkb3V0IiwiZXhlYyIsInVkaWRQYXR0ZXJuIiwidWRpZE1hdGNoIiwibWF0Y2giLCJSZWdFeHAiLCJsb2ciLCJkZWJ1ZyIsInBpZFBhdHRlcm4iLCJwaWRNYXRjaCJdLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9zaW11bGF0b3IteGNvZGUtOS4zLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBTaW11bGF0b3JYY29kZTkgZnJvbSAnLi9zaW11bGF0b3IteGNvZGUtOSc7XG5pbXBvcnQgeyBleGVjIH0gZnJvbSAndGVlbl9wcm9jZXNzJztcbmltcG9ydCBsb2cgZnJvbSAnLi9sb2dnZXInO1xuXG5cbmNsYXNzIFNpbXVsYXRvclhjb2RlOTMgZXh0ZW5kcyBTaW11bGF0b3JYY29kZTkge1xuICBjb25zdHJ1Y3RvciAodWRpZCwgeGNvZGVWZXJzaW9uKSB7XG4gICAgc3VwZXIodWRpZCwgeGNvZGVWZXJzaW9uKTtcblxuICAgIHRoaXMud2ViSW5zcGVjdG9yU29ja2V0ID0gbnVsbDtcbiAgfVxuXG4gIC8qXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgYXN5bmMgZ2V0V2ViSW5zcGVjdG9yU29ja2V0ICgpIHtcbiAgICBpZiAodGhpcy53ZWJJbnNwZWN0b3JTb2NrZXQpIHtcbiAgICAgIHJldHVybiB0aGlzLndlYkluc3BlY3RvclNvY2tldDtcbiAgICB9XG5cbiAgICAvLyBsc29mIC1hVWMgbGF1bmNoZF9zaW0gZ2l2ZXMgYSBzZXQgb2YgcmVjb3JkcyBsaWtlXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2FwcGl1bS9hcHBpdW0taW9zLXNpbXVsYXRvci9jb21taXQvYzAwOTAxYTlkZGVhMTc4YzU1ODFhN2E1N2Q5NmQ4Y2VlM2YxN2M1OSNkaWZmLTJiZTA5ZGQyZWEwMWNmZDZiYmJkNzNlMTBiYzQ2OGRhNzgyYTI5NzM2NWVlYzcwNjk5OWZjMzcwOWMwMTQ3OGRSMTAyXG4gICAgLy8gdGhlc2UgX2FwcGVhcl8gdG8gYWx3YXlzIGJlIGdyb3VwZWQgdG9nZXRoZXIgYnkgUElEIGZvciBlYWNoIHNpbXVsYXRvci5cbiAgICAvLyBUaGVyZWZvcmUsIGJ5IG9idGFpbmluZyBzaW11bGF0b3IgUElEIHdpdGggYW4gZXhwZWN0ZWQgc2ltdWxhdG9yIFVESUQsXG4gICAgLy8gd2UgY2FuIGdldCB0aGUgY29ycmVjdCBgY29tLmFwcGxlLndlYmluc3BlY3RvcmRfc2ltLnNvY2tldGBcbiAgICAvLyB3aXRob3V0IGRlcGVuZGluZyBvbiB0aGUgb3JkZXIgb2YgYGxzb2YgLWFVYyBsYXVuY2hkX3NpbWAgcmVzdWx0LlxuICAgIGNvbnN0IHtzdGRvdXR9ID0gYXdhaXQgZXhlYygnbHNvZicsIFsnLWFVYycsICdsYXVuY2hkX3NpbSddKTtcbiAgICBjb25zdCB1ZGlkUGF0dGVybiA9IGAoWzAtOV17MSw1fSkuKyR7dGhpcy51ZGlkfWA7XG4gICAgY29uc3QgdWRpZE1hdGNoID0gc3Rkb3V0Lm1hdGNoKG5ldyBSZWdFeHAodWRpZFBhdHRlcm4pKTtcbiAgICBpZiAoIXVkaWRNYXRjaCkge1xuICAgICAgbG9nLmRlYnVnKGBGYWlsZWQgdG8gZ2V0IFdlYiBJbnNwZWN0b3Igc29ja2V0LiBsc29mIHJlc3VsdDogJHtzdGRvdXR9YCk7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBjb25zdCBwaWRQYXR0ZXJuID0gYCR7dWRpZE1hdGNoWzFdfS4rXFxcXHMrKFxcXFxTK2NvbVxcXFwuYXBwbGVcXFxcLndlYmluc3BlY3RvcmRfc2ltXFxcXC5zb2NrZXQpYDtcbiAgICBjb25zdCBwaWRNYXRjaCA9IHN0ZG91dC5tYXRjaChuZXcgUmVnRXhwKHBpZFBhdHRlcm4pKTtcbiAgICBpZiAoIXBpZE1hdGNoKSB7XG4gICAgICBsb2cuZGVidWcoYEZhaWxlZCB0byBnZXQgV2ViIEluc3BlY3RvciBzb2NrZXQuIGxzb2YgcmVzdWx0OiAke3N0ZG91dH1gKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICB0aGlzLndlYkluc3BlY3RvclNvY2tldCA9IHBpZE1hdGNoWzFdO1xuICAgIHJldHVybiB0aGlzLndlYkluc3BlY3RvclNvY2tldDtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBTaW11bGF0b3JYY29kZTkzO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUdBLE1BQU1BLGdCQUFnQixTQUFTQyx1QkFBZSxDQUFDO0VBQzdDQyxXQUFXLENBQUVDLElBQUksRUFBRUMsWUFBWSxFQUFFO0lBQy9CLEtBQUssQ0FBQ0QsSUFBSSxFQUFFQyxZQUFZLENBQUM7SUFFekIsSUFBSSxDQUFDQyxrQkFBa0IsR0FBRyxJQUFJO0VBQ2hDO0VBS0EsTUFBTUMscUJBQXFCLEdBQUk7SUFDN0IsSUFBSSxJQUFJLENBQUNELGtCQUFrQixFQUFFO01BQzNCLE9BQU8sSUFBSSxDQUFDQSxrQkFBa0I7SUFDaEM7SUFRQSxNQUFNO01BQUNFO0lBQU0sQ0FBQyxHQUFHLE1BQU0sSUFBQUMsa0JBQUksRUFBQyxNQUFNLEVBQUUsQ0FBQyxNQUFNLEVBQUUsYUFBYSxDQUFDLENBQUM7SUFDNUQsTUFBTUMsV0FBVyxHQUFJLGlCQUFnQixJQUFJLENBQUNOLElBQUssRUFBQztJQUNoRCxNQUFNTyxTQUFTLEdBQUdILE1BQU0sQ0FBQ0ksS0FBSyxDQUFDLElBQUlDLE1BQU0sQ0FBQ0gsV0FBVyxDQUFDLENBQUM7SUFDdkQsSUFBSSxDQUFDQyxTQUFTLEVBQUU7TUFDZEcsZUFBRyxDQUFDQyxLQUFLLENBQUUsb0RBQW1EUCxNQUFPLEVBQUMsQ0FBQztNQUN2RSxPQUFPLElBQUk7SUFDYjtJQUVBLE1BQU1RLFVBQVUsR0FBSSxHQUFFTCxTQUFTLENBQUMsQ0FBQyxDQUFFLHNEQUFxRDtJQUN4RixNQUFNTSxRQUFRLEdBQUdULE1BQU0sQ0FBQ0ksS0FBSyxDQUFDLElBQUlDLE1BQU0sQ0FBQ0csVUFBVSxDQUFDLENBQUM7SUFDckQsSUFBSSxDQUFDQyxRQUFRLEVBQUU7TUFDYkgsZUFBRyxDQUFDQyxLQUFLLENBQUUsb0RBQW1EUCxNQUFPLEVBQUMsQ0FBQztNQUN2RSxPQUFPLElBQUk7SUFDYjtJQUNBLElBQUksQ0FBQ0Ysa0JBQWtCLEdBQUdXLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFDckMsT0FBTyxJQUFJLENBQUNYLGtCQUFrQjtFQUNoQztBQUNGO0FBQUMsZUFFY0wsZ0JBQWdCO0FBQUEifQ==