{"version":3,"file":"simulator-xcode-9.js","names":["SIMULATOR_SHUTDOWN_TIMEOUT","startupLock","AsyncLock","preferencesPlistGuard","ENROLLMENT_NOTIFICATION_RECEIVER","DOMAIN_KEYBOARD_PREFERENCES","compileSimulatorPreferences","opts","connectHardwareKeyboard","tracePointer","pasteboardAutomaticSync","scaleFactor","commonPreferences","RotateWindowWhenSignaledByGuest","StartLastDeviceOnLaunch","DetachOnWindowClose","AttachBootedOnStart","devicePreferences","_","cloneDeep","SimulatorWindowLastScale","parseFloat","isBoolean","isNil","ConnectHardwareKeyboard","ShowSingleTouches","ShowPinches","ShowPinchPivotPoint","HighlightEdgeGestures","lowerCase","PasteboardAutomaticSync","log","info","SimulatorXcode9","SimulatorXcode8","constructor","udid","xcodeVersion","run","defaultsDeep","isHeadless","startupTimeout","updatePreferences","timer","timing","Timer","start","shouldWaitForBoot","acquire","uiClientBundleId","isServerRunning","isRunning","uiClientPid","getUIClientPid","killUIClient","pid","waitForCondition","isShutdown","waitMs","intervalMs","e","Error","boot","shutdown","timeout","launchWindow","waitForBoot","getDuration","asSeconds","toFixed","disableKeyboardIntroduction","message","startUIClient","simulatorApp","path","resolve","getXcodePath","SIMULATOR_APP_NAME","args","util","quote","exec","err","stderr","stdout","argChunks","generateDefaultsCommandArgs","DidShowContinuousPathIntroduction","B","all","map","simctl","spawnProcess","isUiClientRunning","bootEventsEmitter","EventEmitter","startBootMonitor","onError","emit","onFinished","shouldPreboot","reject","setTimeout","once","includes","removeAllListeners","verifyDevicePreferences","prefs","isEmpty","isUndefined","isNumber","errorAndThrow","SimulatorWindowCenter","verificationPattern","isString","test","SimulatorWindowOrientation","acceptableValues","indexOf","SimulatorWindowRotationAngle","devicePrefs","commonPrefs","debug","JSON","stringify","homeFolderPath","process","env","HOME","warn","plistPath","name","defaults","NSUserDefaults","prefsToUpdate","clone","existingDevicePrefs","udidKey","toUpperCase","fs","exists","currentPlistContent","asJson","isPlainObject","DevicePreferences","Object","assign","update","_activateWindow","selfName","selfSdk","bootedDevicesCount","sdk","deviceArr","toPairs","getDevices","state","isBiometricEnrolled","match","RegExp","escapeRegExp","enrollBiometric","isEnabled","sendBiometricMatch","shouldMatch","biometricName","domainComponent","toBiometricDomainComponent","domain","getLaunchDaemonsRoot","devRoot","getDeveloperRoot","configureLocalization","language","locale","keyboard","globalPrefs","keyboardId","layout","hardware","AppleKeyboards","AppleLanguages","calendar","localeId","AppleLocale","KeyboardsCurrentAndNext","KeyboardLastUsed","KeyboardLastUsedForLanguage"],"sources":["../../lib/simulator-xcode-9.js"],"sourcesContent":["import SimulatorXcode8 from './simulator-xcode-8';\nimport _ from 'lodash';\nimport path from 'path';\nimport { fs, timing, util } from '@appium/support';\nimport AsyncLock from 'async-lock';\nimport log from './logger';\nimport { waitForCondition } from 'asyncbox';\nimport {\n  toBiometricDomainComponent, getDeveloperRoot, SIMULATOR_APP_NAME\n} from './utils.js';\nimport { NSUserDefaults, generateDefaultsCommandArgs } from './defaults-utils';\nimport B from 'bluebird';\nimport { EventEmitter } from 'events';\nimport { getPath as getXcodePath } from 'appium-xcode';\nimport { exec } from 'teen_process';\n\nconst SIMULATOR_SHUTDOWN_TIMEOUT = 15 * 1000;\nconst startupLock = new AsyncLock();\nconst preferencesPlistGuard = new AsyncLock();\nconst ENROLLMENT_NOTIFICATION_RECEIVER = 'com.apple.BiometricKit.enrollmentChanged';\nconst DOMAIN_KEYBOARD_PREFERENCES = 'com.apple.keyboard.preferences';\n\n/**\n * Creates device and common Simulator preferences, which could\n * be later applied using `defaults` CLI utility.\n *\n * @param {RunOptions} opts\n * @returns {object[]} The first array item is the resulting device preferences\n * object and the second one is common preferences object\n */\nfunction compileSimulatorPreferences (opts = {}) {\n  const {\n    connectHardwareKeyboard,\n    tracePointer,\n    pasteboardAutomaticSync,\n    scaleFactor,\n  } = opts;\n  const commonPreferences = {\n    // This option is necessary to make the Simulator window follow\n    // the actual XCUIDevice orientation\n    RotateWindowWhenSignaledByGuest: true,\n    // https://github.com/appium/appium/issues/16418\n    StartLastDeviceOnLaunch: false,\n    DetachOnWindowClose: false,\n    AttachBootedOnStart: true,\n  };\n  const devicePreferences = opts.devicePreferences ? _.cloneDeep(opts.devicePreferences) : {};\n  if (scaleFactor) {\n    devicePreferences.SimulatorWindowLastScale = parseFloat(scaleFactor);\n  }\n  if (_.isBoolean(connectHardwareKeyboard) || _.isNil(connectHardwareKeyboard)) {\n    devicePreferences.ConnectHardwareKeyboard = connectHardwareKeyboard ?? false;\n    commonPreferences.ConnectHardwareKeyboard = connectHardwareKeyboard ?? false;\n  }\n  if (_.isBoolean(tracePointer)) {\n    commonPreferences.ShowSingleTouches = tracePointer;\n    commonPreferences.ShowPinches = tracePointer;\n    commonPreferences.ShowPinchPivotPoint = tracePointer;\n    commonPreferences.HighlightEdgeGestures = tracePointer;\n  }\n  switch (_.lowerCase(pasteboardAutomaticSync)) {\n    case 'on':\n      commonPreferences.PasteboardAutomaticSync = true;\n      break;\n    case 'off':\n      // Improve launching simulator performance\n      // https://github.com/WebKit/webkit/blob/master/Tools/Scripts/webkitpy/xcode/simulated_device.py#L413\n      commonPreferences.PasteboardAutomaticSync = false;\n      break;\n    case 'system':\n      // Do not add -PasteboardAutomaticSync\n      break;\n    default:\n      log.info(`['on', 'off' or 'system'] are available as the pasteboard automatic sync option. Defaulting to 'off'`);\n      commonPreferences.PasteboardAutomaticSync = false;\n  }\n  return [devicePreferences, commonPreferences];\n}\n\nclass SimulatorXcode9 extends SimulatorXcode8 {\n  constructor (udid, xcodeVersion) {\n    super(udid, xcodeVersion);\n  }\n\n  /**\n   * @typedef {Object} DevicePreferences\n   * @property {?number} SimulatorExternalDisplay - TBD. Example value: 2.114\n   * @property {?string} ChromeTint - TBD. Example value: ''\n   * @property {?number} SimulatorWindowLastScale - Scale value for the particular Simulator window.\n   *                                                1.0 means 100% scale.\n   * @property {?string} SimulatorWindowOrientation - Simulator window orientation. Possible values are:\n   *                                                  'Portrait', 'LandscapeLeft', 'PortraitUpsideDown' and 'LandscapeRight'.\n   * @property {?number} SimulatorWindowRotationAngle - Window rotation angle. This value is expected to be in sync\n   *                                                    with _SimulatorWindowOrientation_. The corresponding values are:\n   *                                                    0, 90, 180 and 270.\n   * @property {?string} SimulatorWindowCenter - The coordinates of Simulator's window center in pixels,\n   *                                             for example '{-1294.5, 775.5}'.\n   * @property {?boolean} ConnectHardwareKeyboard - Equals to 1 if hardware keyboard should be connected.\n   *                                                Otherwise 0.\n   */\n\n  /**\n   * @typedef {Object} CommonPreferences\n   * @property {boolean} ConnectHardwareKeyboard - Whether to connect hardware keyboard\n   */\n\n  /**\n   * @typedef {Object} RunOptions\n   * @property {string} scaleFactor: Any positive float value. 1.0 means 1:1 scale.\n   * Defines the window scale value for the UI client window for the current Simulator.\n   * Equals to `null` by default, which keeps the current scale unchanged.\n   * @property {boolean} connectHardwareKeyboard: whether to connect the hardware keyboard to the\n   * Simulator UI client. Equals to `false` by default.\n   * @property {number} startupTimeout: number of milliseconds to wait until Simulator booting\n   * process is completed. The default timeout will be used if not set explicitly.\n   * @property {boolean} isHeadless: whether to start the Simulator in headless mode (with UI\n   * client invisible). `false` by default.\n   * @property {?boolean} tracePointer [false] - Whether to highlight touches on Simulator\n   * screen. This is helpful while debugging automated tests or while observing the automation\n   * recordings.\n   * @property {string} pasteboardAutomaticSync ['off'] - Whether to disable pasteboard sync with the\n   * Simulator UI client or respect the system wide preference. 'on', 'off', or 'system' is available.\n   * The sync increases launching simulator process time, but it allows system to sync pasteboard\n   * with simulators. Follows system-wide preference if the value is 'system'.\n   * Defaults to 'off'.\n   * @property {DevicePreferences} devicePreferences: preferences of the newly created Simulator\n   * device\n   */\n\n  /**\n   * Executes given Simulator with options. The Simulator will not be restarted if\n   * it is already running and the current UI state matches to `isHeadless` option.\n   * @override\n   *\n   * @param {RunOptions} opts - One or more of available Simulator options\n   */\n  async run (opts = {}) {\n    opts = _.cloneDeep(opts);\n    _.defaultsDeep(opts, {\n      isHeadless: false,\n      startupTimeout: this.startupTimeout,\n    });\n\n    const [devicePreferences, commonPreferences] = compileSimulatorPreferences(opts);\n    await this.updatePreferences(devicePreferences, commonPreferences);\n\n    const timer = new timing.Timer().start();\n    const shouldWaitForBoot = await startupLock.acquire(this.uiClientBundleId, async () => {\n      const isServerRunning = await this.isRunning();\n      const uiClientPid = await this.getUIClientPid();\n      if (opts.isHeadless) {\n        if (isServerRunning && !uiClientPid) {\n          log.info(`Simulator with UDID '${this.udid}' is already booted in headless mode.`);\n          return false;\n        }\n        if (await this.killUIClient({pid: uiClientPid})) {\n          log.info(`Detected the Simulator UI client was running and killed it. Verifying the current Simulator state`);\n        }\n        try {\n          // Stopping the UI client kills all running servers for some early XCode versions. This is a known bug\n          await waitForCondition(async () => await this.isShutdown(), {\n            waitMs: 5000,\n            intervalMs: 100,\n          });\n        } catch (e) {\n          if (!await this.isRunning()) {\n            throw new Error(`Simulator with UDID '${this.udid}' cannot be transitioned to headless mode`);\n          }\n          return false;\n        }\n        log.info(`Booting Simulator with UDID '${this.udid}' in headless mode. ` +\n          `All UI-related capabilities are going to be ignored`);\n        await this.boot();\n      } else {\n        if (isServerRunning && uiClientPid) {\n          log.info(`Both Simulator with UDID '${this.udid}' and the UI client are currently running`);\n          return false;\n        }\n        if (isServerRunning) {\n          log.info(`Simulator '${this.udid}' is booted while its UI is not visible. ` +\n            `Trying to restart it with the Simulator window visible`);\n          await this.shutdown({timeout: SIMULATOR_SHUTDOWN_TIMEOUT});\n        }\n        await this.launchWindow(uiClientPid, opts);\n      }\n      return true;\n    });\n\n    if (shouldWaitForBoot) {\n      await this.waitForBoot(opts.startupTimeout);\n      log.info(`Simulator with UDID ${this.udid} booted in ${timer.getDuration().asSeconds.toFixed(3)}s`);\n    }\n\n    (async () => {\n      try {\n        await this.disableKeyboardIntroduction();\n      } catch (e) {\n        log.info(`Cannot disable Simulator keyboard introduction. Original error: ${e.message}`);\n      }\n    })();\n  }\n\n  /**\n   * @override\n   */\n  async startUIClient (opts = {}) {\n    opts = _.cloneDeep(opts);\n    _.defaultsDeep(opts, {\n      startupTimeout: this.startupTimeout,\n    });\n\n    const simulatorApp = path.resolve(await getXcodePath(), 'Applications', SIMULATOR_APP_NAME);\n    const args = ['-Fn', simulatorApp];\n    log.info(`Starting Simulator UI: ${util.quote(['open', ...args])}`);\n    try {\n      await exec('open', args, {timeout: opts.startupTimeout});\n    } catch (err) {\n      throw new Error(`Got an unexpected error while opening Simulator UI: ` +\n        err.stderr || err.stdout || err.message);\n    }\n  }\n\n  /**\n   * Disable keyboard tutorial as 'com.apple.keyboard.preferences' domain via 'defaults' command.\n   */\n  async disableKeyboardIntroduction () {\n    const argChunks = generateDefaultsCommandArgs({\n    // To disable 'DidShowContinuousPathIntroduction' for iOS 15+ simulators since changing the preference via WDA\n    // does not work on them. Lower than the versions also can have this preference, but nothing happen.\n      DidShowContinuousPathIntroduction: 1\n    }, true);\n    await B.all(argChunks.map((args) => this.simctl.spawnProcess([\n      'defaults', 'write', DOMAIN_KEYBOARD_PREFERENCES, ...args\n    ])));\n  }\n\n  /***\n   * Boots simulator and opens simulators UI Client if not already opened.\n   *\n   * @param {boolean} isUiClientRunning - process id of simulator UI client.\n   * @param {RunOptions} opts - arguments to start simulator UI client with.\n   */\n  async launchWindow (isUiClientRunning, opts = {}) {\n    await this.boot();\n    if (!isUiClientRunning) {\n      await this.startUIClient(opts);\n    }\n  }\n\n  /**\n   * Boots Simulator if not already booted.\n   * Does nothing if it is already running.\n   * This API does NOT wait until Simulator is fully booted.\n   *\n   * @throws {Error} If there was a failure while booting the Simulator.\n   */\n  async boot () {\n    const bootEventsEmitter = new EventEmitter();\n    await this.simctl.startBootMonitor({\n      onError: (err) => bootEventsEmitter.emit('failure', err),\n      onFinished: () => bootEventsEmitter.emit('finish'),\n      shouldPreboot: true,\n    });\n    try {\n      await new B((resolve, reject) => {\n        // Historically this call was always asynchronous,\n        // e.g. it was not waiting until Simulator is fully booted.\n        // So we preserve that behavior, and if no errors are received for a while\n        // then we assume the Simulator booting is still in progress.\n        setTimeout(resolve, 3000);\n        bootEventsEmitter.once('failure', (err) => {\n          if (_.includes(err?.message, 'state: Booted')) {\n            resolve();\n          } else {\n            reject(err);\n          }\n        });\n        bootEventsEmitter.once('finish', resolve);\n      });\n    } finally {\n      bootEventsEmitter.removeAllListeners();\n    }\n  }\n\n  /**\n   * Perform verification of device preferences correctness.\n   *\n   * @param {DevicePreferences} prefs [{}] - The preferences to be verified\n   * @throws {Error} If any of the given preference values does not match the expected\n   * format.\n   */\n  verifyDevicePreferences (prefs = {}) {\n    if (_.isEmpty(prefs)) {\n      return;\n    }\n\n    if (!_.isUndefined(prefs.SimulatorWindowLastScale)) {\n      if (!_.isNumber(prefs.SimulatorWindowLastScale) || prefs.SimulatorWindowLastScale <= 0) {\n        log.errorAndThrow(`SimulatorWindowLastScale is expected to be a positive float value. ` +\n          `'${prefs.SimulatorWindowLastScale}' is assigned instead.`);\n      }\n    }\n\n    if (!_.isUndefined(prefs.SimulatorWindowCenter)) {\n      // https://regex101.com/r/2ZXOij/2\n      const verificationPattern = /{-?\\d+(\\.\\d+)?,-?\\d+(\\.\\d+)?}/;\n      if (!_.isString(prefs.SimulatorWindowCenter) || !verificationPattern.test(prefs.SimulatorWindowCenter)) {\n        log.errorAndThrow(`SimulatorWindowCenter is expected to match \"{floatXPosition,floatYPosition}\" format (without spaces). ` +\n          `'${prefs.SimulatorWindowCenter}' is assigned instead.`);\n      }\n    }\n\n    if (!_.isUndefined(prefs.SimulatorWindowOrientation)) {\n      const acceptableValues = ['Portrait', 'LandscapeLeft', 'PortraitUpsideDown', 'LandscapeRight'];\n      if (acceptableValues.indexOf(prefs.SimulatorWindowOrientation) === -1) {\n        log.errorAndThrow(`SimulatorWindowOrientation is expected to be one of ${acceptableValues}. ` +\n          `'${prefs.SimulatorWindowOrientation}' is assigned instead.`);\n      }\n    }\n\n    if (!_.isUndefined(prefs.SimulatorWindowRotationAngle)) {\n      if (!_.isNumber(prefs.SimulatorWindowRotationAngle)) {\n        log.errorAndThrow(`SimulatorWindowRotationAngle is expected to be a valid number. ` +\n          `'${prefs.SimulatorWindowRotationAngle}' is assigned instead.`);\n      }\n    }\n  }\n\n  /**\n   * Update the common iOS Simulator preferences file with new values.\n   * It is necessary to restart the corresponding Simulator before\n   * these changes are applied.\n   *\n   * @param {DevicePreferences} devicePrefs [{}] - The mapping, which represents new device preference values\n   *                                               for the given Simulator.\n   * @param {CommonPreferences} commonPrefs [{}] - The mapping, which represents new common preference values\n   *                                               for all Simulators.\n   * @return {boolean} True if the preferences were successfully updated.\n   */\n  async updatePreferences (devicePrefs = {}, commonPrefs = {}) {\n    if (!_.isEmpty(devicePrefs)) {\n      log.debug(`Setting preferences of ${this.udid} Simulator to ${JSON.stringify(devicePrefs)}`);\n    }\n    if (!_.isEmpty(commonPrefs)) {\n      log.debug(`Setting common Simulator preferences to ${JSON.stringify(commonPrefs)}`);\n    }\n    const homeFolderPath = process.env.HOME;\n    if (!homeFolderPath) {\n      log.warn(`Cannot get the path to HOME folder from the process environment. ` +\n        `Ignoring Simulator preferences update.`);\n      return false;\n    }\n    this.verifyDevicePreferences(devicePrefs);\n    const plistPath = path.resolve(homeFolderPath, 'Library', 'Preferences', 'com.apple.iphonesimulator.plist');\n    return await preferencesPlistGuard.acquire(SimulatorXcode9.name, async () => {\n      const defaults = new NSUserDefaults(plistPath);\n      const prefsToUpdate = _.clone(commonPrefs);\n      try {\n        if (!_.isEmpty(devicePrefs)) {\n          let existingDevicePrefs;\n          const udidKey = this.udid.toUpperCase();\n          if (await fs.exists(plistPath)) {\n            const currentPlistContent = await defaults.asJson();\n            if (_.isPlainObject(currentPlistContent.DevicePreferences)\n                && _.isPlainObject(currentPlistContent.DevicePreferences[udidKey])) {\n              existingDevicePrefs = currentPlistContent.DevicePreferences[udidKey];\n            }\n          }\n          Object.assign(prefsToUpdate, {\n            DevicePreferences: {\n              [udidKey]: Object.assign({}, existingDevicePrefs || {}, devicePrefs)\n            }\n          });\n        }\n        await defaults.update(prefsToUpdate);\n        log.debug(`Updated ${this.udid} Simulator preferences at '${plistPath}' with ` +\n          JSON.stringify(prefsToUpdate));\n        return true;\n      } catch (e) {\n        log.warn(`Cannot update ${this.udid} Simulator preferences at '${plistPath}'. ` +\n          `Try to delete the file manually in order to reset it. Original error: ${e.message}`);\n        return false;\n      }\n    });\n  }\n\n  /**\n   * @inheritdoc\n   * @override\n   * @private\n   */\n  async _activateWindow () {\n    let selfName;\n    let selfSdk;\n    let bootedDevicesCount = 0;\n    for (const [sdk, deviceArr] of _.toPairs(await this.simctl.getDevices())) {\n      for (const {state, udid, name} of deviceArr) {\n        if (state === 'Booted') {\n          bootedDevicesCount++;\n        }\n        if (!selfName && udid === this.udid) {\n          selfSdk = sdk;\n          selfName = name;\n        }\n      }\n    }\n    if (bootedDevicesCount < 2) {\n      return await super._activateWindow();\n    }\n\n    // There are potentially more that one Simulator window\n    return `\n      tell application \"System Events\"\n        tell process \"Simulator\"\n          set frontmost to false\n          set frontmost to true\n          click (menu item 1 where (its name contains \"${selfName} \" and its name contains \"${selfSdk}\")) of menu 1 of menu bar item \"Window\" of menu bar 1\n        end tell\n      end tell\n    `;\n  }\n\n  /**\n   * @inheritdoc\n   * @override\n   */\n  async isBiometricEnrolled () {\n    const {stdout} = await this.simctl.spawnProcess([\n      'notifyutil',\n      '-g', ENROLLMENT_NOTIFICATION_RECEIVER\n    ]);\n    const match = (new RegExp(`${_.escapeRegExp(ENROLLMENT_NOTIFICATION_RECEIVER)}\\\\s+([01])`))\n      .exec(stdout);\n    if (!match) {\n      throw new Error(`Cannot parse biometric enrollment state from '${stdout}'`);\n    }\n    log.info(`Current biometric enrolled state for ${this.udid} Simulator: ${match[1]}`);\n    return match[1] === '1';\n  }\n\n  /**\n   * @inheritdoc\n   * @override\n   */\n  async enrollBiometric (isEnabled = true) {\n    log.debug(`Setting biometric enrolled state for ${this.udid} Simulator to '${isEnabled ? 'enabled' : 'disabled'}'`);\n    await this.simctl.spawnProcess([\n      'notifyutil',\n      '-s', ENROLLMENT_NOTIFICATION_RECEIVER, isEnabled ? '1' : '0'\n    ]);\n    await this.simctl.spawnProcess([\n      'notifyutil',\n      '-p', ENROLLMENT_NOTIFICATION_RECEIVER\n    ]);\n    if (await this.isBiometricEnrolled() !== isEnabled) {\n      throw new Error(`Cannot set biometric enrolled state for ${this.udid} Simulator to '${isEnabled ? 'enabled' : 'disabled'}'`);\n    }\n  }\n\n  /**\n   * Sends a notification to match/not match the particular biometric.\n   * @override\n   *\n   * @param {?boolean} shouldMatch [true] - Set it to true or false in order to emulate\n   * matching/not matching the corresponding biometric\n   * @param {?string} biometricName [touchId] - Either touchId or faceId (faceId is only available since iOS 11)\n   */\n  async sendBiometricMatch (shouldMatch = true, biometricName = 'touchId') {\n    const domainComponent = toBiometricDomainComponent(biometricName);\n    const domain = `com.apple.BiometricKit_Sim.${domainComponent}.${shouldMatch ? '' : 'no'}match`;\n    await this.simctl.spawnProcess([\n      'notifyutil',\n      '-p', domain\n    ]);\n    log.info(`Sent notification ${domain} to ${shouldMatch ? 'match' : 'not match'} ${biometricName} biometric ` +\n      `for ${this.udid} Simulator`);\n  }\n\n  /**\n   * @override\n   */\n  async getLaunchDaemonsRoot () {\n    const devRoot = await getDeveloperRoot();\n    return path.resolve(devRoot,\n      'Platforms/iPhoneOS.platform/Developer/Library/CoreSimulator/Profiles/Runtimes/iOS.simruntime/Contents/Resources/RuntimeRoot/System/Library/LaunchDaemons');\n  }\n\n  /**\n   * @typedef {Object} KeyboardOptions\n   * @property {!string} name The name of the keyboard locale, for example `en_US` or `de_CH`\n   * @property {!string} layout The keyboard layout, for example `QUERTY` or `Ukrainian`\n   * @property {?string} hardware Could either be `Automatic` or `null`\n   */\n\n  /**\n   * @typedef {Object} LanguageOptions\n   * @property {!string} name The name of the language, for example `de` or `zh-Hant-CN`\n   */\n\n  /**\n   * @typedef {Object} LocaleOptions\n   * @property {!string} name The name of the system locale, for example `de_CH` or `zh_CN`\n   * @property {?string} calendar Optional calendar format, for example `gregorian` or `persian`\n   */\n\n  /**\n   * @typedef {Object} LocalizationOptions\n   * @property {?KeyboardOptions} keyboard\n   * @property {?LanguageOptions} language\n   * @property {?LocaleOptions} locale\n   */\n\n  /**\n   * Change localization settings on the currently booted simulator\n   *\n   * @param {?LocalizationOptions} opts\n   * @throws {Error} If there was a failure while setting the preferences\n   * @returns {boolean} `true` if any of settings has been successfully changed\n   */\n  async configureLocalization (opts = {}) {\n    if (_.isEmpty(opts)) {\n      return false;\n    }\n\n    const { language, locale, keyboard } = opts;\n    const globalPrefs = {};\n    let keyboardId = null;\n    if (_.isPlainObject(keyboard)) {\n      const { name, layout, hardware } = keyboard;\n      if (!name) {\n        throw new Error(`The 'keyboard' field must have a valid name set`);\n      }\n      if (!layout) {\n        throw new Error(`The 'keyboard' field must have a valid layout set`);\n      }\n      keyboardId = `${name}@sw=${layout}`;\n      if (hardware) {\n        keyboardId += `;@hw=${hardware}`;\n      }\n      globalPrefs.AppleKeyboards = [keyboardId];\n    }\n    if (_.isPlainObject(language)) {\n      const { name } = language;\n      if (!name) {\n        throw new Error(`The 'language' field must have a valid name set`);\n      }\n      globalPrefs.AppleLanguages = [name];\n    }\n    if (_.isPlainObject(locale)) {\n      const { name, calendar } = locale;\n      if (!name) {\n        throw new Error(`The 'locale' field must have a valid name set`);\n      }\n      let localeId = name;\n      if (calendar) {\n        localeId += `@calendar=${calendar}`;\n      }\n      globalPrefs.AppleLocale = localeId;\n    }\n    if (_.isEmpty(globalPrefs)) {\n      return false;\n    }\n\n    const argChunks = generateDefaultsCommandArgs(globalPrefs, true);\n    await B.all(argChunks.map((args) => this.simctl.spawnProcess([\n      'defaults', 'write', '.GlobalPreferences.plist', ...args\n    ])));\n\n    if (keyboardId) {\n      const argChunks = generateDefaultsCommandArgs({\n        KeyboardsCurrentAndNext: [keyboardId],\n        KeyboardLastUsed: keyboardId,\n        KeyboardLastUsedForLanguage: { [keyboard.name]: keyboardId }\n      }, true);\n      await B.all(argChunks.map((args) => this.simctl.spawnProcess([\n        'defaults', 'write', 'com.apple.Preferences', ...args\n      ])));\n    }\n\n    return true;\n  }\n}\n\nexport default SimulatorXcode9;\n"],"mappings":"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"}