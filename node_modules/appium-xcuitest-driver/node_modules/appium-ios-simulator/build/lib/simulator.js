"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getSimulator = getSimulator;
require("source-map-support/register");
var _simulatorXcode = _interopRequireDefault(require("./simulator-xcode-8"));
var _simulatorXcode2 = _interopRequireDefault(require("./simulator-xcode-9"));
var _simulatorXcode3 = _interopRequireDefault(require("./simulator-xcode-9.3"));
var _simulatorXcode4 = _interopRequireDefault(require("./simulator-xcode-10"));
var _simulatorXcode5 = _interopRequireDefault(require("./simulator-xcode-11"));
var _simulatorXcode6 = _interopRequireDefault(require("./simulator-xcode-11.4"));
var _simulatorXcode7 = _interopRequireDefault(require("./simulator-xcode-14"));
var _utils = require("./utils");
var _appiumXcode = _interopRequireDefault(require("appium-xcode"));
var _logger = require("./logger");
const MIN_SUPPORTED_XCODE_VERSION = 8;
function handleUnsupportedXcode(xcodeVersion) {
  if (xcodeVersion.major < MIN_SUPPORTED_XCODE_VERSION) {
    throw new Error(`Tried to use an iOS simulator with xcode version ${xcodeVersion.versionString} but only Xcode version ` + `${MIN_SUPPORTED_XCODE_VERSION} and up are supported`);
  }
  return xcodeVersion;
}
async function getSimulator(udid, opts = {}) {
  let {
    platform = 'iOS',
    checkExistence = true,
    devicesSetPath
  } = opts;
  const xcodeVersion = handleUnsupportedXcode(await _appiumXcode.default.getVersion(true));
  if (checkExistence) {
    const simulatorInfo = await (0, _utils.getSimulatorInfo)(udid, {
      devicesSetPath
    });
    if (!simulatorInfo) {
      throw new Error(`No sim found with udid '${udid}'`);
    }
    platform = simulatorInfo.platform;
  }
  (0, _logger.setLoggingPlatform)(platform);
  _logger.log.info(`Constructing ${platform} simulator for Xcode version ${xcodeVersion.versionString} with udid '${udid}'`);
  let SimClass;
  switch (xcodeVersion.major) {
    case 8:
      SimClass = _simulatorXcode.default;
      break;
    case 9:
      SimClass = xcodeVersion.minor < 3 ? _simulatorXcode2.default : _simulatorXcode3.default;
      break;
    case 10:
      SimClass = _simulatorXcode4.default;
      break;
    case 11:
      SimClass = xcodeVersion.minor < 4 ? _simulatorXcode5.default : _simulatorXcode6.default;
      break;
    case 12:
    case 13:
      SimClass = _simulatorXcode6.default;
      break;
    case 14:
    default:
      SimClass = _simulatorXcode7.default;
      break;
  }
  const result = new SimClass(udid, xcodeVersion);
  if (devicesSetPath) {
    result.devicesSetPath = devicesSetPath;
  }
  return result;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJNSU5fU1VQUE9SVEVEX1hDT0RFX1ZFUlNJT04iLCJoYW5kbGVVbnN1cHBvcnRlZFhjb2RlIiwieGNvZGVWZXJzaW9uIiwibWFqb3IiLCJFcnJvciIsInZlcnNpb25TdHJpbmciLCJnZXRTaW11bGF0b3IiLCJ1ZGlkIiwib3B0cyIsInBsYXRmb3JtIiwiY2hlY2tFeGlzdGVuY2UiLCJkZXZpY2VzU2V0UGF0aCIsInhjb2RlIiwiZ2V0VmVyc2lvbiIsInNpbXVsYXRvckluZm8iLCJnZXRTaW11bGF0b3JJbmZvIiwic2V0TG9nZ2luZ1BsYXRmb3JtIiwibG9nIiwiaW5mbyIsIlNpbUNsYXNzIiwiU2ltdWxhdG9yWGNvZGU4IiwibWlub3IiLCJTaW11bGF0b3JYY29kZTkiLCJTaW11bGF0b3JYY29kZTkzIiwiU2ltdWxhdG9yWGNvZGUxMCIsIlNpbXVsYXRvclhjb2RlMTEiLCJTaW11bGF0b3JYY29kZTExXzQiLCJTaW11bGF0b3JYY29kZTE0IiwicmVzdWx0Il0sInNvdXJjZXMiOlsiLi4vLi4vbGliL3NpbXVsYXRvci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgU2ltdWxhdG9yWGNvZGU4IGZyb20gJy4vc2ltdWxhdG9yLXhjb2RlLTgnO1xuaW1wb3J0IFNpbXVsYXRvclhjb2RlOSBmcm9tICcuL3NpbXVsYXRvci14Y29kZS05JztcbmltcG9ydCBTaW11bGF0b3JYY29kZTkzIGZyb20gJy4vc2ltdWxhdG9yLXhjb2RlLTkuMyc7XG5pbXBvcnQgU2ltdWxhdG9yWGNvZGUxMCBmcm9tICcuL3NpbXVsYXRvci14Y29kZS0xMCc7XG5pbXBvcnQgU2ltdWxhdG9yWGNvZGUxMSBmcm9tICcuL3NpbXVsYXRvci14Y29kZS0xMSc7XG5pbXBvcnQgU2ltdWxhdG9yWGNvZGUxMV80IGZyb20gJy4vc2ltdWxhdG9yLXhjb2RlLTExLjQnO1xuaW1wb3J0IFNpbXVsYXRvclhjb2RlMTQgZnJvbSAnLi9zaW11bGF0b3IteGNvZGUtMTQnO1xuaW1wb3J0IHsgZ2V0U2ltdWxhdG9ySW5mbyB9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IHhjb2RlIGZyb20gJ2FwcGl1bS14Y29kZSc7XG5pbXBvcnQgeyBsb2csIHNldExvZ2dpbmdQbGF0Zm9ybSB9IGZyb20gJy4vbG9nZ2VyJztcblxuY29uc3QgTUlOX1NVUFBPUlRFRF9YQ09ERV9WRVJTSU9OID0gODtcblxuZnVuY3Rpb24gaGFuZGxlVW5zdXBwb3J0ZWRYY29kZSAoeGNvZGVWZXJzaW9uKSB7XG4gIGlmICh4Y29kZVZlcnNpb24ubWFqb3IgPCBNSU5fU1VQUE9SVEVEX1hDT0RFX1ZFUlNJT04pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBgVHJpZWQgdG8gdXNlIGFuIGlPUyBzaW11bGF0b3Igd2l0aCB4Y29kZSB2ZXJzaW9uICR7eGNvZGVWZXJzaW9uLnZlcnNpb25TdHJpbmd9IGJ1dCBvbmx5IFhjb2RlIHZlcnNpb24gYCArXG4gICAgICBgJHtNSU5fU1VQUE9SVEVEX1hDT0RFX1ZFUlNJT059IGFuZCB1cCBhcmUgc3VwcG9ydGVkYFxuICAgICk7XG4gIH1cbiAgcmV0dXJuIHhjb2RlVmVyc2lvbjtcbn1cblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBTaW11bGF0b3JMb29rdXBPcHRpb25zXG4gKiBAcHJvcGVydHkgez9zdHJpbmd9IHBsYXRmb3JtIFtpT1NdIC0gVGhlIG5hbWUgb2YgdGhlIHNpbXVsYXRvciBwbGF0Zm9ybVxuICogQHByb3BlcnR5IHs/Ym9vbGVhbn0gY2hlY2tFeGlzdGVuY2UgW3RydWVdIC0gU2V0IGl0IHRvIGBmYWxzZWAgaW4gb3JkZXIgdG9cbiAqIHNraXAgc2ltdWxhdG9yIGV4aXN0ZW5jZSB2ZXJpZmljYXRpb25cbiAqIEBwcm9wZXJ0eSB7P3N0cmluZ30gZGV2aWNlc1NldFBhdGggLSBUaGUgZnVsbCBwYXRoIHRvIHRoZSBkZXZpY2VzIHNldCB3aGVyZVxuICogdGhlIGN1cnJlbnQgc2ltdWxhdG9yIGlzIGxvY2F0ZWQuIGBudWxsYCB2YWx1ZSBtZWFucyB0aGF0IHRoZSBkZWZhdWx0IHBhdGggaXNcbiAqIHVzZWQsIHdoaWNoIGlzIHVzdWFsbHkgYH4vTGlicmFyeS9EZXZlbG9wZXIvQ29yZVNpbXVsYXRvci9EZXZpY2VzYFxuICovXG5cbi8qKlxuICogRmluZHMgYW5kIHJldHVybnMgdGhlIGNvcnJlc3BvbmRpbmcgU2ltdWxhdG9yIGluc3RhbmNlIGZvciB0aGUgZ2l2ZW4gSUQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVkaWQgLSBUaGUgSUQgb2YgYW4gZXhpc3RpbmcgU2ltdWxhdG9yLlxuICogQHBhcmFtIHs/U2ltdWxhdG9yTG9va3VwT3B0aW9uc30gb3B0c1xuICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBTaW11bGF0b3Igd2l0aCBnaXZlbiB1ZGlkIGRvZXMgbm90IGV4aXN0IGluIGRldmljZXMgbGlzdC5cbiAqICAgSWYgeW91IHdhbnQgdG8gY3JlYXRlIGEgbmV3IHNpbXVsYXRvciwgeW91IGNhbiB1c2UgdGhlIGBjcmVhdGVEZXZpY2UoKWAgbWV0aG9kIG9mXG4gKiAgIFtub2RlLXNpbWN0bF0oZ2l0aHViLmNvbS9hcHBpdW0vbm9kZS1zaW1jdGwpLlxuICogQHJldHVybiB7b2JqZWN0fSBTaW11bGF0b3Igb2JqZWN0IGFzc29jaWF0ZWQgd2l0aCB0aGUgdWRpZCBwYXNzZWQgaW4uXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGdldFNpbXVsYXRvciAodWRpZCwgb3B0cyA9IHt9KSB7XG4gIGxldCB7XG4gICAgcGxhdGZvcm0gPSAnaU9TJyxcbiAgICBjaGVja0V4aXN0ZW5jZSA9IHRydWUsXG4gICAgZGV2aWNlc1NldFBhdGgsXG4gIH0gPSBvcHRzO1xuXG4gIGNvbnN0IHhjb2RlVmVyc2lvbiA9IGhhbmRsZVVuc3VwcG9ydGVkWGNvZGUoYXdhaXQgeGNvZGUuZ2V0VmVyc2lvbih0cnVlKSk7XG4gIGlmIChjaGVja0V4aXN0ZW5jZSkge1xuICAgIGNvbnN0IHNpbXVsYXRvckluZm8gPSBhd2FpdCBnZXRTaW11bGF0b3JJbmZvKHVkaWQsIHtcbiAgICAgIGRldmljZXNTZXRQYXRoXG4gICAgfSk7XG5cbiAgICBpZiAoIXNpbXVsYXRvckluZm8pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgTm8gc2ltIGZvdW5kIHdpdGggdWRpZCAnJHt1ZGlkfSdgKTtcbiAgICB9XG5cbiAgICBwbGF0Zm9ybSA9IHNpbXVsYXRvckluZm8ucGxhdGZvcm07XG4gIH1cblxuICAvLyBtYWtlIHN1cmUgd2UgaGF2ZSB0aGUgcmlnaHQgbG9nZ2luZyBwcmVmaXhcbiAgc2V0TG9nZ2luZ1BsYXRmb3JtKHBsYXRmb3JtKTtcblxuICBsb2cuaW5mbyhcbiAgICBgQ29uc3RydWN0aW5nICR7cGxhdGZvcm19IHNpbXVsYXRvciBmb3IgWGNvZGUgdmVyc2lvbiAke3hjb2RlVmVyc2lvbi52ZXJzaW9uU3RyaW5nfSB3aXRoIHVkaWQgJyR7dWRpZH0nYFxuICApO1xuICBsZXQgU2ltQ2xhc3M7XG4gIHN3aXRjaCAoeGNvZGVWZXJzaW9uLm1ham9yKSB7XG4gICAgY2FzZSA4OlxuICAgICAgU2ltQ2xhc3MgPSBTaW11bGF0b3JYY29kZTg7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDk6XG4gICAgICBTaW1DbGFzcyA9IHhjb2RlVmVyc2lvbi5taW5vciA8IDMgPyBTaW11bGF0b3JYY29kZTkgOiBTaW11bGF0b3JYY29kZTkzO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxMDpcbiAgICAgIFNpbUNsYXNzID0gU2ltdWxhdG9yWGNvZGUxMDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMTE6XG4gICAgICBTaW1DbGFzcyA9IHhjb2RlVmVyc2lvbi5taW5vciA8IDQgPyBTaW11bGF0b3JYY29kZTExIDogU2ltdWxhdG9yWGNvZGUxMV80O1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxMjpcbiAgICBjYXNlIDEzOlxuICAgICAgU2ltQ2xhc3MgPSBTaW11bGF0b3JYY29kZTExXzQ7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDE0OlxuICAgIGRlZmF1bHQ6XG4gICAgICBTaW1DbGFzcyA9IFNpbXVsYXRvclhjb2RlMTQ7XG4gICAgICBicmVhaztcbiAgfVxuXG4gIGNvbnN0IHJlc3VsdCA9IG5ldyBTaW1DbGFzcyh1ZGlkLCB4Y29kZVZlcnNpb24pO1xuICBpZiAoZGV2aWNlc1NldFBhdGgpIHtcbiAgICByZXN1bHQuZGV2aWNlc1NldFBhdGggPSBkZXZpY2VzU2V0UGF0aDtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgeyBnZXRTaW11bGF0b3IgfTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBLE1BQU1BLDJCQUEyQixHQUFHLENBQUM7QUFFckMsU0FBU0Msc0JBQXNCLENBQUVDLFlBQVksRUFBRTtFQUM3QyxJQUFJQSxZQUFZLENBQUNDLEtBQUssR0FBR0gsMkJBQTJCLEVBQUU7SUFDcEQsTUFBTSxJQUFJSSxLQUFLLENBQ1osb0RBQW1ERixZQUFZLENBQUNHLGFBQWMsMEJBQXlCLEdBQ3ZHLEdBQUVMLDJCQUE0Qix1QkFBc0IsQ0FDdEQ7RUFDSDtFQUNBLE9BQU9FLFlBQVk7QUFDckI7QUFzQkEsZUFBZUksWUFBWSxDQUFFQyxJQUFJLEVBQUVDLElBQUksR0FBRyxDQUFDLENBQUMsRUFBRTtFQUM1QyxJQUFJO0lBQ0ZDLFFBQVEsR0FBRyxLQUFLO0lBQ2hCQyxjQUFjLEdBQUcsSUFBSTtJQUNyQkM7RUFDRixDQUFDLEdBQUdILElBQUk7RUFFUixNQUFNTixZQUFZLEdBQUdELHNCQUFzQixDQUFDLE1BQU1XLG9CQUFLLENBQUNDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztFQUN6RSxJQUFJSCxjQUFjLEVBQUU7SUFDbEIsTUFBTUksYUFBYSxHQUFHLE1BQU0sSUFBQUMsdUJBQWdCLEVBQUNSLElBQUksRUFBRTtNQUNqREk7SUFDRixDQUFDLENBQUM7SUFFRixJQUFJLENBQUNHLGFBQWEsRUFBRTtNQUNsQixNQUFNLElBQUlWLEtBQUssQ0FBRSwyQkFBMEJHLElBQUssR0FBRSxDQUFDO0lBQ3JEO0lBRUFFLFFBQVEsR0FBR0ssYUFBYSxDQUFDTCxRQUFRO0VBQ25DO0VBR0EsSUFBQU8sMEJBQWtCLEVBQUNQLFFBQVEsQ0FBQztFQUU1QlEsV0FBRyxDQUFDQyxJQUFJLENBQ0wsZ0JBQWVULFFBQVMsZ0NBQStCUCxZQUFZLENBQUNHLGFBQWMsZUFBY0UsSUFBSyxHQUFFLENBQ3pHO0VBQ0QsSUFBSVksUUFBUTtFQUNaLFFBQVFqQixZQUFZLENBQUNDLEtBQUs7SUFDeEIsS0FBSyxDQUFDO01BQ0pnQixRQUFRLEdBQUdDLHVCQUFlO01BQzFCO0lBQ0YsS0FBSyxDQUFDO01BQ0pELFFBQVEsR0FBR2pCLFlBQVksQ0FBQ21CLEtBQUssR0FBRyxDQUFDLEdBQUdDLHdCQUFlLEdBQUdDLHdCQUFnQjtNQUN0RTtJQUNGLEtBQUssRUFBRTtNQUNMSixRQUFRLEdBQUdLLHdCQUFnQjtNQUMzQjtJQUNGLEtBQUssRUFBRTtNQUNMTCxRQUFRLEdBQUdqQixZQUFZLENBQUNtQixLQUFLLEdBQUcsQ0FBQyxHQUFHSSx3QkFBZ0IsR0FBR0Msd0JBQWtCO01BQ3pFO0lBQ0YsS0FBSyxFQUFFO0lBQ1AsS0FBSyxFQUFFO01BQ0xQLFFBQVEsR0FBR08sd0JBQWtCO01BQzdCO0lBQ0YsS0FBSyxFQUFFO0lBQ1A7TUFDRVAsUUFBUSxHQUFHUSx3QkFBZ0I7TUFDM0I7RUFBTTtFQUdWLE1BQU1DLE1BQU0sR0FBRyxJQUFJVCxRQUFRLENBQUNaLElBQUksRUFBRUwsWUFBWSxDQUFDO0VBQy9DLElBQUlTLGNBQWMsRUFBRTtJQUNsQmlCLE1BQU0sQ0FBQ2pCLGNBQWMsR0FBR0EsY0FBYztFQUN4QztFQUNBLE9BQU9pQixNQUFNO0FBQ2YifQ==