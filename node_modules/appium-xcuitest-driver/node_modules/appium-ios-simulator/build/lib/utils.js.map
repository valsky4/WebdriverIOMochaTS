{"version":3,"file":"utils.js","names":["DEFAULT_SIM_SHUTDOWN_TIMEOUT_MS","SAFARI_STARTUP_TIMEOUT_MS","MOBILE_SAFARI_BUNDLE_ID","SIMULATOR_APP_NAME","APP_ACTIVATION_SCRIPT","pid","BIOMETRICS","touchId","faceId","toBiometricDomainComponent","name","Error","JSON","stringify","_","keys","pkill","appName","forceKill","args","push","exec","err","isUndefined","code","log","error","message","killAllSimulators","timeout","debug","xcodeVersion","getVersion","path","parse","major","ign","pids","stdout","trim","split","e","isEmpty","warn","join","map","remainingDevices","allSimsAreDown","devices","Simctl","getDevices","flatten","values","every","sim","state","toLowerCase","done","includes","sdk","udid","waitForCondition","waitMs","intervalMs","length","device","getSimulatorInfo","opts","devicesSetPath","toPairs","pair","reduce","a","b","concat","find","simExists","getDeveloperRoot","activateApp","stderr"],"sources":["../../lib/utils.js"],"sourcesContent":["import log from './logger';\nimport _ from 'lodash';\nimport { exec } from 'teen_process';\nimport { waitForCondition } from 'asyncbox';\nimport { getVersion } from 'appium-xcode';\nimport Simctl from 'node-simctl';\nimport path from 'path';\n\n\nconst DEFAULT_SIM_SHUTDOWN_TIMEOUT_MS = 30000;\nconst SAFARI_STARTUP_TIMEOUT_MS = 25 * 1000;\nconst MOBILE_SAFARI_BUNDLE_ID = 'com.apple.mobilesafari';\nconst SIMULATOR_APP_NAME = 'Simulator.app';\nconst APP_ACTIVATION_SCRIPT = (pid) => `\nuse framework \"Foundation\"\nuse framework \"AppKit\"\nuse scripting additions\n\nset theApp to current application's NSRunningApplication's runningApplicationWithProcessIdentifier:${pid}\nif theApp = null then\n\tlog \"Cannot find Simulator window under PID ${pid}. Is it running?\"\n\terror number 1\nend if\nset result to theApp's activateWithOptions:3\nif not result then\n\tlog \"Cannot activate Simulator window under PID ${pid}. Is it running?\"\n\terror number 1\nend if\n`;\n\n\nconst BIOMETRICS = {\n  touchId: 'fingerTouch',\n  faceId: 'pearl',\n};\n\nfunction toBiometricDomainComponent (name) {\n  if (!BIOMETRICS[name]) {\n    throw new Error(`'${name}' is not a valid biometric. Use one of: ${JSON.stringify(_.keys(BIOMETRICS))}`);\n  }\n  return BIOMETRICS[name];\n}\n\n// pgrep/pkill exit codes:\n// 0       One or more processes were matched.\n// 1       No processes were matched.\n// 2       Invalid options were specified on the command line.\n// 3       An internal error occurred.\nasync function pkill (appName, forceKill = false) {\n  let args = forceKill ? ['-9'] : [];\n  args.push('-x', appName);\n  try {\n    await exec('pkill', args);\n    return 0;\n  } catch (err) {\n    if (!_.isUndefined(err.code)) {\n      throw new Error(`Cannot forcefully terminate ${appName}. pkill error code: ${err.code}`);\n    }\n    log.error(`Received unexpected error while trying to kill ${appName}: ${err.message}`);\n    throw err;\n  }\n}\n\nasync function killAllSimulators (timeout = DEFAULT_SIM_SHUTDOWN_TIMEOUT_MS) {\n  log.debug('Killing all iOS Simulators');\n  const xcodeVersion = await getVersion(true);\n  const appName = path.parse(SIMULATOR_APP_NAME).name;\n\n  // later versions are slower to close\n  timeout = timeout * (xcodeVersion.major >= 8 ? 2 : 1);\n\n  try {\n    await exec('xcrun', ['simctl', 'shutdown', xcodeVersion.major > 8 ? 'all' : 'booted'], {timeout});\n  } catch (ign) {}\n\n  const pids = [];\n  try {\n    const {stdout} = await exec('pgrep', ['-f', `${appName}.app/Contents/MacOS/`]);\n    if (stdout.trim()) {\n      pids.push(...(stdout.trim().split(/\\s+/)));\n    }\n  } catch (e) {\n    if (e.code === 1) {\n      log.debug(`${appName} is not running. Continuing...`);\n      return;\n    }\n    if (_.isEmpty(pids)) {\n      log.warn(`pgrep error ${e.code} while detecting whether ${appName} is running. Trying to kill anyway.`);\n    }\n  }\n  if (!_.isEmpty(pids)) {\n    log.debug(`Killing processes: ${pids.join(', ')}`);\n    try {\n      await exec('kill', ['-9', ...(pids.map((pid) => `${pid}`))]);\n    } catch (ign) {}\n  }\n\n  log.debug(`Using pkill to kill application: ${appName}`);\n  try {\n    await pkill(appName, true);\n  } catch (ign) {}\n\n  // wait for all the devices to be shutdown before Continuing\n  // but only print out the failed ones when they are actually fully failed\n  let remainingDevices = [];\n  async function allSimsAreDown () {\n    remainingDevices = [];\n    let devices = await new Simctl().getDevices();\n    devices = _.flatten(_.values(devices));\n    return _.every(devices, (sim) => {\n      const state = sim.state.toLowerCase();\n      const done = ['shutdown', 'unavailable', 'disconnected'].includes(state);\n      if (!done) {\n        remainingDevices.push(`${sim.name} (${sim.sdk}, udid: ${sim.udid}) is still in state '${state}'`);\n      }\n      return done;\n    });\n  }\n  try {\n    await waitForCondition(allSimsAreDown, {\n      waitMs: timeout,\n      intervalMs: 200\n    });\n  } catch (err) {\n    if (remainingDevices.length > 0) {\n      log.warn(`The following devices are still not in the correct state after ${timeout} ms:`);\n      for (let device of remainingDevices) {\n        log.warn(`    ${device}`);\n      }\n    }\n    throw err;\n  }\n}\n\nasync function getSimulatorInfo (udid, opts = {}) {\n  const {\n    devicesSetPath\n  } = opts;\n  // see the README for github.com/appium/node-simctl for example output of getDevices()\n  let devices = await new Simctl({\n    devicesSetPath\n  }).getDevices();\n\n  devices = _.toPairs(devices)\n    .map((pair) => pair[1])\n    .reduce((a, b) => a.concat(b), []);\n  return _.find(devices, (sim) => sim.udid === udid);\n}\n\nasync function simExists (udid) {\n  return !!(await getSimulatorInfo(udid));\n}\n\nasync function getDeveloperRoot () {\n  const {stdout} = await exec('xcode-select', ['-p']);\n  return stdout.trim();\n}\n\n/**\n * Activates the app having the given process identifier.\n * See https://developer.apple.com/documentation/appkit/nsrunningapplication/1528725-activatewithoptions?language=objc\n * for more details.\n *\n * @param {number|string} pid App process identifier\n * @throws {Error} If the given PID is not running or there was a failure\n * while activating the app\n */\nasync function activateApp (pid) {\n  try {\n    await exec('osascript', ['-e', APP_ACTIVATION_SCRIPT(pid)]);\n  } catch (e) {\n    throw new Error(`Simulator window cannot be activated. Original error: ${e.stderr || e.message}`);\n  }\n}\n\nexport {\n  killAllSimulators,\n  simExists,\n  getSimulatorInfo,\n  toBiometricDomainComponent,\n  getDeveloperRoot,\n  activateApp,\n  SAFARI_STARTUP_TIMEOUT_MS,\n  MOBILE_SAFARI_BUNDLE_ID,\n  SIMULATOR_APP_NAME,\n};\n"],"mappings":"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"}