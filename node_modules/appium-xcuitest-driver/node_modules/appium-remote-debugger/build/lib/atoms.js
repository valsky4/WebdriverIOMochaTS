"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
exports.getAtom = getAtom;
exports.getScriptForAtom = getScriptForAtom;
require("source-map-support/register");
var _support = require("@appium/support");
var _path = _interopRequireDefault(require("path"));
var _lodash = _interopRequireDefault(require("lodash"));
var _logger = _interopRequireDefault(require("./logger"));
var _utils = require("./utils");
const ATOMS_CACHE = {};
async function getAtom(atomName) {
  if (!_lodash.default.has(ATOMS_CACHE, atomName)) {
    const atomFileName = _path.default.resolve((0, _utils.getModuleRoot)(), 'atoms', `${atomName}.js`);
    try {
      ATOMS_CACHE[atomName] = await _support.fs.readFile(atomFileName);
    } catch (e) {
      throw new Error(`Unable to load Atom '${atomName}' from file '${atomFileName}'`);
    }
  }
  return ATOMS_CACHE[atomName];
}
async function wrapScriptForFrame(script, frame) {
  _logger.default.debug(`Wrapping script for frame '${frame}'`);
  const elFromCache = await getAtom('get_element_from_cache');
  return `(function (window) { var document = window.document; ` + `return (${script}); })((${elFromCache.toString('utf8')})(${JSON.stringify(frame)}))`;
}
async function getScriptForAtom(atom, args, frames = [], asyncCallBack = null) {
  const atomSrc = await getAtom(atom);
  let script;
  if (frames.length > 0) {
    script = atomSrc;
    for (const frame of frames) {
      script = await wrapScriptForFrame(script, frame);
    }
  } else {
    _logger.default.debug(`Executing '${atom}' atom in default context`);
    script = `(${atomSrc})`;
  }
  args = args.map(JSON.stringify);
  if (asyncCallBack) {
    script += `(${args.join(',')}, ${asyncCallBack}, true)`;
  } else {
    script += `(${args.join(',')})`;
  }
  return script;
}
var _default = getAtom;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfc3VwcG9ydCIsInJlcXVpcmUiLCJfcGF0aCIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfbG9kYXNoIiwiX2xvZ2dlciIsIl91dGlscyIsIkFUT01TX0NBQ0hFIiwiZ2V0QXRvbSIsImF0b21OYW1lIiwiXyIsImhhcyIsImF0b21GaWxlTmFtZSIsInBhdGgiLCJyZXNvbHZlIiwiZ2V0TW9kdWxlUm9vdCIsImZzIiwicmVhZEZpbGUiLCJlIiwiRXJyb3IiLCJ3cmFwU2NyaXB0Rm9yRnJhbWUiLCJzY3JpcHQiLCJmcmFtZSIsImxvZyIsImRlYnVnIiwiZWxGcm9tQ2FjaGUiLCJ0b1N0cmluZyIsIkpTT04iLCJzdHJpbmdpZnkiLCJnZXRTY3JpcHRGb3JBdG9tIiwiYXRvbSIsImFyZ3MiLCJmcmFtZXMiLCJhc3luY0NhbGxCYWNrIiwiYXRvbVNyYyIsImxlbmd0aCIsIm1hcCIsImpvaW4iLCJfZGVmYXVsdCIsImV4cG9ydHMiLCJkZWZhdWx0Il0sInNvdXJjZXMiOlsiLi4vLi4vbGliL2F0b21zLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGZzIH0gZnJvbSAnQGFwcGl1bS9zdXBwb3J0JztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBsb2cgZnJvbSAnLi9sb2dnZXInO1xuaW1wb3J0IHsgZ2V0TW9kdWxlUm9vdCB9IGZyb20gJy4vdXRpbHMnO1xuXG5jb25zdCBBVE9NU19DQUNIRSA9IHt9O1xuXG5cbmFzeW5jIGZ1bmN0aW9uIGdldEF0b20gKGF0b21OYW1lKSB7XG4gIC8vIGNoZWNrIGlmIHdlIGhhdmUgYWxyZWFkeSBsb2FkZWQgYW5kIGNhY2hlZCB0aGlzIGF0b21cbiAgaWYgKCFfLmhhcyhBVE9NU19DQUNIRSwgYXRvbU5hbWUpKSB7XG4gICAgY29uc3QgYXRvbUZpbGVOYW1lID0gcGF0aC5yZXNvbHZlKGdldE1vZHVsZVJvb3QoKSwgJ2F0b21zJywgYCR7YXRvbU5hbWV9LmpzYCk7XG4gICAgdHJ5IHtcbiAgICAgIEFUT01TX0NBQ0hFW2F0b21OYW1lXSA9IGF3YWl0IGZzLnJlYWRGaWxlKGF0b21GaWxlTmFtZSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmFibGUgdG8gbG9hZCBBdG9tICcke2F0b21OYW1lfScgZnJvbSBmaWxlICcke2F0b21GaWxlTmFtZX0nYCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIEFUT01TX0NBQ0hFW2F0b21OYW1lXTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gd3JhcFNjcmlwdEZvckZyYW1lIChzY3JpcHQsIGZyYW1lKSB7XG4gIGxvZy5kZWJ1ZyhgV3JhcHBpbmcgc2NyaXB0IGZvciBmcmFtZSAnJHtmcmFtZX0nYCk7XG4gIGNvbnN0IGVsRnJvbUNhY2hlID0gYXdhaXQgZ2V0QXRvbSgnZ2V0X2VsZW1lbnRfZnJvbV9jYWNoZScpO1xuICByZXR1cm4gYChmdW5jdGlvbiAod2luZG93KSB7IHZhciBkb2N1bWVudCA9IHdpbmRvdy5kb2N1bWVudDsgYCArXG4gICAgICAgICBgcmV0dXJuICgke3NjcmlwdH0pOyB9KSgoJHtlbEZyb21DYWNoZS50b1N0cmluZygndXRmOCcpfSkoJHtKU09OLnN0cmluZ2lmeShmcmFtZSl9KSlgO1xufVxuXG5hc3luYyBmdW5jdGlvbiBnZXRTY3JpcHRGb3JBdG9tIChhdG9tLCBhcmdzLCBmcmFtZXMgPSBbXSwgYXN5bmNDYWxsQmFjayA9IG51bGwpIHtcbiAgY29uc3QgYXRvbVNyYyA9IGF3YWl0IGdldEF0b20oYXRvbSk7XG4gIGxldCBzY3JpcHQ7XG4gIGlmIChmcmFtZXMubGVuZ3RoID4gMCkge1xuICAgIHNjcmlwdCA9IGF0b21TcmM7XG4gICAgZm9yIChjb25zdCBmcmFtZSBvZiBmcmFtZXMpIHtcbiAgICAgIHNjcmlwdCA9IGF3YWl0IHdyYXBTY3JpcHRGb3JGcmFtZShzY3JpcHQsIGZyYW1lKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgbG9nLmRlYnVnKGBFeGVjdXRpbmcgJyR7YXRvbX0nIGF0b20gaW4gZGVmYXVsdCBjb250ZXh0YCk7XG4gICAgc2NyaXB0ID0gYCgke2F0b21TcmN9KWA7XG4gIH1cblxuICAvLyBhZGQgdGhlIGFyZ3VtZW50cywgYXMgc3RyaW5nc1xuICBhcmdzID0gYXJncy5tYXAoSlNPTi5zdHJpbmdpZnkpO1xuICBpZiAoYXN5bmNDYWxsQmFjaykge1xuICAgIHNjcmlwdCArPSBgKCR7YXJncy5qb2luKCcsJyl9LCAke2FzeW5jQ2FsbEJhY2t9LCB0cnVlKWA7XG4gIH0gZWxzZSB7XG4gICAgc2NyaXB0ICs9IGAoJHthcmdzLmpvaW4oJywnKX0pYDtcbiAgfVxuXG4gIHJldHVybiBzY3JpcHQ7XG59XG5cbmV4cG9ydCB7IGdldEF0b20sIGdldFNjcmlwdEZvckF0b20gfTtcbmV4cG9ydCBkZWZhdWx0IGdldEF0b207XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQSxJQUFBQSxRQUFBLEdBQUFDLE9BQUE7QUFDQSxJQUFBQyxLQUFBLEdBQUFDLHNCQUFBLENBQUFGLE9BQUE7QUFDQSxJQUFBRyxPQUFBLEdBQUFELHNCQUFBLENBQUFGLE9BQUE7QUFDQSxJQUFBSSxPQUFBLEdBQUFGLHNCQUFBLENBQUFGLE9BQUE7QUFDQSxJQUFBSyxNQUFBLEdBQUFMLE9BQUE7QUFFQSxNQUFNTSxXQUFXLEdBQUcsQ0FBQyxDQUFDO0FBR3RCLGVBQWVDLE9BQU9BLENBQUVDLFFBQVEsRUFBRTtFQUVoQyxJQUFJLENBQUNDLGVBQUMsQ0FBQ0MsR0FBRyxDQUFDSixXQUFXLEVBQUVFLFFBQVEsQ0FBQyxFQUFFO0lBQ2pDLE1BQU1HLFlBQVksR0FBR0MsYUFBSSxDQUFDQyxPQUFPLENBQUMsSUFBQUMsb0JBQWEsR0FBRSxFQUFFLE9BQU8sRUFBRyxHQUFFTixRQUFTLEtBQUksQ0FBQztJQUM3RSxJQUFJO01BQ0ZGLFdBQVcsQ0FBQ0UsUUFBUSxDQUFDLEdBQUcsTUFBTU8sV0FBRSxDQUFDQyxRQUFRLENBQUNMLFlBQVksQ0FBQztJQUN6RCxDQUFDLENBQUMsT0FBT00sQ0FBQyxFQUFFO01BQ1YsTUFBTSxJQUFJQyxLQUFLLENBQUUsd0JBQXVCVixRQUFTLGdCQUFlRyxZQUFhLEdBQUUsQ0FBQztJQUNsRjtFQUNGO0VBRUEsT0FBT0wsV0FBVyxDQUFDRSxRQUFRLENBQUM7QUFDOUI7QUFFQSxlQUFlVyxrQkFBa0JBLENBQUVDLE1BQU0sRUFBRUMsS0FBSyxFQUFFO0VBQ2hEQyxlQUFHLENBQUNDLEtBQUssQ0FBRSw4QkFBNkJGLEtBQU0sR0FBRSxDQUFDO0VBQ2pELE1BQU1HLFdBQVcsR0FBRyxNQUFNakIsT0FBTyxDQUFDLHdCQUF3QixDQUFDO0VBQzNELE9BQVEsdURBQXNELEdBQ3RELFdBQVVhLE1BQU8sVUFBU0ksV0FBVyxDQUFDQyxRQUFRLENBQUMsTUFBTSxDQUFFLEtBQUlDLElBQUksQ0FBQ0MsU0FBUyxDQUFDTixLQUFLLENBQUUsSUFBRztBQUM5RjtBQUVBLGVBQWVPLGdCQUFnQkEsQ0FBRUMsSUFBSSxFQUFFQyxJQUFJLEVBQUVDLE1BQU0sR0FBRyxFQUFFLEVBQUVDLGFBQWEsR0FBRyxJQUFJLEVBQUU7RUFDOUUsTUFBTUMsT0FBTyxHQUFHLE1BQU0xQixPQUFPLENBQUNzQixJQUFJLENBQUM7RUFDbkMsSUFBSVQsTUFBTTtFQUNWLElBQUlXLE1BQU0sQ0FBQ0csTUFBTSxHQUFHLENBQUMsRUFBRTtJQUNyQmQsTUFBTSxHQUFHYSxPQUFPO0lBQ2hCLEtBQUssTUFBTVosS0FBSyxJQUFJVSxNQUFNLEVBQUU7TUFDMUJYLE1BQU0sR0FBRyxNQUFNRCxrQkFBa0IsQ0FBQ0MsTUFBTSxFQUFFQyxLQUFLLENBQUM7SUFDbEQ7RUFDRixDQUFDLE1BQU07SUFDTEMsZUFBRyxDQUFDQyxLQUFLLENBQUUsY0FBYU0sSUFBSywyQkFBMEIsQ0FBQztJQUN4RFQsTUFBTSxHQUFJLElBQUdhLE9BQVEsR0FBRTtFQUN6QjtFQUdBSCxJQUFJLEdBQUdBLElBQUksQ0FBQ0ssR0FBRyxDQUFDVCxJQUFJLENBQUNDLFNBQVMsQ0FBQztFQUMvQixJQUFJSyxhQUFhLEVBQUU7SUFDakJaLE1BQU0sSUFBSyxJQUFHVSxJQUFJLENBQUNNLElBQUksQ0FBQyxHQUFHLENBQUUsS0FBSUosYUFBYyxTQUFRO0VBQ3pELENBQUMsTUFBTTtJQUNMWixNQUFNLElBQUssSUFBR1UsSUFBSSxDQUFDTSxJQUFJLENBQUMsR0FBRyxDQUFFLEdBQUU7RUFDakM7RUFFQSxPQUFPaEIsTUFBTTtBQUNmO0FBQUMsSUFBQWlCLFFBQUEsR0FHYzlCLE9BQU87QUFBQStCLE9BQUEsQ0FBQUMsT0FBQSxHQUFBRixRQUFBIn0=