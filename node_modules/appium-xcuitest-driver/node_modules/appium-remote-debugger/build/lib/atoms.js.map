{"version":3,"file":"atoms.js","names":["_support","require","_path","_interopRequireDefault","_lodash","_logger","_utils","ATOMS_CACHE","getAtom","atomName","_","has","atomFileName","path","resolve","getModuleRoot","fs","readFile","e","Error","wrapScriptForFrame","script","frame","log","debug","elFromCache","toString","JSON","stringify","getScriptForAtom","atom","args","frames","asyncCallBack","atomSrc","length","map","join","_default","exports","default"],"sources":["../../lib/atoms.js"],"sourcesContent":["import { fs } from '@appium/support';\nimport path from 'path';\nimport _ from 'lodash';\nimport log from './logger';\nimport { getModuleRoot } from './utils';\n\nconst ATOMS_CACHE = {};\n\n\nasync function getAtom (atomName) {\n  // check if we have already loaded and cached this atom\n  if (!_.has(ATOMS_CACHE, atomName)) {\n    const atomFileName = path.resolve(getModuleRoot(), 'atoms', `${atomName}.js`);\n    try {\n      ATOMS_CACHE[atomName] = await fs.readFile(atomFileName);\n    } catch (e) {\n      throw new Error(`Unable to load Atom '${atomName}' from file '${atomFileName}'`);\n    }\n  }\n\n  return ATOMS_CACHE[atomName];\n}\n\nasync function wrapScriptForFrame (script, frame) {\n  log.debug(`Wrapping script for frame '${frame}'`);\n  const elFromCache = await getAtom('get_element_from_cache');\n  return `(function (window) { var document = window.document; ` +\n         `return (${script}); })((${elFromCache.toString('utf8')})(${JSON.stringify(frame)}))`;\n}\n\nasync function getScriptForAtom (atom, args, frames = [], asyncCallBack = null) {\n  const atomSrc = await getAtom(atom);\n  let script;\n  if (frames.length > 0) {\n    script = atomSrc;\n    for (const frame of frames) {\n      script = await wrapScriptForFrame(script, frame);\n    }\n  } else {\n    log.debug(`Executing '${atom}' atom in default context`);\n    script = `(${atomSrc})`;\n  }\n\n  // add the arguments, as strings\n  args = args.map(JSON.stringify);\n  if (asyncCallBack) {\n    script += `(${args.join(',')}, ${asyncCallBack}, true)`;\n  } else {\n    script += `(${args.join(',')})`;\n  }\n\n  return script;\n}\n\nexport { getAtom, getScriptForAtom };\nexport default getAtom;\n"],"mappings":";;;;;;;;;;AAAA,IAAAA,QAAA,GAAAC,OAAA;AACA,IAAAC,KAAA,GAAAC,sBAAA,CAAAF,OAAA;AACA,IAAAG,OAAA,GAAAD,sBAAA,CAAAF,OAAA;AACA,IAAAI,OAAA,GAAAF,sBAAA,CAAAF,OAAA;AACA,IAAAK,MAAA,GAAAL,OAAA;AAEA,MAAMM,WAAW,GAAG,CAAC,CAAC;AAGtB,eAAeC,OAAOA,CAAEC,QAAQ,EAAE;EAEhC,IAAI,CAACC,eAAC,CAACC,GAAG,CAACJ,WAAW,EAAEE,QAAQ,CAAC,EAAE;IACjC,MAAMG,YAAY,GAAGC,aAAI,CAACC,OAAO,CAAC,IAAAC,oBAAa,GAAE,EAAE,OAAO,EAAG,GAAEN,QAAS,KAAI,CAAC;IAC7E,IAAI;MACFF,WAAW,CAACE,QAAQ,CAAC,GAAG,MAAMO,WAAE,CAACC,QAAQ,CAACL,YAAY,CAAC;IACzD,CAAC,CAAC,OAAOM,CAAC,EAAE;MACV,MAAM,IAAIC,KAAK,CAAE,wBAAuBV,QAAS,gBAAeG,YAAa,GAAE,CAAC;IAClF;EACF;EAEA,OAAOL,WAAW,CAACE,QAAQ,CAAC;AAC9B;AAEA,eAAeW,kBAAkBA,CAAEC,MAAM,EAAEC,KAAK,EAAE;EAChDC,eAAG,CAACC,KAAK,CAAE,8BAA6BF,KAAM,GAAE,CAAC;EACjD,MAAMG,WAAW,GAAG,MAAMjB,OAAO,CAAC,wBAAwB,CAAC;EAC3D,OAAQ,uDAAsD,GACtD,WAAUa,MAAO,UAASI,WAAW,CAACC,QAAQ,CAAC,MAAM,CAAE,KAAIC,IAAI,CAACC,SAAS,CAACN,KAAK,CAAE,IAAG;AAC9F;AAEA,eAAeO,gBAAgBA,CAAEC,IAAI,EAAEC,IAAI,EAAEC,MAAM,GAAG,EAAE,EAAEC,aAAa,GAAG,IAAI,EAAE;EAC9E,MAAMC,OAAO,GAAG,MAAM1B,OAAO,CAACsB,IAAI,CAAC;EACnC,IAAIT,MAAM;EACV,IAAIW,MAAM,CAACG,MAAM,GAAG,CAAC,EAAE;IACrBd,MAAM,GAAGa,OAAO;IAChB,KAAK,MAAMZ,KAAK,IAAIU,MAAM,EAAE;MAC1BX,MAAM,GAAG,MAAMD,kBAAkB,CAACC,MAAM,EAAEC,KAAK,CAAC;IAClD;EACF,CAAC,MAAM;IACLC,eAAG,CAACC,KAAK,CAAE,cAAaM,IAAK,2BAA0B,CAAC;IACxDT,MAAM,GAAI,IAAGa,OAAQ,GAAE;EACzB;EAGAH,IAAI,GAAGA,IAAI,CAACK,GAAG,CAACT,IAAI,CAACC,SAAS,CAAC;EAC/B,IAAIK,aAAa,EAAE;IACjBZ,MAAM,IAAK,IAAGU,IAAI,CAACM,IAAI,CAAC,GAAG,CAAE,KAAIJ,aAAc,SAAQ;EACzD,CAAC,MAAM;IACLZ,MAAM,IAAK,IAAGU,IAAI,CAACM,IAAI,CAAC,GAAG,CAAE,GAAE;EACjC;EAEA,OAAOhB,MAAM;AACf;AAAC,IAAAiB,QAAA,GAGc9B,OAAO;AAAA+B,OAAA,CAAAC,OAAA,GAAAF,QAAA"}