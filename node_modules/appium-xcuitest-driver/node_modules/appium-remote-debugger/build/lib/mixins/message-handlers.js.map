{"version":3,"file":"message-handlers.js","names":["_logger","_interopRequireDefault","require","_events","_utils","_lodash","onPageChange","err","appIdKey","pageDict","_","isEmpty","pageArray","pageArrayFromDict","useAppDictLock","done","appDict","resolve","isEqual","log","debug","_navigatingToPage","simpleStringify","emit","events","EVENT_PAGE_CHANGE","replace","onAppConnect","dict","WIRApplicationIdentifierKey","updateAppsWithDict","onAppDisconnect","getDebuggerAppKey","bundleId","connected","EVENT_DISCONNECT","onAppUpdate","onConnectedDriverList","drivers","connectedDrivers","WIRDriverDictionaryKey","JSON","stringify","onCurrentState","state","currentState","WIRAutomationAvailabilityKey","onConnectedApplicationList","apps","keys","join","newDict","values","id","entry","appInfoFromDict","skippedApps","includes","name","defaults","messageHandlers","_default","exports","default"],"sources":["../../../lib/mixins/message-handlers.js"],"sourcesContent":["import log from '../logger';\nimport events from './events';\nimport { pageArrayFromDict, getDebuggerAppKey, simpleStringify, appInfoFromDict } from '../utils';\nimport _ from 'lodash';\n\n\n/*\n * Generic callbacks used throughout the lifecycle of the Remote Debugger.\n * These will be added to the prototype.\n */\n\nasync function onPageChange (err, appIdKey, pageDict) {\n  if (_.isEmpty(pageDict)) {\n    return;\n  }\n\n  const pageArray = pageArrayFromDict(pageDict);\n\n  await this.useAppDictLock((done) => {\n    try {\n      // save the page dict for this app\n      if (this.appDict[appIdKey]) {\n        if (this.appDict[appIdKey].pageArray) {\n          if (this.appDict[appIdKey].pageArray.resolve) {\n            // pageDict is a pending promise, so resolve\n            this.appDict[appIdKey].pageArray.resolve();\n          } else {\n            // we have a pre-existing pageDict\n            if (_.isEqual(this.appDict[appIdKey].pageArray, pageArray)) {\n              log.debug(`Received page change notice for app '${appIdKey}' ` +\n                        `but the listing has not changed. Ignoring.`);\n              return done();\n            }\n          }\n        }\n        // keep track of the page dictionary\n        this.appDict[appIdKey].pageArray = pageArray;\n      }\n    } finally {\n      done();\n    }\n  });\n\n  if (this._navigatingToPage) {\n    // in the middle of navigating, so reporting a page change will cause problems\n    return;\n  }\n\n  log.debug(`Page changed: ${simpleStringify(pageDict, true)}`);\n\n  this.emit(events.EVENT_PAGE_CHANGE, {\n    appIdKey: appIdKey.replace('PID:', ''),\n    pageArray,\n  });\n}\n\nasync function onAppConnect (err, dict) {\n  const appIdKey = dict.WIRApplicationIdentifierKey;\n  log.debug(`Notified that new application '${appIdKey}' has connected`);\n  await this.useAppDictLock((done) => {\n    try {\n      this.updateAppsWithDict(dict);\n    } finally {\n      done();\n    }\n  });\n}\n\nfunction onAppDisconnect (err, dict) {\n  const appIdKey = dict.WIRApplicationIdentifierKey;\n  log.debug(`Application '${appIdKey}' disconnected. Removing from app dictionary.`);\n  log.debug(`Current app is '${this.appIdKey}'`);\n\n  // get rid of the entry in our app dictionary,\n  // since it is no longer available\n  delete this.appDict[appIdKey];\n\n  // if the disconnected app is the one we are connected to, try to find another\n  if (this.appIdKey === appIdKey) {\n    log.debug(`No longer have app id. Attempting to find new one.`);\n    this.appIdKey = getDebuggerAppKey(this.bundleId, this.appDict);\n  }\n\n  if (!this.appDict) {\n    // this means we no longer have any apps. what the what?\n    log.debug('Main app disconnected. Disconnecting altogether.');\n    this.connected = false;\n    this.emit(events.EVENT_DISCONNECT, true);\n  }\n}\n\nasync function onAppUpdate (err, dict) {\n  await this.useAppDictLock((done) => {\n    try {\n      this.updateAppsWithDict(dict);\n    } finally {\n      done();\n    }\n  });\n}\n\nfunction onConnectedDriverList (err, drivers) {\n  this.connectedDrivers = drivers.WIRDriverDictionaryKey;\n  log.debug(`Received connected driver list: ${JSON.stringify(this.connectedDrivers)}`);\n}\n\nfunction onCurrentState (err, state) {\n  this.currentState = state.WIRAutomationAvailabilityKey;\n  // This state changes when 'Remote Automation' in 'Settings app' > 'Safari' > 'Advanced' > 'Remote Automation' changes\n  // WIRAutomationAvailabilityAvailable or WIRAutomationAvailabilityNotAvailable\n  log.debug(`Received connected automation availability state: ${JSON.stringify(this.currentState)}`);\n}\n\nasync function onConnectedApplicationList (err, apps) {\n  log.debug(`Received connected applications list: ${_.keys(apps).join(', ')}`);\n\n  // translate the received information into an easier-to-manage\n  // hash with app id as key, and app info as value\n  let newDict = {};\n  for (const dict of _.values(apps)) {\n    const [id, entry] = appInfoFromDict(dict);\n    if (this.skippedApps.includes(entry.name)) {\n      continue;\n    }\n    newDict[id] = entry;\n  }\n  // update the object's list of apps\n  await this.useAppDictLock((done) => {\n    try {\n      _.defaults(this.appDict, newDict);\n    } finally {\n      done();\n    }\n  });\n}\n\nconst messageHandlers = {\n  onPageChange,\n  onAppConnect,\n  onAppDisconnect,\n  onAppUpdate,\n  onConnectedDriverList,\n  onCurrentState,\n  onConnectedApplicationList,\n};\n\nexport default messageHandlers;\n"],"mappings":"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"}