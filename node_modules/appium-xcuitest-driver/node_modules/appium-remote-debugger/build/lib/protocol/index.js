"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
exports.getProtocolCommand = getProtocolCommand;
require("source-map-support/register");
const OBJECT_GROUP = 'console';
const COMMANDS = {
  'Animation.enable': [],
  'Animation.disable': [],
  'ApplicationCache.enable': [],
  'ApplicationCache.disable': [],
  'ApplicationCache.getFramesWithManifests': [],
  'Browser.enable': [],
  'Browser.disable': [],
  'Canvas.enable': [],
  'Canvas.disable': [],
  'CPUProfiler.startTracking': [],
  'CPUProfiler.stopTracking': [],
  'Console.disable': [],
  'Console.enable': [],
  'Console.clearMessages': [],
  'Console.getLoggingChannels': [],
  'Console.setLoggingChannelLevel': ['source', 'level'],
  'CSS.enable': [],
  'CSS.disable': [],
  'Database.enable': [],
  'Database.disable': [],
  'Debugger.enable': [],
  'Debugger.disable': [],
  'Debugger.setAsyncStackTraceDepth': ['depth'],
  'Debugger.setBreakpointsActive': ['active'],
  'Debugger.setPauseForInternalScripts': ['shouldPause'],
  'Debugger.setPauseOnAssertions': ['enabled'],
  'Debugger.setPauseOnExceptions': ['state'],
  'DOM.getDocument': [],
  'DOMStorage.enable': [],
  'DOMStorage.disable': [],
  'DOMStorage.getDOMStorageItems': ['storageId'],
  'DOMStorage.clearDOMStorageItems': ['storageId'],
  'Heap.enable': [],
  'Heap.disable': [],
  'Heap.gc': [],
  'IndexedDB.enable': [],
  'IndexedDB.disable': [],
  'Inspector.enable': [],
  'Inspector.disable': [],
  'Inspector.initialized': [],
  'LayerTree.enable': [],
  'LayerTree.disable': [],
  'Memory.enable': [],
  'Memory.disable': [],
  'Network.disable': [],
  'Network.enable': [],
  'Network.setExtraHTTPHeaders': ['headers'],
  'Network.setResourceCachingDisabled': ['disabled'],
  'Network.setEmulatedConditions': ['bytesPerSecondLimit'],
  'Page.enable': [],
  'Page.disable': [],
  'Page.reload': ['ignoreCache', 'revalidateAllResources'],
  'Page.navigate': ['url'],
  'Page.overrideUserAgent': ['value'],
  'Page.overrideSetting': ['setting', 'value'],
  'Page.overrideUserPreference': ['name', 'value'],
  'Page.getCookies': [],
  'Page.setCookie': ['cookie'],
  'Page.deleteCookie': ['cookieName', 'url'],
  'Page.getResourceTree': [],
  'Page.getResourceContent': ['frameId', 'url'],
  'Page.searchInResource': ['frameId', 'url', 'query', 'caseSensitive', 'isRegex', 'requestId'],
  'Page.searchInResources': ['text', 'caseSensitive', 'isRegex'],
  'Page.setShowRulers': ['result'],
  'Page.setShowPaintRects': ['result'],
  'Page.setEmulatedMedia': ['media'],
  'Page.snapshotNode': ['nodeId'],
  'Page.snapshotRect': ['x', 'y', 'with', 'height', 'coordinateSystem'],
  'Page.archive': ['data'],
  'Page.setScreenSizeOverride': ['width', 'height'],
  'Runtime.awaitPromise': ['promiseObjectId', 'returnByValue', 'generatePreview', 'saveResult'],
  'Runtime.callFunctionOn': ['objectId', 'functionDeclaration', 'arguments', 'returnByValue'],
  'Runtime.evaluate': ['expression', 'returnByValue', 'contextId'],
  'Runtime.enable': [],
  'Runtime.disable': [],
  'ServiceWorker.getInitializationInfo': [],
  'Target.exists': [],
  'Timeline.enable': [],
  'Timeline.disable': [],
  'Timeline.start': [],
  'Timeline.stop': [],
  'Timeline.setAutoCaptureEnabled': ['enabled'],
  'Timeline.setInstruments': ['instruments'],
  'Worker.enable': [],
  'Worker.disable': [],
  'Worker.initialized': ['workerId'],
  'Worker.sendMessageToWorker': ['workerId', 'message']
};
function getCommand(id, method, params = {}) {
  return {
    id,
    method,
    params: Object.assign({
      objectGroup: OBJECT_GROUP,
      includeCommandLineAPI: true,
      doNotPauseOnExceptionsAndMuteConsole: false,
      emulateUserGesture: false,
      generatePreview: false,
      saveResult: false
    }, params)
  };
}
function getProtocolCommand(id, method, opts = {}) {
  const paramNames = COMMANDS[method];
  if (!paramNames) {
    throw new Error(`Unknown command: '${method}'`);
  }
  const params = paramNames.reduce(function (params, name) {
    params[name] = opts[name];
    return params;
  }, {});
  return getCommand(id, method, params);
}
var _default = getProtocolCommand;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,