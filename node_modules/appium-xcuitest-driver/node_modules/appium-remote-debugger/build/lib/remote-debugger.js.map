{"version":3,"file":"remote-debugger.js","names":["_events","require","_logger","_interopRequireDefault","_rpc","_utils","_mixins","_lodash","_bluebird","_path","_asyncLock","REMOTE_DEBUGGER_PORT","exports","SAFARI_BUNDLE_ID","RPC_RESPONSE_TIMEOUT_MS","PAGE_READY_TIMEOUT","GARBAGE_COLLECT_TIMEOUT","RemoteDebugger","EventEmitter","constructor","opts","log","info","path","resolve","getModuleRoot","version","bundleId","additionalBundleIds","platformVersion","isSafari","includeSafari","useNewSafari","pageLoadMs","host","port","socketPath","pageReadyTimeout","remoteDebugProxy","garbageCollectOnExecute","logFullResponse","logAllCommunication","logAllCommunicationHexDump","webInspectorMaxFrameLength","socketChunkSize","fullPageInitialization","debug","_","isNil","isInteger","_lock","AsyncLock","setup","appDict","appIdKey","pageIdKey","pageLoading","_navigatingToPage","allowNavigationWithoutReload","rpcClient","_clientEventListeners","teardown","removeAllListeners","EVENT_PAGE_CHANGE","EVENT_DISCONNECT","initRpcClient","RpcClientSimulator","messageProxy","isConnected","_this$rpcClient","launchSafari","send","startTimeline","fn","on","stopTimeline","addClientEventListener","eventName","listener","push","removeClientEventListener","off","startConsole","stopConsole","startNetwork","stopNetwork","allow","_allowNavigationWithoutReload","overrideUserAgent","value","getCookies","setCookie","cookie","deleteCookie","cookieName","url","garbageCollect","timeoutMs","checkParams","err","B","timeout","then","gcSuccess","catch","gcError","TimeoutError","message","useAppDictLock","acquire","skippedApps","_skippedApps","name","toPairs","mixins","prototype","event","events","_default","default"],"sources":["../../lib/remote-debugger.js"],"sourcesContent":["import { EventEmitter } from 'events';\nimport log from './logger';\nimport { RpcClientSimulator } from './rpc';\nimport { checkParams, getModuleRoot } from './utils';\nimport { mixins, events } from './mixins';\nimport _ from 'lodash';\nimport B from 'bluebird';\nimport path from 'path';\nimport AsyncLock from 'async-lock';\n\nconst REMOTE_DEBUGGER_PORT = 27753;\nconst SAFARI_BUNDLE_ID = 'com.apple.mobilesafari';\n\n/* How many milliseconds to wait for webkit to return a response before timing out */\nconst RPC_RESPONSE_TIMEOUT_MS = 5000;\n\nconst PAGE_READY_TIMEOUT = 5000;\n\nconst GARBAGE_COLLECT_TIMEOUT = 5000;\n\n\nclass RemoteDebugger extends EventEmitter {\n  /*\n   * The constructor takes an opts hash with the following properties:\n   *   - bundleId - id of the app being connected to\n   *   - additionalBundleIds - array of possible bundle ids that the inspector\n   *                           could return\n   *   - platformVersion - version of iOS\n   *   - useNewSafari - for web inspector, whether this is a new Safari instance\n   *   - pageLoadMs - the time, in ms, that should be waited for page loading\n   *   - host - the remote debugger's host address\n   *   - port - the remote debugger port through which to communicate\n   *   - logAllCommunication - log plists sent and received from Web Inspector\n   *   - logAllCommunicationHexDump - log communication from Web Inspector as hex dump\n   *   - socketChunkSize - size, in bytes, of chunks of data sent to Web Inspector (real device only)\n   *   - webInspectorMaxFrameLength - The maximum size in bytes of a single data frame\n   *                                  in the device communication protocol\n   */\n  constructor (opts = {}) {\n    super();\n\n    log.info(`Remote Debugger version ${require(path.resolve(getModuleRoot(), 'package.json')).version}`);\n\n    const {\n      bundleId,\n      additionalBundleIds = [],\n      platformVersion,\n      isSafari = true,\n      includeSafari = false,\n      useNewSafari = false,\n      pageLoadMs,\n      host,\n      port = REMOTE_DEBUGGER_PORT,\n      socketPath,\n      pageReadyTimeout = PAGE_READY_TIMEOUT,\n      remoteDebugProxy,\n      garbageCollectOnExecute = false,\n      logFullResponse = false,\n      logAllCommunication = false,\n      logAllCommunicationHexDump = false,\n      webInspectorMaxFrameLength,\n      socketChunkSize,\n      fullPageInitialization,\n    } = opts;\n\n    this.bundleId = bundleId;\n    this.additionalBundleIds = additionalBundleIds;\n    this.platformVersion = platformVersion;\n    this.isSafari = isSafari;\n    this.includeSafari = includeSafari;\n    this.useNewSafari = useNewSafari;\n    this.pageLoadMs = pageLoadMs;\n    log.debug(`useNewSafari --> ${this.useNewSafari}`);\n\n    this.garbageCollectOnExecute = garbageCollectOnExecute;\n\n    this.host = host;\n    this.port = port;\n    this.socketPath = socketPath;\n    this.remoteDebugProxy = remoteDebugProxy;\n    this.pageReadyTimeout = pageReadyTimeout;\n\n    this.logAllCommunication = _.isNil(logAllCommunication) ? !!logFullResponse : !!logAllCommunication;\n    this.logAllCommunicationHexDump = logAllCommunicationHexDump;\n    this.socketChunkSize = socketChunkSize;\n\n    if (_.isInteger(webInspectorMaxFrameLength)) {\n      this.webInspectorMaxFrameLength = webInspectorMaxFrameLength;\n    }\n\n    this.fullPageInitialization = fullPageInitialization;\n\n    this._lock = new AsyncLock();\n  }\n\n  setup () {\n    // app handling configuration\n    this.appDict = {};\n    this.appIdKey = null;\n    this.pageIdKey = null;\n    this.pageLoading = false;\n    this._navigatingToPage = false;\n    this.allowNavigationWithoutReload = false;\n\n    this.rpcClient = null;\n    this._clientEventListeners = {};\n  }\n\n  teardown () {\n    log.debug('Cleaning up listeners');\n\n    this.appDict = {};\n    this.appIdKey = null;\n    this.pageIdKey = null;\n    this.pageLoading = false;\n\n    this.rpcClient = null;\n\n    this.removeAllListeners(RemoteDebugger.EVENT_PAGE_CHANGE);\n    this.removeAllListeners(RemoteDebugger.EVENT_DISCONNECT);\n  }\n\n  initRpcClient () {\n    this.rpcClient = new RpcClientSimulator({\n      bundleId: this.bundleId,\n      platformVersion: this.platformVersion,\n      isSafari: this.isSafari,\n      host: this.host,\n      port: this.port,\n      socketPath: this.socketPath,\n      messageProxy: this.remoteDebugProxy,\n      logAllCommunication: this.logAllCommunication,\n      logAllCommunicationHexDump: this.logAllCommunicationHexDump,\n      fullPageInitialization: this.fullPageInitialization,\n      webInspectorMaxFrameLength: this.webInspectorMaxFrameLength,\n    });\n  }\n\n  get isConnected () {\n    return !!this.rpcClient?.isConnected;\n  }\n\n  async launchSafari () {\n    await this.rpcClient.send('launchApplication', {\n      bundleId: SAFARI_BUNDLE_ID\n    });\n  }\n\n  async startTimeline (fn) {\n    log.debug('Starting to record the timeline');\n    this.rpcClient.on('Timeline.eventRecorded', fn);\n    return await this.rpcClient.send('startTimeline', {\n      appIdKey: this.appIdKey,\n      pageIdKey: this.pageIdKey,\n    });\n  }\n\n  async stopTimeline () {\n    log.debug('Stopping to record the timeline');\n    await this.rpcClient.send('Timeline.stop', {\n      appIdKey: this.appIdKey,\n      pageIdKey: this.pageIdKey,\n    });\n  }\n\n  /*\n   * Keep track of the client event listeners so they can be removed\n   */\n  addClientEventListener (eventName, listener) {\n    this._clientEventListeners[eventName] = this._clientEventListeners[eventName] || [];\n    this._clientEventListeners[eventName].push(listener);\n    this.rpcClient.on(eventName, listener);\n  }\n\n  removeClientEventListener (eventName) {\n    for (const listener of (this._clientEventListeners[eventName] || [])) {\n      this.rpcClient.off(eventName, listener);\n    }\n  }\n\n  startConsole (listener) {\n    log.debug('Starting to listen for JavaScript console');\n    this.addClientEventListener('Console.messageAdded', listener);\n    this.addClientEventListener('Console.messageRepeatCountUpdated', listener);\n  }\n\n  stopConsole () {\n    log.debug('Stopping to listen for JavaScript console');\n    this.removeClientEventListener('Console.messageAdded');\n    this.removeClientEventListener('Console.messageRepeatCountUpdated');\n  }\n\n  startNetwork (listener) {\n    log.debug('Starting to listen for network events');\n    this.addClientEventListener('NetworkEvent', listener);\n  }\n\n  stopNetwork () {\n    log.debug('Stopping to listen for network events');\n    this.removeClientEventListener('NetworkEvent');\n  }\n\n  set allowNavigationWithoutReload (allow) {\n    this._allowNavigationWithoutReload = allow;\n  }\n\n  get allowNavigationWithoutReload () {\n    return this._allowNavigationWithoutReload;\n  }\n\n  // Potentially this does not work for mobile safari\n  async overrideUserAgent (value) {\n    log.debug('Setting overrideUserAgent');\n    return await this.rpcClient.send('Page.overrideUserAgent', {\n      appIdKey: this.appIdKey,\n      pageIdKey: this.pageIdKey,\n      value\n    });\n  }\n\n  async getCookies () {\n    log.debug('Getting cookies');\n    return await this.rpcClient.send('Page.getCookies', {\n      appIdKey: this.appIdKey,\n      pageIdKey: this.pageIdKey\n    });\n  }\n\n  async setCookie (cookie) {\n    log.debug('Setting cookie');\n    return await this.rpcClient.send('Page.setCookie', {\n      appIdKey: this.appIdKey,\n      pageIdKey: this.pageIdKey,\n      cookie\n    });\n  }\n\n  async deleteCookie (cookieName, url) {\n    log.debug(`Deleting cookie '${cookieName}' on '${url}'`);\n    return await this.rpcClient.send('Page.deleteCookie', {\n      appIdKey: this.appIdKey,\n      pageIdKey: this.pageIdKey,\n      cookieName,\n      url,\n    });\n  }\n\n  async garbageCollect (timeoutMs = GARBAGE_COLLECT_TIMEOUT) {\n    log.debug(`Garbage collecting with ${timeoutMs}ms timeout`);\n    try {\n      checkParams({appIdKey: this.appIdKey, pageIdKey: this.pageIdKey});\n    } catch (err) {\n      log.debug(`Unable to collect garbage at this time`);\n      return;\n    }\n\n    await B.resolve(this.rpcClient.send('Heap.gc', {\n      appIdKey: this.appIdKey,\n      pageIdKey: this.pageIdKey,\n    })).timeout(timeoutMs)\n    .then(function gcSuccess () { // eslint-disable-line promise/prefer-await-to-then\n      log.debug(`Garbage collection successful`);\n    }).catch(function gcError (err) { // eslint-disable-line promise/prefer-await-to-callbacks\n      if (err instanceof B.TimeoutError) {\n        log.debug(`Garbage collection timed out after ${timeoutMs}ms`);\n      } else {\n        log.debug(`Unable to collect garbage: ${err.message}`);\n      }\n    });\n  }\n\n  async useAppDictLock (fn) {\n    return await this._lock.acquire('appDict', fn);\n  }\n\n  get skippedApps () {\n    return this._skippedApps || [];\n  }\n}\n\nfor (const [name, fn] of _.toPairs(mixins)) {\n  RemoteDebugger.prototype[name] = fn;\n}\n\nfor (const [name, event] of _.toPairs(events)) {\n  RemoteDebugger[name] = event;\n}\n\nexport default RemoteDebugger;\nexport {\n  RemoteDebugger, REMOTE_DEBUGGER_PORT, RPC_RESPONSE_TIMEOUT_MS,\n};\n"],"mappings":"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"}