"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.RemoteMessages = void 0;
require("source-map-support/register");
var _lodash = _interopRequireDefault(require("lodash"));
var _protocol = _interopRequireDefault(require("../protocol"));
const OBJECT_GROUP = 'console';
const MINIMAL_COMMAND = 'getMinimalCommand';
const FULL_COMMAND = 'getFullCommand';
const DIRECT_COMMAND = 'getDirectCommand';
const COMMANDS = {
  'Page.getCookies': FULL_COMMAND,
  'Page.navigate': FULL_COMMAND,
  'Runtime.awaitPromise': FULL_COMMAND,
  'Runtime.callFunctionOn': FULL_COMMAND,
  'Runtime.evaluate': FULL_COMMAND,
  'Target.exists': DIRECT_COMMAND,
  'Timeline.start': FULL_COMMAND,
  'Timeline.stop': FULL_COMMAND
};
class RemoteMessages {
  constructor(isTargetBased = false) {
    this.isTargetBased = isTargetBased;
  }
  set isTargetBased(isTargetBased) {
    this._isTargetBased = isTargetBased;
  }
  get isTargetBased() {
    return this._isTargetBased;
  }
  setConnectionKey(connId) {
    return {
      __argument: {
        WIRConnectionIdentifierKey: connId
      },
      __selector: '_rpc_reportIdentifier:'
    };
  }
  connectToApp(connId, appIdKey) {
    return {
      __argument: {
        WIRConnectionIdentifierKey: connId,
        WIRApplicationIdentifierKey: appIdKey
      },
      __selector: '_rpc_forwardGetListing:'
    };
  }
  setSenderKey(connId, senderId, appIdKey, pageIdKey) {
    return {
      __argument: {
        WIRApplicationIdentifierKey: appIdKey,
        WIRConnectionIdentifierKey: connId,
        WIRSenderKey: senderId,
        WIRPageIdentifierKey: pageIdKey,
        WIRAutomaticallyPause: false
      },
      __selector: '_rpc_forwardSocketSetup:'
    };
  }
  indicateWebView(connId, appIdKey, pageIdKey, enabled) {
    return {
      __argument: {
        WIRApplicationIdentifierKey: appIdKey,
        WIRIndicateEnabledKey: _lodash.default.isNil(enabled) ? true : enabled,
        WIRConnectionIdentifierKey: connId,
        WIRPageIdentifierKey: pageIdKey
      },
      __selector: '_rpc_forwardIndicateWebView:'
    };
  }
  launchApplication(bundleId) {
    return {
      __argument: {
        WIRApplicationBundleIdentifierKey: bundleId
      },
      __selector: '_rpc_requestApplicationLaunch:'
    };
  }
  getFullCommand(opts = {}) {
    const {
      method,
      params,
      connId,
      senderId,
      appIdKey,
      pageIdKey,
      targetId,
      id
    } = opts;
    let realMethod;
    let realParams;
    if (this.isTargetBased) {
      realMethod = 'Target.sendMessageToTarget';
      realParams = {
        targetId,
        message: JSON.stringify({
          id,
          method,
          params: Object.assign({
            objectGroup: OBJECT_GROUP,
            includeCommandLineAPI: true,
            doNotPauseOnExceptionsAndMuteConsole: false,
            emulateUserGesture: false,
            generatePreview: false,
            saveResult: false
          }, params)
        })
      };
    } else {
      realMethod = method;
      realParams = Object.assign({
        objectGroup: OBJECT_GROUP,
        includeCommandLineAPI: true,
        doNotPauseOnExceptionsAndMuteConsole: false,
        emulateUserGesture: false
      }, params);
    }
    const plist = {
      __argument: {
        WIRSocketDataKey: {
          method: realMethod,
          params: realParams
        },
        WIRConnectionIdentifierKey: connId,
        WIRSenderKey: senderId,
        WIRApplicationIdentifierKey: appIdKey,
        WIRPageIdentifierKey: pageIdKey
      },
      __selector: '_rpc_forwardSocketData:'
    };
    return _lodash.default.omitBy(plist, _lodash.default.isNil);
  }
  getMinimalCommand(opts = {}) {
    const {
      method,
      params,
      connId,
      senderId,
      appIdKey,
      pageIdKey,
      targetId,
      id
    } = opts;
    let realMethod = method;
    let realParams = params;
    if (this.isTargetBased) {
      realMethod = 'Target.sendMessageToTarget';
      realParams = {
        targetId,
        message: JSON.stringify({
          id,
          method,
          params
        })
      };
    }
    const plist = {
      __argument: {
        WIRSocketDataKey: {
          method: realMethod,
          params: realParams
        },
        WIRConnectionIdentifierKey: connId,
        WIRSenderKey: senderId,
        WIRApplicationIdentifierKey: appIdKey,
        WIRPageIdentifierKey: pageIdKey
      },
      __selector: '_rpc_forwardSocketData:'
    };
    return _lodash.default.omitBy(plist, _lodash.default.isNil);
  }
  getDirectCommand(opts = {}) {
    const {
      method,
      params,
      connId,
      senderId,
      appIdKey,
      pageIdKey,
      id
    } = opts;
    const plist = {
      __argument: {
        WIRSocketDataKey: {
          id,
          method,
          params
        },
        WIRConnectionIdentifierKey: connId,
        WIRSenderKey: senderId,
        WIRApplicationIdentifierKey: appIdKey,
        WIRPageIdentifierKey: pageIdKey
      },
      __selector: '_rpc_forwardSocketData:'
    };
    return _lodash.default.omitBy(plist, _lodash.default.isNil);
  }
  getRemoteCommand(command, opts) {
    const {
      id,
      connId,
      appIdKey,
      senderId,
      pageIdKey,
      targetId
    } = opts;
    switch (command) {
      case 'setConnectionKey':
        return this.setConnectionKey(connId);
      case 'indicateWebView':
        return this.indicateWebView(connId, appIdKey, pageIdKey, opts.enabled);
      case 'connectToApp':
        return this.connectToApp(connId, appIdKey);
      case 'setSenderKey':
        return this.setSenderKey(connId, senderId, appIdKey, pageIdKey);
      case 'launchApplication':
        return this.launchApplication(opts.bundleId);
    }
    const builderFunction = COMMANDS[command] || MINIMAL_COMMAND;
    return this[builderFunction]({
      ...(0, _protocol.default)(id, command, opts),
      connId,
      appIdKey,
      senderId,
      pageIdKey,
      targetId
    });
  }
}
exports.RemoteMessages = RemoteMessages;
var _default = RemoteMessages;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,