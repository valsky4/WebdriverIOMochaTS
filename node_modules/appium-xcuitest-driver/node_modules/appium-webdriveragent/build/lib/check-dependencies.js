"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bundleWDASim = bundleWDASim;
exports.checkForDependencies = checkForDependencies;
require("source-map-support/register");
var _support = require("@appium/support");
var _lodash = _interopRequireDefault(require("lodash"));
var _teen_process = require("teen_process");
var _path = _interopRequireDefault(require("path"));
var _xcodebuild = _interopRequireDefault(require("./xcodebuild"));
var _constants = require("./constants");
var _utils = require("./utils");
var _logger = _interopRequireDefault(require("./logger"));
async function buildWDASim() {
  const args = ['-project', _path.default.join(_utils.BOOTSTRAP_PATH, 'WebDriverAgent.xcodeproj'), '-scheme', _constants.WDA_SCHEME, '-sdk', _constants.SDK_SIMULATOR, 'CODE_SIGN_IDENTITY=""', 'CODE_SIGNING_REQUIRED="NO"', 'GCC_TREAT_WARNINGS_AS_ERRORS=0'];
  await (0, _teen_process.exec)('xcodebuild', args);
}
async function checkForDependencies() {
  _logger.default.debug('Dependencies are up to date');
  return false;
}
async function bundleWDASim(xcodebuild, opts = {}) {
  if (xcodebuild && !_lodash.default.isFunction(xcodebuild.retrieveDerivedDataPath)) {
    xcodebuild = new _xcodebuild.default();
    opts = xcodebuild;
  }
  const derivedDataPath = await xcodebuild.retrieveDerivedDataPath();
  const wdaBundlePath = _path.default.join(derivedDataPath, 'Build', 'Products', 'Debug-iphonesimulator', _constants.WDA_RUNNER_APP);
  if (await _support.fs.exists(wdaBundlePath)) {
    return wdaBundlePath;
  }
  await buildWDASim(xcodebuild, opts);
  return wdaBundlePath;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfc3VwcG9ydCIsInJlcXVpcmUiLCJfbG9kYXNoIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl90ZWVuX3Byb2Nlc3MiLCJfcGF0aCIsIl94Y29kZWJ1aWxkIiwiX2NvbnN0YW50cyIsIl91dGlscyIsIl9sb2dnZXIiLCJidWlsZFdEQVNpbSIsImFyZ3MiLCJwYXRoIiwiam9pbiIsIkJPT1RTVFJBUF9QQVRIIiwiV0RBX1NDSEVNRSIsIlNES19TSU1VTEFUT1IiLCJleGVjIiwiY2hlY2tGb3JEZXBlbmRlbmNpZXMiLCJsb2ciLCJkZWJ1ZyIsImJ1bmRsZVdEQVNpbSIsInhjb2RlYnVpbGQiLCJvcHRzIiwiXyIsImlzRnVuY3Rpb24iLCJyZXRyaWV2ZURlcml2ZWREYXRhUGF0aCIsIlhjb2RlQnVpbGQiLCJkZXJpdmVkRGF0YVBhdGgiLCJ3ZGFCdW5kbGVQYXRoIiwiV0RBX1JVTk5FUl9BUFAiLCJmcyIsImV4aXN0cyJdLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9jaGVjay1kZXBlbmRlbmNpZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZnMgfSBmcm9tICdAYXBwaXVtL3N1cHBvcnQnO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IGV4ZWMgfSBmcm9tICd0ZWVuX3Byb2Nlc3MnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgWGNvZGVCdWlsZCBmcm9tICcuL3hjb2RlYnVpbGQnO1xuaW1wb3J0IHtcbiAgV0RBX1NDSEVNRSwgU0RLX1NJTVVMQVRPUiwgV0RBX1JVTk5FUl9BUFBcbn0gZnJvbSAnLi9jb25zdGFudHMnO1xuaW1wb3J0IHsgQk9PVFNUUkFQX1BBVEggfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCBsb2cgZnJvbSAnLi9sb2dnZXInO1xuXG5hc3luYyBmdW5jdGlvbiBidWlsZFdEQVNpbSAoKSB7XG4gIGNvbnN0IGFyZ3MgPSBbXG4gICAgJy1wcm9qZWN0JywgcGF0aC5qb2luKEJPT1RTVFJBUF9QQVRILCAnV2ViRHJpdmVyQWdlbnQueGNvZGVwcm9qJyksXG4gICAgJy1zY2hlbWUnLCBXREFfU0NIRU1FLFxuICAgICctc2RrJywgU0RLX1NJTVVMQVRPUixcbiAgICAnQ09ERV9TSUdOX0lERU5USVRZPVwiXCInLFxuICAgICdDT0RFX1NJR05JTkdfUkVRVUlSRUQ9XCJOT1wiJyxcbiAgICAnR0NDX1RSRUFUX1dBUk5JTkdTX0FTX0VSUk9SUz0wJyxcbiAgXTtcbiAgYXdhaXQgZXhlYygneGNvZGVidWlsZCcsIGFyZ3MpO1xufVxuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVxdWlyZS1hd2FpdFxuYXN5bmMgZnVuY3Rpb24gY2hlY2tGb3JEZXBlbmRlbmNpZXMgKCkge1xuICBsb2cuZGVidWcoJ0RlcGVuZGVuY2llcyBhcmUgdXAgdG8gZGF0ZScpO1xuICByZXR1cm4gZmFsc2U7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGJ1bmRsZVdEQVNpbSAoeGNvZGVidWlsZCwgb3B0cyA9IHt9KSB7XG4gIGlmICh4Y29kZWJ1aWxkICYmICFfLmlzRnVuY3Rpb24oeGNvZGVidWlsZC5yZXRyaWV2ZURlcml2ZWREYXRhUGF0aCkpIHtcbiAgICB4Y29kZWJ1aWxkID0gbmV3IFhjb2RlQnVpbGQoKTtcbiAgICBvcHRzID0geGNvZGVidWlsZDtcbiAgfVxuXG4gIGNvbnN0IGRlcml2ZWREYXRhUGF0aCA9IGF3YWl0IHhjb2RlYnVpbGQucmV0cmlldmVEZXJpdmVkRGF0YVBhdGgoKTtcbiAgY29uc3Qgd2RhQnVuZGxlUGF0aCA9IHBhdGguam9pbihkZXJpdmVkRGF0YVBhdGgsICdCdWlsZCcsICdQcm9kdWN0cycsICdEZWJ1Zy1pcGhvbmVzaW11bGF0b3InLCBXREFfUlVOTkVSX0FQUCk7XG4gIGlmIChhd2FpdCBmcy5leGlzdHMod2RhQnVuZGxlUGF0aCkpIHtcbiAgICByZXR1cm4gd2RhQnVuZGxlUGF0aDtcbiAgfVxuICBhd2FpdCBidWlsZFdEQVNpbSh4Y29kZWJ1aWxkLCBvcHRzKTtcbiAgcmV0dXJuIHdkYUJ1bmRsZVBhdGg7XG59XG5cbmV4cG9ydCB7IGNoZWNrRm9yRGVwZW5kZW5jaWVzLCBidW5kbGVXREFTaW0gfTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsSUFBQUEsUUFBQSxHQUFBQyxPQUFBO0FBQ0EsSUFBQUMsT0FBQSxHQUFBQyxzQkFBQSxDQUFBRixPQUFBO0FBQ0EsSUFBQUcsYUFBQSxHQUFBSCxPQUFBO0FBQ0EsSUFBQUksS0FBQSxHQUFBRixzQkFBQSxDQUFBRixPQUFBO0FBQ0EsSUFBQUssV0FBQSxHQUFBSCxzQkFBQSxDQUFBRixPQUFBO0FBQ0EsSUFBQU0sVUFBQSxHQUFBTixPQUFBO0FBR0EsSUFBQU8sTUFBQSxHQUFBUCxPQUFBO0FBQ0EsSUFBQVEsT0FBQSxHQUFBTixzQkFBQSxDQUFBRixPQUFBO0FBRUEsZUFBZVMsV0FBV0EsQ0FBQSxFQUFJO0VBQzVCLE1BQU1DLElBQUksR0FBRyxDQUNYLFVBQVUsRUFBRUMsYUFBSSxDQUFDQyxJQUFJLENBQUNDLHFCQUFjLEVBQUUsMEJBQTBCLENBQUMsRUFDakUsU0FBUyxFQUFFQyxxQkFBVSxFQUNyQixNQUFNLEVBQUVDLHdCQUFhLEVBQ3JCLHVCQUF1QixFQUN2Qiw0QkFBNEIsRUFDNUIsZ0NBQWdDLENBQ2pDO0VBQ0QsTUFBTSxJQUFBQyxrQkFBSSxFQUFDLFlBQVksRUFBRU4sSUFBSSxDQUFDO0FBQ2hDO0FBR0EsZUFBZU8sb0JBQW9CQSxDQUFBLEVBQUk7RUFDckNDLGVBQUcsQ0FBQ0MsS0FBSyxDQUFDLDZCQUE2QixDQUFDO0VBQ3hDLE9BQU8sS0FBSztBQUNkO0FBRUEsZUFBZUMsWUFBWUEsQ0FBRUMsVUFBVSxFQUFFQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLEVBQUU7RUFDbEQsSUFBSUQsVUFBVSxJQUFJLENBQUNFLGVBQUMsQ0FBQ0MsVUFBVSxDQUFDSCxVQUFVLENBQUNJLHVCQUF1QixDQUFDLEVBQUU7SUFDbkVKLFVBQVUsR0FBRyxJQUFJSyxtQkFBVSxFQUFFO0lBQzdCSixJQUFJLEdBQUdELFVBQVU7RUFDbkI7RUFFQSxNQUFNTSxlQUFlLEdBQUcsTUFBTU4sVUFBVSxDQUFDSSx1QkFBdUIsRUFBRTtFQUNsRSxNQUFNRyxhQUFhLEdBQUdqQixhQUFJLENBQUNDLElBQUksQ0FBQ2UsZUFBZSxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsdUJBQXVCLEVBQUVFLHlCQUFjLENBQUM7RUFDOUcsSUFBSSxNQUFNQyxXQUFFLENBQUNDLE1BQU0sQ0FBQ0gsYUFBYSxDQUFDLEVBQUU7SUFDbEMsT0FBT0EsYUFBYTtFQUN0QjtFQUNBLE1BQU1uQixXQUFXLENBQUNZLFVBQVUsRUFBRUMsSUFBSSxDQUFDO0VBQ25DLE9BQU9NLGFBQWE7QUFDdEIifQ==