{"version":3,"file":"utils.js","names":["_support","require","_teen_process","_path","_interopRequireDefault","_logger","_lodash","_constants","_bluebird","_fs2","_asyncbox","PROJECT_FILE","getModuleRoot","_","memoize","currentDir","path","dirname","resolve","__filename","isAtFsRoot","manifestPath","join","_fs","existsSync","JSON","parse","readFileSync","name","ign","length","Error","BOOTSTRAP_PATH","exports","getPIDsUsingPattern","pattern","args","stdout","exec","split","map","x","parseInt","filter","isInteger","err","log","debug","code","killAppUsingPattern","pgrepPattern","signals","signal","matchedPids","isEmpty","message","last","waitForCondition","pidCheckPromises","pid","then","catch","B","all","every","waitMs","intervalMs","isTvOS","platformName","toLower","PLATFORM_NAME_TVOS","replaceInFile","file","find","replace","contents","fs","readFile","newContents","writeFile","updateProjectFile","agentPath","newBundleId","projectFilePath","copyFile","RegExp","escapeRegExp","WDA_RUNNER_BUNDLE_ID","warn","resetProjectFile","exists","mv","setRealDeviceSecurity","keychainPath","keychainPassword","generateXcodeConfigFile","orgId","signingId","xcconfigPath","tempDir","setXctestrunFile","deviceInfo","sdkVersion","bootstrapPath","wdaRemotePort","xctestrunFilePath","getXctestrunFilePath","xctestRunContent","plist","parsePlistFile","updateWDAPort","getAdditionalRunContent","newXctestRunContent","merge","updatePlistFile","runner","EnvironmentVariables","USE_PORT","sdkBased","udid","platformBased","platformVersion","filePath","version","info","originalXctestrunFile","getXctestrunFileName","errorAndThrow","isRealDevice","killProcess","proc","isRunning","stop","includes","randomInt","low","high","Math","floor","random","getWDAUpgradeTimestamp","packageManifest","mtime","stat","getTime","resetTestProcesses","isSimulator","processPatterns","push","getPIDsListeningOnPort","port","filteringFunc","result","trim","e","stderr","isFunction"],"sources":["../../lib/utils.js"],"sourcesContent":["import { fs, tempDir, plist } from '@appium/support';\nimport { exec } from 'teen_process';\nimport path from 'path';\nimport log from './logger';\nimport _ from 'lodash';\nimport { WDA_RUNNER_BUNDLE_ID, PLATFORM_NAME_TVOS } from './constants';\nimport B from 'bluebird';\nimport _fs from 'fs';\nimport { waitForCondition } from 'asyncbox';\n\nconst PROJECT_FILE = 'project.pbxproj';\n\n/**\n * Calculates the path to the current module's root folder\n *\n * @returns {string} The full path to module root\n * @throws {Error} If the current module root folder cannot be determined\n */\nconst getModuleRoot = _.memoize(function getModuleRoot () {\n  let currentDir = path.dirname(path.resolve(__filename));\n  let isAtFsRoot = false;\n  while (!isAtFsRoot) {\n    const manifestPath = path.join(currentDir, 'package.json');\n    try {\n      if (_fs.existsSync(manifestPath) &&\n          JSON.parse(_fs.readFileSync(manifestPath, 'utf8')).name === 'appium-webdriveragent') {\n        return currentDir;\n      }\n    } catch (ign) {}\n    currentDir = path.dirname(currentDir);\n    isAtFsRoot = currentDir.length <= path.dirname(currentDir).length;\n  }\n  throw new Error('Cannot find the root folder of the appium-webdriveragent Node.js module');\n});\n\nexport const BOOTSTRAP_PATH = getModuleRoot();\n\nasync function getPIDsUsingPattern (pattern) {\n  const args = [\n    '-if', // case insensitive, full cmdline match\n    pattern,\n  ];\n  try {\n    const {stdout} = await exec('pgrep', args);\n    return stdout.split(/\\s+/)\n      .map((x) => parseInt(x, 10))\n      .filter(_.isInteger)\n      .map((x) => `${x}`);\n  } catch (err) {\n    log.debug(`'pgrep ${args.join(' ')}' didn't detect any matching processes. Return code: ${err.code}`);\n    return [];\n  }\n}\n\nasync function killAppUsingPattern (pgrepPattern) {\n  const signals = [2, 15, 9];\n  for (const signal of signals) {\n    const matchedPids = await getPIDsUsingPattern(pgrepPattern);\n    if (_.isEmpty(matchedPids)) {\n      return;\n    }\n    const args = [`-${signal}`, ...matchedPids];\n    try {\n      await exec('kill', args);\n    } catch (err) {\n      log.debug(`kill ${args.join(' ')} -> ${err.message}`);\n    }\n    if (signal === _.last(signals)) {\n      // there is no need to wait after SIGKILL\n      return;\n    }\n    try {\n      await waitForCondition(async () => {\n        const pidCheckPromises = matchedPids\n          .map((pid) => exec('kill', ['-0', pid])\n            // the process is still alive\n            .then(() => false)\n            // the process is dead\n            .catch(() => true)\n          );\n        return (await B.all(pidCheckPromises))\n          .every((x) => x === true);\n      }, {\n        waitMs: 1000,\n        intervalMs: 100,\n      });\n      return;\n    } catch (ign) {\n      // try the next signal\n    }\n  }\n}\n\n/**\n * Return true if the platformName is tvOS\n * @param {string} platformName The name of the platorm\n * @returns {boolean} Return true if the platformName is tvOS\n */\nfunction isTvOS (platformName) {\n  return _.toLower(platformName) === _.toLower(PLATFORM_NAME_TVOS);\n}\n\nasync function replaceInFile (file, find, replace) {\n  let contents = await fs.readFile(file, 'utf8');\n\n  let newContents = contents.replace(find, replace);\n  if (newContents !== contents) {\n    await fs.writeFile(file, newContents, 'utf8');\n  }\n}\n\n/**\n * Update WebDriverAgentRunner project bundle ID with newBundleId.\n * This method assumes project file is in the correct state.\n * @param {string} agentPath - Path to the .xcodeproj directory.\n * @param {string} newBundleId the new bundle ID used to update.\n */\nasync function updateProjectFile (agentPath, newBundleId) {\n  let projectFilePath = path.resolve(agentPath, PROJECT_FILE);\n  try {\n    // Assuming projectFilePath is in the correct state, create .old from projectFilePath\n    await fs.copyFile(projectFilePath, `${projectFilePath}.old`);\n    await replaceInFile(projectFilePath, new RegExp(_.escapeRegExp(WDA_RUNNER_BUNDLE_ID), 'g'), newBundleId); // eslint-disable-line no-useless-escape\n    log.debug(`Successfully updated '${projectFilePath}' with bundle id '${newBundleId}'`);\n  } catch (err) {\n    log.debug(`Error updating project file: ${err.message}`);\n    log.warn(`Unable to update project file '${projectFilePath}' with ` +\n      `bundle id '${newBundleId}'. WebDriverAgent may not start`);\n  }\n}\n\n/**\n * Reset WebDriverAgentRunner project bundle ID to correct state.\n * @param {string} agentPath - Path to the .xcodeproj directory.\n */\nasync function resetProjectFile (agentPath) {\n  const projectFilePath = path.join(agentPath, PROJECT_FILE);\n  try {\n    // restore projectFilePath from .old file\n    if (!await fs.exists(`${projectFilePath}.old`)) {\n      return; // no need to reset\n    }\n    await fs.mv(`${projectFilePath}.old`, projectFilePath);\n    log.debug(`Successfully reset '${projectFilePath}' with bundle id '${WDA_RUNNER_BUNDLE_ID}'`);\n  } catch (err) {\n    log.debug(`Error resetting project file: ${err.message}`);\n    log.warn(`Unable to reset project file '${projectFilePath}' with ` +\n      `bundle id '${WDA_RUNNER_BUNDLE_ID}'. WebDriverAgent has been ` +\n      `modified and not returned to the original state.`);\n  }\n}\n\nasync function setRealDeviceSecurity (keychainPath, keychainPassword) {\n  log.debug('Setting security for iOS device');\n  await exec('security', ['-v', 'list-keychains', '-s', keychainPath]);\n  await exec('security', ['-v', 'unlock-keychain', '-p', keychainPassword, keychainPath]);\n  await exec('security', ['set-keychain-settings', '-t', '3600', '-l', keychainPath]);\n}\n\nasync function generateXcodeConfigFile (orgId, signingId) {\n  log.debug(`Generating xcode config file for orgId '${orgId}' and signingId ` +\n            `'${signingId}'`);\n  const contents = `DEVELOPMENT_TEAM = ${orgId}\nCODE_SIGN_IDENTITY = ${signingId}\n`;\n  const xcconfigPath = await tempDir.path('appium-temp.xcconfig');\n  log.debug(`Writing xcode config file to ${xcconfigPath}`);\n  await fs.writeFile(xcconfigPath, contents, 'utf8');\n  return xcconfigPath;\n}\n\n/**\n * Information of the device under test\n * @typedef {Object} DeviceInfo\n * @property {string} isRealDevice - Equals to true if the current device is a real device\n * @property {string} udid - The device UDID.\n * @property {string} platformVersion - The platform version of OS.\n * @property {string} platformName - The platform name of iOS, tvOS\n*/\n/**\n * Creates xctestrun file per device & platform version.\n * We expects to have WebDriverAgentRunner_iphoneos${sdkVersion|platformVersion}-arm64.xctestrun for real device\n * and WebDriverAgentRunner_iphonesimulator${sdkVersion|platformVersion}-x86_64.xctestrun for simulator located @bootstrapPath\n * Newer Xcode (Xcode 10.0 at least) generate xctestrun file following sdkVersion.\n * e.g. Xcode which has iOS SDK Version 12.2 generate WebDriverAgentRunner_iphonesimulator.2-x86_64.xctestrun\n *      even if the cap has platform version 11.4\n *\n * @param {DeviceInfo} deviceInfo\n * @param {string} sdkVersion - The Xcode SDK version of OS.\n * @param {string} bootstrapPath - The folder path containing xctestrun file.\n * @param {string} wdaRemotePort - The remote port WDA is listening on.\n * @return {string} returns xctestrunFilePath for given device\n * @throws if WebDriverAgentRunner_iphoneos${sdkVersion|platformVersion}-arm64.xctestrun for real device\n * or WebDriverAgentRunner_iphonesimulator${sdkVersion|platformVersion}-x86_64.xctestrun for simulator is not found @bootstrapPath,\n * then it will throw file not found exception\n */\nasync function setXctestrunFile (deviceInfo, sdkVersion, bootstrapPath, wdaRemotePort) {\n  const xctestrunFilePath = await getXctestrunFilePath(deviceInfo, sdkVersion, bootstrapPath);\n  const xctestRunContent = await plist.parsePlistFile(xctestrunFilePath);\n  const updateWDAPort = getAdditionalRunContent(deviceInfo.platformName, wdaRemotePort);\n  const newXctestRunContent = _.merge(xctestRunContent, updateWDAPort);\n  await plist.updatePlistFile(xctestrunFilePath, newXctestRunContent, true);\n\n  return xctestrunFilePath;\n}\n\n/**\n * Return the WDA object which appends existing xctest runner content\n * @param {string} platformName - The name of the platform\n * @param {string} version - The Xcode SDK version of OS.\n * @return {object} returns a runner object which has USE_PORT\n */\nfunction getAdditionalRunContent (platformName, wdaRemotePort) {\n  const runner = `WebDriverAgentRunner${isTvOS(platformName) ? '_tvOS' : ''}`;\n\n  return {\n    [runner]: {\n      EnvironmentVariables: {\n        // USE_PORT must be 'string'\n        USE_PORT: `${wdaRemotePort}`\n      }\n    }\n  };\n}\n\n/**\n * Return the path of xctestrun if it exists\n * @param {DeviceInfo} deviceInfo\n * @param {string} sdkVersion - The Xcode SDK version of OS.\n * @param {string} bootstrapPath - The folder path containing xctestrun file.\n */\nasync function getXctestrunFilePath (deviceInfo, sdkVersion, bootstrapPath) {\n  // First try the SDK path, for Xcode 10 (at least)\n  const sdkBased = [\n    path.resolve(bootstrapPath, `${deviceInfo.udid}_${sdkVersion}.xctestrun`),\n    sdkVersion,\n  ];\n  // Next try Platform path, for earlier Xcode versions\n  const platformBased = [\n    path.resolve(bootstrapPath, `${deviceInfo.udid}_${deviceInfo.platformVersion}.xctestrun`),\n    deviceInfo.platformVersion,\n  ];\n\n  for (const [filePath, version] of [sdkBased, platformBased]) {\n    if (await fs.exists(filePath)) {\n      log.info(`Using '${filePath}' as xctestrun file`);\n      return filePath;\n    }\n    const originalXctestrunFile = path.resolve(bootstrapPath, getXctestrunFileName(deviceInfo, version));\n    if (await fs.exists(originalXctestrunFile)) {\n      // If this is first time run for given device, then first generate xctestrun file for device.\n      // We need to have a xctestrun file **per device** because we cant not have same wda port for all devices.\n      await fs.copyFile(originalXctestrunFile, filePath);\n      log.info(`Using '${filePath}' as xctestrun file copied by '${originalXctestrunFile}'`);\n      return filePath;\n    }\n  }\n\n  log.errorAndThrow(`If you are using 'useXctestrunFile' capability then you ` +\n    `need to have a xctestrun file (expected: ` +\n    `'${path.resolve(bootstrapPath, getXctestrunFileName(deviceInfo, sdkVersion))}')`);\n}\n\n\n/**\n * Return the name of xctestrun file\n * @param {DeviceInfo} deviceInfo\n * @param {string} version - The Xcode SDK version of OS.\n * @return {string} returns xctestrunFilePath for given device\n */\nfunction getXctestrunFileName (deviceInfo, version) {\n  return isTvOS(deviceInfo.platformName)\n    ? `WebDriverAgentRunner_tvOS_appletv${deviceInfo.isRealDevice ? `os${version}-arm64` : `simulator${version}-x86_64`}.xctestrun`\n    : `WebDriverAgentRunner_iphone${deviceInfo.isRealDevice ? `os${version}-arm64` : `simulator${version}-x86_64`}.xctestrun`;\n}\n\nasync function killProcess (name, proc) {\n  if (!proc || !proc.isRunning) {\n    return;\n  }\n\n  log.info(`Shutting down '${name}' process (pid '${proc.proc.pid}')`);\n\n  log.info(`Sending 'SIGTERM'...`);\n  try {\n    await proc.stop('SIGTERM', 1000);\n    return;\n  } catch (err) {\n    if (!err.message.includes(`Process didn't end after`)) {\n      throw err;\n    }\n    log.debug(`${name} process did not end in a timely fashion: '${err.message}'.`);\n  }\n\n  log.info(`Sending 'SIGKILL'...`);\n  try {\n    await proc.stop('SIGKILL');\n  } catch (err) {\n    if (err.message.includes('not currently running')) {\n      // the process ended but for some reason we were not informed\n      return;\n    }\n    throw err;\n  }\n}\n\n/**\n * Generate a random integer.\n *\n * @return {number} A random integer number in range [low, hight). `low`` is inclusive and `high` is exclusive.\n */\nfunction randomInt (low, high) {\n  return Math.floor(Math.random() * (high - low) + low);\n}\n\n/**\n * Retrieves WDA upgrade timestamp\n *\n * @return {?number} The UNIX timestamp of the package manifest. The manifest only gets modified on\n * package upgrade.\n */\nasync function getWDAUpgradeTimestamp () {\n  const packageManifest = path.resolve(getModuleRoot(), 'package.json');\n  if (!await fs.exists(packageManifest)) {\n    return null;\n  }\n  const {mtime} = await fs.stat(packageManifest);\n  return mtime.getTime();\n}\n\n/**\n * Kills running XCTest processes for the particular device.\n *\n * @param {string} udid - The device UDID.\n * @param {boolean} isSimulator - Equals to true if the current device is a Simulator\n */\nasync function resetTestProcesses (udid, isSimulator) {\n  const processPatterns = [`xcodebuild.*${udid}`];\n  if (isSimulator) {\n    processPatterns.push(`${udid}.*XCTRunner`);\n    // The pattern to find in case idb was used\n    processPatterns.push(`xctest.*${udid}`);\n  }\n  log.debug(`Killing running processes '${processPatterns.join(', ')}' for the device ${udid}...`);\n  await B.all(processPatterns.map(killAppUsingPattern));\n}\n\n/**\n * Get the IDs of processes listening on the particular system port.\n * It is also possible to apply additional filtering based on the\n * process command line.\n *\n * @param {string|number} port - The port number.\n * @param {?Function} filteringFunc - Optional lambda function, which\n *                                    receives command line string of the particular process\n *                                    listening on given port, and is expected to return\n *                                    either true or false to include/exclude the corresponding PID\n *                                    from the resulting array.\n * @returns {Array<string>} - the list of matched process ids.\n */\nasync function getPIDsListeningOnPort (port, filteringFunc = null) {\n  const result = [];\n  try {\n    // This only works since Mac OS X El Capitan\n    const {stdout} = await exec('lsof', ['-ti', `tcp:${port}`]);\n    result.push(...(stdout.trim().split(/\\n+/)));\n  } catch (e) {\n    if (e.code !== 1) {\n      // code 1 means no processes. Other errors need reporting\n      log.debug(`Error getting processes listening on port '${port}': ${e.stderr || e.message}`);\n    }\n    return result;\n  }\n\n  if (!_.isFunction(filteringFunc)) {\n    return result;\n  }\n  return await B.filter(result, async (pid) => {\n    let stdout;\n    try {\n      ({stdout} = await exec('ps', ['-p', pid, '-o', 'command']));\n    } catch (e) {\n      if (e.code === 1) {\n        // The process does not exist anymore, there's nothing to filter\n        return false;\n      }\n      throw e;\n    }\n    return await filteringFunc(stdout);\n  });\n}\n\nexport { updateProjectFile, resetProjectFile, setRealDeviceSecurity,\n  getAdditionalRunContent, getXctestrunFileName, generateXcodeConfigFile,\n  setXctestrunFile, getXctestrunFilePath, killProcess, randomInt,\n  getWDAUpgradeTimestamp, resetTestProcesses,\n  getPIDsListeningOnPort, killAppUsingPattern, isTvOS\n};\n"],"mappings":"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"}