"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getClangVersion = getClangVersion;
exports.getMaxIOSSDK = void 0;
exports.getMaxIOSSDKWithoutRetry = getMaxIOSSDKWithoutRetry;
exports.getMaxTVOSSDK = void 0;
exports.getMaxTVOSSDKWithoutRetry = getMaxTVOSSDKWithoutRetry;
exports.getPath = void 0;
exports.getPathFromDeveloperDir = getPathFromDeveloperDir;
exports.getPathFromXcodeSelect = getPathFromXcodeSelect;
exports.getVersion = getVersion;
require("source-map-support/register");
var _support = require("@appium/support");
var _path = _interopRequireDefault(require("path"));
var _asyncbox = require("asyncbox");
var _lodash = _interopRequireDefault(require("lodash"));
var _teen_process = require("teen_process");
var _semver = _interopRequireDefault(require("semver"));
var _helpers = require("./helpers");
const DEFAULT_NUMBER_OF_RETRIES = 2;
const XCODE_BUNDLE_ID = 'com.apple.dt.Xcode';
const log = _support.logger.getLogger('Xcode');
async function getPathFromXcodeSelect(timeout = _helpers.XCRUN_TIMEOUT) {
  const generateErrorMessage = async prefix => {
    const xcodePaths = await (0, _helpers.findAppPaths)(XCODE_BUNDLE_ID);
    if (_lodash.default.isEmpty(xcodePaths)) {
      return `${prefix}. Consider installing Xcode to address this issue.`;
    }
    const proposals = xcodePaths.map(p => `    sudo xcode-select -s "${_path.default.join(p, 'Contents', 'Developer')}"`);
    return `${prefix}. ` + `Consider running${proposals.length > 1 ? ' any of' : ''}:\n${'\n'.join(proposals)}\nto address this issue.`;
  };
  let stdout;
  try {
    ({
      stdout
    } = await (0, _teen_process.exec)('xcode-select', ['--print-path'], {
      timeout
    }));
  } catch (e) {
    log.errorAndThrow(`Cannot determine the path to Xcode by running 'xcode-select -p' command. ` + `Original error: ${e.stderr || e.message}`);
  }
  const developerRoot = stdout.replace(/\/$/, '').trim();
  if (!developerRoot) {
    log.errorAndThrow(await generateErrorMessage(`'xcode-select -p' returned an empty string`));
  }
  const {
    CFBundleIdentifier
  } = await (0, _helpers.readXcodePlist)(developerRoot);
  if (CFBundleIdentifier === XCODE_BUNDLE_ID) {
    return developerRoot;
  }
  log.errorAndThrow(await generateErrorMessage(`'${developerRoot}' is not a valid Xcode path`));
}
async function getPathFromDeveloperDir() {
  const developerRoot = process.env.DEVELOPER_DIR;
  const {
    CFBundleIdentifier
  } = await (0, _helpers.readXcodePlist)(developerRoot);
  if (CFBundleIdentifier === XCODE_BUNDLE_ID) {
    return developerRoot;
  }
  log.errorAndThrow(`The path to Xcode Developer dir '${developerRoot}' provided in DEVELOPER_DIR ` + `environment variable is not a valid path`);
}
const getPath = _lodash.default.memoize(function getPath(timeout = _helpers.XCRUN_TIMEOUT) {
  return process.env.DEVELOPER_DIR ? getPathFromDeveloperDir() : getPathFromXcodeSelect(timeout);
});
exports.getPath = getPath;
async function getVersionWithoutRetry(timeout = _helpers.XCRUN_TIMEOUT) {
  const developerPath = await getPath(timeout);
  const {
    CFBundleShortVersionString
  } = await (0, _helpers.readXcodePlist)(developerPath);
  return _semver.default.coerce(CFBundleShortVersionString);
}
const getVersionMemoized = _lodash.default.memoize(function getVersionMemoized(retries = DEFAULT_NUMBER_OF_RETRIES, timeout = _helpers.XCRUN_TIMEOUT) {
  return (0, _asyncbox.retry)(retries, getVersionWithoutRetry, timeout);
});
async function getVersion(parse = false, retries = DEFAULT_NUMBER_OF_RETRIES, timeout = _helpers.XCRUN_TIMEOUT) {
  const version = await getVersionMemoized(retries, timeout);
  const versionString = version.patch > 0 ? version.version : `${version.major}.${version.minor}`;
  if (!parse) {
    return versionString;
  }
  return {
    versionString,
    versionFloat: parseFloat(versionString),
    major: version.major,
    minor: version.minor,
    patch: version.patch > 0 ? version.patch : undefined,
    toString() {
      return versionString;
    }
  };
}
async function getClangVersion() {
  try {
    await _support.fs.which('clang');
  } catch (e) {
    log.info('Cannot find clang executable on the local system. ' + 'Are Xcode Command Line Tools installed?');
    return null;
  }
  const {
    stdout
  } = await (0, _teen_process.exec)('clang', ['--version']);
  const match = /clang-([0-9.]+)/.exec(stdout);
  if (!match) {
    log.info(`Cannot parse clang version from ${stdout}`);
    return null;
  }
  return match[1];
}
async function getMaxIOSSDKWithoutRetry(timeout = _helpers.XCRUN_TIMEOUT) {
  const args = ['--sdk', 'iphonesimulator', '--show-sdk-version'];
  const {
    stdout
  } = await (0, _helpers.runXcrunCommand)(args, timeout);
  const sdkVersion = stdout.trim();
  const match = /\d.\d/.exec(stdout);
  if (!match) {
    throw new Error(`xcrun returned a non-numeric iOS SDK version: '${sdkVersion}'`);
  }
  return sdkVersion;
}
const getMaxIOSSDK = _lodash.default.memoize(function getMaxIOSSDK(retries = DEFAULT_NUMBER_OF_RETRIES, timeout = _helpers.XCRUN_TIMEOUT) {
  return (0, _asyncbox.retry)(retries, getMaxIOSSDKWithoutRetry, timeout);
});
exports.getMaxIOSSDK = getMaxIOSSDK;
async function getMaxTVOSSDKWithoutRetry(timeout = _helpers.XCRUN_TIMEOUT) {
  const args = ['--sdk', 'appletvsimulator', '--show-sdk-version'];
  const {
    stdout
  } = await (0, _helpers.runXcrunCommand)(args, timeout);
  const sdkVersion = stdout.trim();
  if (isNaN(parseFloat(sdkVersion))) {
    throw new Error(`xcrun returned a non-numeric tvOS SDK version: '${sdkVersion}'`);
  }
  return sdkVersion;
}
const getMaxTVOSSDK = _lodash.default.memoize(function getMaxTVOSSDK(retries = DEFAULT_NUMBER_OF_RETRIES, timeout = _helpers.XCRUN_TIMEOUT) {
  return (0, _asyncbox.retry)(retries, getMaxTVOSSDKWithoutRetry, timeout);
});
exports.getMaxTVOSSDK = getMaxTVOSSDK;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,