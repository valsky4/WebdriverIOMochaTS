{"version":3,"file":"xcode.js","names":["DEFAULT_NUMBER_OF_RETRIES","XCODE_BUNDLE_ID","log","logger","getLogger","getPathFromXcodeSelect","timeout","XCRUN_TIMEOUT","generateErrorMessage","prefix","xcodePaths","findAppPaths","_","isEmpty","proposals","map","p","path","join","length","stdout","exec","e","errorAndThrow","stderr","message","developerRoot","replace","trim","CFBundleIdentifier","readXcodePlist","getPathFromDeveloperDir","process","env","DEVELOPER_DIR","getPath","memoize","getVersionWithoutRetry","developerPath","CFBundleShortVersionString","semver","coerce","getVersionMemoized","retries","retry","getVersion","parse","version","versionString","patch","major","minor","versionFloat","parseFloat","undefined","toString","getClangVersion","fs","which","info","match","getMaxIOSSDKWithoutRetry","args","runXcrunCommand","sdkVersion","Error","getMaxIOSSDK","getMaxTVOSSDKWithoutRetry","isNaN","getMaxTVOSSDK"],"sources":["../../lib/xcode.js"],"sourcesContent":["import { fs, logger } from '@appium/support';\nimport path from 'path';\nimport { retry } from 'asyncbox';\nimport _ from 'lodash';\nimport { exec } from 'teen_process';\nimport semver from 'semver';\nimport {\n  runXcrunCommand, findAppPaths, XCRUN_TIMEOUT, readXcodePlist\n} from './helpers';\n\nconst DEFAULT_NUMBER_OF_RETRIES = 2;\nconst XCODE_BUNDLE_ID = 'com.apple.dt.Xcode';\n\nconst log = logger.getLogger('Xcode');\n\n/**\n * Retrieves the full path to Xcode Developer subfolder via xcode-select\n *\n * @param {number} timeout The maximum timeout for xcode-select execution\n * @returns {Promise<string>} Full path to Xcode Developer subfolder\n * @throws {Error} If it is not possible to retrieve a proper path\n */\nasync function getPathFromXcodeSelect (timeout = XCRUN_TIMEOUT) {\n  const generateErrorMessage = async (prefix) => {\n    const xcodePaths = await findAppPaths(XCODE_BUNDLE_ID);\n    if (_.isEmpty(xcodePaths)) {\n      return `${prefix}. Consider installing Xcode to address this issue.`;\n    }\n\n    const proposals = xcodePaths.map((p) => `    sudo xcode-select -s \"${path.join(p, 'Contents', 'Developer')}\"`);\n    return `${prefix}. ` +\n      `Consider running${proposals.length > 1 ? ' any of' : ''}:\\n${'\\n'.join(proposals)}\\nto address this issue.`;\n  };\n\n  let stdout;\n  try {\n    ({stdout} = await exec('xcode-select', ['--print-path'], {timeout}));\n  } catch (e) {\n    log.errorAndThrow(`Cannot determine the path to Xcode by running 'xcode-select -p' command. ` +\n      `Original error: ${e.stderr || e.message}`);\n  }\n  // trim and remove trailing slash\n  const developerRoot = stdout.replace(/\\/$/, '').trim();\n  if (!developerRoot) {\n    log.errorAndThrow(await generateErrorMessage(`'xcode-select -p' returned an empty string`));\n  }\n  // xcode-select might also return a path to command line tools\n  const {CFBundleIdentifier} = await readXcodePlist(developerRoot);\n  if (CFBundleIdentifier === XCODE_BUNDLE_ID) {\n    return developerRoot;\n  }\n\n  log.errorAndThrow(await generateErrorMessage(`'${developerRoot}' is not a valid Xcode path`));\n}\n\n/**\n * Retrieves the full path to Xcode Developer subfolder via DEVELOPER_DIR environment variable\n *\n * @returns {Promise<string>} Full path to Xcode Developer subfolder\n * @throws {Error} If it is not possible to retrieve a proper path\n */\nasync function getPathFromDeveloperDir () {\n  const developerRoot = process.env.DEVELOPER_DIR;\n  const {CFBundleIdentifier} = await readXcodePlist(developerRoot);\n  if (CFBundleIdentifier === XCODE_BUNDLE_ID) {\n    return developerRoot;\n  }\n\n  log.errorAndThrow(`The path to Xcode Developer dir '${developerRoot}' provided in DEVELOPER_DIR ` +\n    `environment variable is not a valid path`);\n}\n\n/**\n * Retrieves the full path to Xcode Developer subfolder.\n * If DEVELOPER_DIR environment variable is provided then its value has a priority.\n *\n * @property {number} timeout [15000] The maximum timeout for xcode-select execution\n * @returns {string} Full path to Xcode Developer subfolder\n * @throws {Error} If there was an error while retrieving the path.\n */\nconst getPath = _.memoize(function getPath (timeout = XCRUN_TIMEOUT) {\n  return process.env.DEVELOPER_DIR ? getPathFromDeveloperDir() : getPathFromXcodeSelect(timeout);\n});\n\n/**\n * Retrieves Xcode version\n *\n * @param {number} timeout [15000] Timeout of milliseconds to wait for terminal commands.\n * @returns {Promise<import(\"semver\").SemVer | null>} Xcode version\n * @throws {Error} If there was a failure while retrieving the version\n */\nasync function getVersionWithoutRetry (timeout = XCRUN_TIMEOUT) {\n  const developerPath = await getPath(timeout);\n  // we want to read the CFBundleShortVersionString from Xcode's plist.\n  const {CFBundleShortVersionString} = await readXcodePlist(developerPath);\n  return semver.coerce(CFBundleShortVersionString);\n}\n\n/**\n * Retrieves Xcode version or the cached one if called more than once\n *\n * @param {number} retries [2] How many retries to apply for version retrieval\n * @param {number} timeout [15000] Timeout of milliseconds to wait for terminal commands\n * @returns {Promise<import(\"semver\").SemVer | null>} Xcode version\n * @throws {Error} If there was a failure while retrieving the version\n */\nconst getVersionMemoized = _.memoize(\n  function getVersionMemoized (retries = DEFAULT_NUMBER_OF_RETRIES, timeout = XCRUN_TIMEOUT) {\n    return retry(retries, getVersionWithoutRetry, timeout);\n  }\n);\n\n/**\n * @typedef {Object} XcodeVersion\n * @property {string} versionString Xcode version as a string\n * @property {number} versionFloat Xcode version as a float number\n * @property {number} major Major number of Xcode version\n * @property {number} minor Minor number of Xcode version\n * @property {number?} patch Patch number of Xcode version (if exists)\n */\n\n/**\n * Retrieves Xcode version\n *\n * @param {boolean} parse [false] Whether to parse the version to a XcodeVersion version\n * @param {number} retries [2] How many retries to apply for getting the version number\n * @param {number} timeout [15000] Timeout of milliseconds to wait for terminal commands\n * @returns {Promise<XcodeVersion | string>} Xcode version depending on the value of `parse` flag\n * @throws {Error} If there was a failure while retrieving the version\n */\nasync function getVersion (parse = false, retries = DEFAULT_NUMBER_OF_RETRIES, timeout = XCRUN_TIMEOUT) {\n  const version = await getVersionMemoized(retries, timeout);\n  // xcode version strings are not exactly semver string: patch versions of 0\n  // are removed (e.g., '10.0.0' => '10.0')\n  const versionString = version.patch > 0 ? version.version : `${version.major}.${version.minor}`;\n  if (!parse) {\n    return versionString;\n  }\n\n  return {\n    versionString,\n    versionFloat: parseFloat(versionString),\n    major: version.major,\n    minor: version.minor,\n    patch: version.patch > 0 ? version.patch : undefined,\n    toString () {\n      return versionString;\n    },\n  };\n}\n\n/**\n * Check https://trac.macports.org/wiki/XcodeVersionInfo\n * to see the actual mapping between clang and other components.\n *\n * @returns {Promise<string?>} The actual Clang version in x.x.x.x or x.x.x format,\n * which is supplied with Command Line Tools. `null` is returned\n * if CLT are not installed.\n */\nasync function getClangVersion () {\n  try {\n    await fs.which('clang');\n  } catch (e) {\n    log.info('Cannot find clang executable on the local system. ' +\n      'Are Xcode Command Line Tools installed?');\n    return null;\n  }\n  const {stdout} = await exec('clang', ['--version']);\n  const match = /clang-([0-9.]+)/.exec(stdout);\n  if (!match) {\n    log.info(`Cannot parse clang version from ${stdout}`);\n    return null;\n  }\n  return match[1];\n}\n\n/**\n * Retrieves the maximum version of iOS SDK supported by the installed Xcode\n *\n * @param {number} timeout [15000] Timeout of milliseconds to wait for terminal commands\n * @returns {string} The SDK version\n * @throws {Error} If the SDK version number cannot be determined\n */\nasync function getMaxIOSSDKWithoutRetry (timeout = XCRUN_TIMEOUT) {\n  const args = ['--sdk', 'iphonesimulator', '--show-sdk-version'];\n  const {stdout} = await runXcrunCommand(args, timeout);\n  const sdkVersion = stdout.trim();\n  const match = /\\d.\\d/.exec(stdout);\n  if (!match) {\n    throw new Error(`xcrun returned a non-numeric iOS SDK version: '${sdkVersion}'`);\n  }\n  return sdkVersion;\n}\n\n/**\n * Retrieves the maximum version of iOS SDK supported by the installed Xcode\n *\n * @param {number} timeout [15000] Timeout of milliseconds to wait for terminal commands\n * @param {number} retries [2] The maximum number of retries\n * @returns {string} The SDK version\n * @throws {Error} If the SDK version number cannot be determined\n */\nconst getMaxIOSSDK = _.memoize(\n  function getMaxIOSSDK (retries = DEFAULT_NUMBER_OF_RETRIES, timeout = XCRUN_TIMEOUT) {\n    return retry(retries, getMaxIOSSDKWithoutRetry, timeout);\n  }\n);\n\n/**\n * Retrieves the maximum version of tvOS SDK supported by the installed Xcode\n *\n * @param {number} timeout [15000] Timeout of milliseconds to wait for terminal commands\n * @returns {string} The SDK version\n * @throws {Error} If the SDK version number cannot be determined\n */\nasync function getMaxTVOSSDKWithoutRetry (timeout = XCRUN_TIMEOUT) {\n  const args = ['--sdk', 'appletvsimulator', '--show-sdk-version'];\n  const {stdout} = await runXcrunCommand(args, timeout);\n  const sdkVersion = stdout.trim();\n  if (isNaN(parseFloat(sdkVersion))) {\n    throw new Error(`xcrun returned a non-numeric tvOS SDK version: '${sdkVersion}'`);\n  }\n  return sdkVersion;\n}\n\n/**\n * Retrieves the maximum version of tvOS SDK supported by the installed Xcode\n *\n * @param {number} timeout [15000] Timeout of milliseconds to wait for terminal commands\n * @param {number} retries [2] The maximum number of retries\n * @returns {string} The SDK version\n * @throws {Error} If the SDK version number cannot be determined\n */\nconst getMaxTVOSSDK = _.memoize(\n  function getMaxTVOSSDK (retries = DEFAULT_NUMBER_OF_RETRIES, timeout = XCRUN_TIMEOUT) {\n    return retry(retries, getMaxTVOSSDKWithoutRetry, timeout);\n  }\n);\n\nexport {\n  getPath, getVersion, getMaxIOSSDK, getMaxIOSSDKWithoutRetry,\n  getMaxTVOSSDK, getMaxTVOSSDKWithoutRetry, getClangVersion,\n  getPathFromDeveloperDir, getPathFromXcodeSelect,\n};\n"],"mappings":"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"}