{"version":3,"file":"helpers.js","names":["_semver","_interopRequireDefault","require","DEFAULT_EXEC_TIMEOUT","exports","SIM_RUNTIME_NAME","normalizeVersion","version","semverVersion","semver","coerce","Error","major","minor","getXcrunBinary","process","env","XCRUN_BINARY"],"sources":["../../lib/helpers.js"],"sourcesContent":["import semver from 'semver';\n\nconst DEFAULT_EXEC_TIMEOUT = 10 * 60 * 1000; // ms\nconst SIM_RUNTIME_NAME = 'com.apple.CoreSimulator.SimRuntime.';\n\n/**\n * \"Normalize\" the version, since iOS uses 'major.minor' but the runtimes can\n * be 'major.minor.patch'\n *\n * @param {string} version - the string version\n * @return {string} The version in 'major.minor' form\n * @throws {Error} If the version not parseable by the `semver` package\n */\nfunction normalizeVersion (version) {\n  const semverVersion = semver.coerce(version);\n  if (!semverVersion) {\n    throw new Error(`Unable to parse version '${version}'`);\n  }\n  return `${semverVersion.major}.${semverVersion.minor}`;\n}\n\nexport {\n  DEFAULT_EXEC_TIMEOUT, SIM_RUNTIME_NAME,\n  normalizeVersion,\n};\n\nexport const getXcrunBinary = () => process.env.XCRUN_BINARY || 'xcrun';\n"],"mappings":";;;;;;;;;AAAA,IAAAA,OAAA,GAAAC,sBAAA,CAAAC,OAAA;AAEA,MAAMC,oBAAoB,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI;AAACC,OAAA,CAAAD,oBAAA,GAAAA,oBAAA;AAC5C,MAAME,gBAAgB,GAAG,qCAAqC;AAACD,OAAA,CAAAC,gBAAA,GAAAA,gBAAA;AAU/D,SAASC,gBAAgBA,CAAEC,OAAO,EAAE;EAClC,MAAMC,aAAa,GAAGC,eAAM,CAACC,MAAM,CAACH,OAAO,CAAC;EAC5C,IAAI,CAACC,aAAa,EAAE;IAClB,MAAM,IAAIG,KAAK,CAAE,4BAA2BJ,OAAQ,GAAE,CAAC;EACzD;EACA,OAAQ,GAAEC,aAAa,CAACI,KAAM,IAAGJ,aAAa,CAACK,KAAM,EAAC;AACxD;AAOO,MAAMC,cAAc,GAAGA,CAAA,KAAMC,OAAO,CAACC,GAAG,CAACC,YAAY,IAAI,OAAO;AAACb,OAAA,CAAAU,cAAA,GAAAA,cAAA"}