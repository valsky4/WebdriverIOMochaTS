{"version":3,"file":"simctl.js","names":["_lodash","_interopRequireDefault","require","_index","_which","_logger","_interopRequireWildcard","_helpers","_teen_process","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","SIMCTL_ENV_PREFIX","DEFAULT_OPTS","xcrun","path","execTimeout","DEFAULT_EXEC_TIMEOUT","logErrors","Simctl","constructor","opts","_","cloneDeep","defaultsDeep","keys","_udid","isNil","udid","_devicesSetPath","devicesSetPath","value","requireUdid","commandName","Error","requireXcrun","xcrunBinary","getXcrunBinary","which","e","exec","subcommand","args","env","asynchronous","encoding","defaults","mapKeys","startsWith","process","execOpts","timeout","SubProcess","tpExec","stderr","msg","trim","log","debug","LOG_PREFIX","message","exports","fnName","fn","toPairs","subcommands","_default"],"sources":["../../lib/simctl.js"],"sourcesContent":["import _ from 'lodash';\nimport subcommands from './subcommands/index.js';\nimport which from 'which';\nimport log, { LOG_PREFIX } from './logger';\nimport {\n  DEFAULT_EXEC_TIMEOUT, getXcrunBinary,\n} from './helpers';\nimport { exec as tpExec, SubProcess } from 'teen_process';\n\nconst SIMCTL_ENV_PREFIX = 'SIMCTL_CHILD_';\nconst DEFAULT_OPTS = {\n  xcrun: {\n    path: null,\n  },\n  execTimeout: DEFAULT_EXEC_TIMEOUT,\n  logErrors: true,\n};\n\n/**\n * @typedef {Object} ExecOpts\n * @property {Array.<string>} args [[]] - The list of additional subcommand arguments.\n * It's empty by default.\n * @property {Object} env [{}] - Environment variables mapping. All these variables\n * will be passed Simulator and used in the executing function.\n * @property {boolean} logErrors [true] - Set it to _false_ to throw execution errors\n * immediately without logging any additional information.\n * @property {boolean} asynchronous [false] - Whether to execute the given command\n * 'synchronously' or 'asynchronously'. Affects the returned result of the function.\n * @property {?string} encoding - Explicitly sets streams encoding for the executed\n * command input and outputs.\n */\n\n\n/**\n * @typedef {Object} SimctlOpts\n * @property {?Object} xcrun - The xcrun properties. Currently only one property\n * is supported, which is `path` and it by default contains `null`, which enforces\n * the instance to automatically detect the full path to `xcrun` tool and to throw\n * an exception if it cannot be detected. If the path is set upon instance creation\n * then it is going to be used by `exec` and no autodetection will happen.\n * @property {?number} execTimeout [600000] - The maximum number of milliseconds\n * to wait for single synchronous xcrun command.\n * @property {?boolean} logErrors [true] - Whether to wire xcrun error messages\n * into debug log before throwing them.\n * @property {?string} udid [null] - The unique identifier of the current device, which is\n * going to be implicitly passed to all methods, which require it. It can either be set\n * upon instance creation if it is already known in advance or later when/if needed via the\n * corresponding instance setter.\n * @property {?string} devicesSetPath - Full path to the set of devices that you want to manage.\n * By default this path usually equals to ~/Library/Developer/CoreSimulator/Devices\n */\n\n\nclass Simctl {\n  /**\n   * @param {?SimctlOpts} opts\n   */\n  constructor (opts = {}) {\n    opts = _.cloneDeep(opts);\n    _.defaultsDeep(opts, DEFAULT_OPTS);\n    for (const key of _.keys(DEFAULT_OPTS)) {\n      this[key] = opts[key];\n    }\n    this._udid = _.isNil(opts.udid) ? null : opts.udid;\n    this._devicesSetPath = _.isNil(opts.devicesSetPath) ? null : opts.devicesSetPath;\n  }\n\n  set udid (value) {\n    this._udid = value;\n  }\n\n  get udid () {\n    return this._udid;\n  }\n\n  set devicesSetPath (value) {\n    this._devicesSetPath = value;\n  }\n\n  get devicesSetPath () {\n    return this._devicesSetPath;\n  }\n\n  requireUdid (commandName = null) {\n    if (!this.udid) {\n      throw new Error(`udid is required to be set for ` +\n        (commandName ? `the '${commandName}' command` : 'this simctl command'));\n    }\n    return this.udid;\n  }\n\n  async requireXcrun () {\n    const xcrunBinary = getXcrunBinary();\n\n    if (!this.xcrun.path) {\n      try {\n        this.xcrun.path = await which(xcrunBinary);\n      } catch (e) {\n        throw new Error(`${xcrunBinary} tool has not been found in PATH. ` +\n          `Are Xcode developers tools installed?`);\n      }\n    }\n    return this.xcrun.path;\n  }\n\n  /**\n   * Execute the particular simctl command.\n   *\n   * @param {string} subcommand - One of available simctl subcommands.\n   *                           Execute `xcrun simctl` in Terminal to see the full list\n   *                           of available subcommands.\n   * @param {?ExecOpts} opts\n   * @return {ExecResult|SubProcess} Either the result of teen process's `exec` or\n   * `SubProcess` instance depending of `opts.asynchronous` value.\n   * @throws {Error} If the simctl subcommand command returns non-zero return code.\n   */\n  async exec (subcommand, opts = {}) {\n    let {\n      args = [],\n      env = {},\n      asynchronous = false,\n      encoding,\n      logErrors = true,\n    } = opts;\n    // run a particular simctl command\n    args = ['simctl',\n      ...(this.devicesSetPath ? ['--set', this.devicesSetPath] : []),\n      subcommand,\n      ...args\n    ];\n    // Prefix all passed in environment variables with 'SIMCTL_CHILD_', simctl\n    // will then pass these to the child (spawned) process.\n    env = _.defaults(\n      _.mapKeys(env,\n        (value, key) => _.startsWith(key, SIMCTL_ENV_PREFIX) ? key : `${SIMCTL_ENV_PREFIX}${key}`),\n      process.env);\n\n    const execOpts = {\n      env,\n      encoding,\n    };\n    if (!asynchronous) {\n      execOpts.timeout = this.execTimeout;\n    }\n    const xcrun = await this.requireXcrun();\n    try {\n      return asynchronous ? new SubProcess(xcrun, args, execOpts) : await tpExec(xcrun, args, execOpts);\n    } catch (e) {\n      if (!this.logErrors || !logErrors) {\n        // if we don't want to see the errors, just throw and allow the calling\n        // code do what it wants\n      } else if (e.stderr) {\n        const msg = `Error running '${subcommand}': ${e.stderr.trim()}`;\n        log.debug(LOG_PREFIX, msg);\n        e.message = msg;\n      } else {\n        log.debug(LOG_PREFIX, e.message);\n      }\n      throw e;\n    }\n  }\n}\n\n\n// add all the subcommands to the Simctl prototype\nfor (const [fnName, fn] of _.toPairs(subcommands)) {\n  Simctl.prototype[fnName] = fn;\n}\n\nexport default Simctl;\nexport { Simctl };\n"],"mappings":"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"}