{"version":3,"file":"appinfo.js","names":["commands","appInfo","bundleId","stdout","exec","args","requireUdid","trim","_default","exports","default"],"sources":["../../../lib/subcommands/appinfo.js"],"sourcesContent":["const commands = {};\n\n/**\n * Invoke hidden appinfo subcommand to get the information\n * about applications installed on Simulator, including\n * system applications ({@link getAppContainer} does not \"see\" such apps).\n * Simulator server should be in 'booted' state for this call to work properly.\n * The tool is only available since Xcode SDK 8.1\n *\n * @param {string} bundleId - The bundle identifier of the target application.\n * @return {string} The information about installed application.\n *\n * Example output for non-existing application container:\n * <pre>\n * {\n *   CFBundleIdentifier = \"com.apple.MobileSafari\";\n *   GroupContainers =     {\n *   };\n *   SBAppTags =     (\n *   );\n * }\n * </pre>\n *\n * Example output for an existing system application container:\n * <pre>\n * {\n *   ApplicationType = Hidden;\n *   Bundle = \"file:///Applications/Xcode-beta.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/Library/CoreSimulator/Profiles/Runtimes/iOS.simruntime/Contents/Resources/RuntimeRoot/System/Library/CoreServices/SpringBoard.app\";\n *   CFBundleDisplayName = SpringBoard;\n *   CFBundleExecutable = SpringBoard;\n *   CFBundleIdentifier = \"com.apple.springboard\";\n *   CFBundleName = SpringBoard;\n *   CFBundleVersion = 50;\n *   GroupContainers =     {\n *   };\n *   Path = \"/Applications/Xcode-beta.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/Library/CoreSimulator/Profiles/Runtimes/iOS.simruntime/Contents/Resources/RuntimeRoot/System/Library/CoreServices/SpringBoard.app\";\n *   SBAppTags =     (\n *   );\n * }\n * </pre>\n * @throws {Error} If the `udid` instance property is unset\n */\ncommands.appInfo = async function appInfo (bundleId) {\n  const {stdout} = await this.exec('appinfo', {\n    args: [this.requireUdid('appinfo'), bundleId],\n  });\n  return (stdout || '').trim();\n};\n\nexport default commands;\n"],"mappings":";;;;;;;AAAA,MAAMA,QAAQ,GAAG,CAAC,CAAC;AA0CnBA,QAAQ,CAACC,OAAO,GAAG,eAAeA,OAAOA,CAAEC,QAAQ,EAAE;EACnD,MAAM;IAACC;EAAM,CAAC,GAAG,MAAM,IAAI,CAACC,IAAI,CAAC,SAAS,EAAE;IAC1CC,IAAI,EAAE,CAAC,IAAI,CAACC,WAAW,CAAC,SAAS,CAAC,EAAEJ,QAAQ;EAC9C,CAAC,CAAC;EACF,OAAO,CAACC,MAAM,IAAI,EAAE,EAAEI,IAAI,EAAE;AAC9B,CAAC;AAAC,IAAAC,QAAA,GAEaR,QAAQ;AAAAS,OAAA,CAAAC,OAAA,GAAAF,QAAA"}