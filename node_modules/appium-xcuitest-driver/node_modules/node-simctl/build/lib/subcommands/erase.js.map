{"version":3,"file":"erase.js","names":["_asyncbox","require","commands","eraseDevice","timeout","retries","parseInt","retryInterval","exec","args","requireUdid","_default","exports","default"],"sources":["../../../lib/subcommands/erase.js"],"sourcesContent":["import { retryInterval } from 'asyncbox';\n\nconst commands = {};\n\n/**\n * Reset the content and settings of the particular Simulator.\n * It is required that Simulator is in _shutdown_ state.\n *\n * @param {number} timeout [10000] - The maximum number of milliseconds to wait\n *                                   unit device reset is completed.\n * @throws {Error} If the corresponding simctl subcommand command\n *                 returns non-zero return code.\n * @throws {Error} If the `udid` instance property is unset\n */\ncommands.eraseDevice = async function eraseDevice (timeout = 1000) {\n  // retry erase with a sleep in between because it's flakey\n  const retries = parseInt(timeout / 200, 10);\n  await retryInterval(retries, 200,\n    async () => await this.exec('erase', {\n      args: [this.requireUdid('erase')]\n    })\n  );\n};\n\nexport default commands;\n"],"mappings":";;;;;;;AAAA,IAAAA,SAAA,GAAAC,OAAA;AAEA,MAAMC,QAAQ,GAAG,CAAC,CAAC;AAYnBA,QAAQ,CAACC,WAAW,GAAG,eAAeA,WAAWA,CAAEC,OAAO,GAAG,IAAI,EAAE;EAEjE,MAAMC,OAAO,GAAGC,QAAQ,CAACF,OAAO,GAAG,GAAG,EAAE,EAAE,CAAC;EAC3C,MAAM,IAAAG,uBAAa,EAACF,OAAO,EAAE,GAAG,EAC9B,YAAY,MAAM,IAAI,CAACG,IAAI,CAAC,OAAO,EAAE;IACnCC,IAAI,EAAE,CAAC,IAAI,CAACC,WAAW,CAAC,OAAO,CAAC;EAClC,CAAC,CAAC,CACH;AACH,CAAC;AAAC,IAAAC,QAAA,GAEaT,QAAQ;AAAAU,OAAA,CAAAC,OAAA,GAAAF,QAAA"}