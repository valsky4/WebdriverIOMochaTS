"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("source-map-support/register");
var _os = _interopRequireDefault(require("os"));
var _promises = _interopRequireDefault(require("fs/promises"));
var _uuid = require("uuid");
var _path = _interopRequireDefault(require("path"));
var _lodash = _interopRequireDefault(require("lodash"));
var _rimraf = _interopRequireDefault(require("rimraf"));
const commands = {};
async function handleRawPayload(payload, onPayloadStored) {
  const filePath = _path.default.resolve(_os.default.tmpdir(), `${(0, _uuid.v4)()}.pem`);
  try {
    if (_lodash.default.isBuffer(payload)) {
      await _promises.default.writeFile(filePath, payload);
    } else {
      await _promises.default.writeFile(filePath, payload, 'utf8');
    }
    await onPayloadStored(filePath);
  } finally {
    await (0, _rimraf.default)(filePath);
  }
}
commands.addRootCertificate = async function addRootCertificate(cert, opts = {}) {
  const {
    raw = false
  } = opts;
  const execMethod = async certPath => await this.exec('keychain', {
    args: [this.requireUdid('keychain add-root-cert'), 'add-root-cert', certPath]
  });
  if (raw) {
    await handleRawPayload(cert, execMethod);
  } else {
    await execMethod(cert);
  }
};
commands.addCertificate = async function addCertificate(cert, opts = {}) {
  const {
    raw = false
  } = opts;
  const execMethod = async certPath => await this.exec('keychain', {
    args: [this.requireUdid('keychain add-cert'), 'add-cert', certPath]
  });
  if (raw) {
    await handleRawPayload(cert, execMethod);
  } else {
    await execMethod(cert);
  }
};
commands.resetKeychain = async function resetKeychain() {
  await this.exec('keychain', {
    args: [this.requireUdid('keychain reset'), 'reset']
  });
};
var _default = commands;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfb3MiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9wcm9taXNlcyIsIl91dWlkIiwiX3BhdGgiLCJfbG9kYXNoIiwiX3JpbXJhZiIsImNvbW1hbmRzIiwiaGFuZGxlUmF3UGF5bG9hZCIsInBheWxvYWQiLCJvblBheWxvYWRTdG9yZWQiLCJmaWxlUGF0aCIsInBhdGgiLCJyZXNvbHZlIiwib3MiLCJ0bXBkaXIiLCJ1dWlkVjQiLCJfIiwiaXNCdWZmZXIiLCJmcyIsIndyaXRlRmlsZSIsInJpbXJhZiIsImFkZFJvb3RDZXJ0aWZpY2F0ZSIsImNlcnQiLCJvcHRzIiwicmF3IiwiZXhlY01ldGhvZCIsImNlcnRQYXRoIiwiZXhlYyIsImFyZ3MiLCJyZXF1aXJlVWRpZCIsImFkZENlcnRpZmljYXRlIiwicmVzZXRLZXljaGFpbiIsIl9kZWZhdWx0IiwiZXhwb3J0cyIsImRlZmF1bHQiXSwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvc3ViY29tbWFuZHMva2V5Y2hhaW4uanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG9zIGZyb20gJ29zJztcbmltcG9ydCBmcyBmcm9tICdmcy9wcm9taXNlcyc7XG5pbXBvcnQgeyB2NCBhcyB1dWlkVjQgfSBmcm9tICd1dWlkJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCByaW1yYWYgZnJvbSAncmltcmFmJztcblxuY29uc3QgY29tbWFuZHMgPSB7fTtcblxuYXN5bmMgZnVuY3Rpb24gaGFuZGxlUmF3UGF5bG9hZCAocGF5bG9hZCwgb25QYXlsb2FkU3RvcmVkKSB7XG4gIGNvbnN0IGZpbGVQYXRoID0gcGF0aC5yZXNvbHZlKG9zLnRtcGRpcigpLCBgJHt1dWlkVjQoKX0ucGVtYCk7XG4gIHRyeSB7XG4gICAgaWYgKF8uaXNCdWZmZXIocGF5bG9hZCkpIHtcbiAgICAgIGF3YWl0IGZzLndyaXRlRmlsZShmaWxlUGF0aCwgcGF5bG9hZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGF3YWl0IGZzLndyaXRlRmlsZShmaWxlUGF0aCwgcGF5bG9hZCwgJ3V0ZjgnKTtcbiAgICB9XG4gICAgYXdhaXQgb25QYXlsb2FkU3RvcmVkKGZpbGVQYXRoKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBhd2FpdCByaW1yYWYoZmlsZVBhdGgpO1xuICB9XG59XG5cblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBDZXJ0T3B0aW9uc1xuICogQHByb3BlcnR5IHtib29sZWFufSByYXcgW2ZhbHNlXSAtIHdoZXRoZXIgdGhlIGBjZXJ0YCBhcmd1bWVudFxuICogaXMgdGhlIHBhdGggdG8gdGhlIGNlcnRpZmljYXRlIG9uIHRoZSBsb2NhbCBmaWxlIHN5c3RlbSBvclxuICogYSByYXcgY2VydGlmaWNhdGUgY29udGVudFxuICovXG5cbi8qKlxuICogQWRkcyB0aGUgZ2l2ZW4gY2VydGlmaWNhdGUgdG8gdGhlIFRydXN0ZWQgUm9vdCBTdG9yZSBvbiB0aGUgc2ltdWxhdG9yXG4gKlxuICogQHNpbmNlIFhjb2RlIDExLjQgU0RLXG4gKiBAcGFyYW0ge3N0cmluZ30gY2VydCB0aGUgZnVsbCBwYXRoIHRvIGEgdmFsaWQgLmNlcnQgZmlsZSBjb250YWluaW5nXG4gKiB0aGUgY2VydGlmaWNhdGUgY29udGVudCBvciB0aGUgY2VydGlmaWNhdGUgY29udGVudCBpdHNlbGYsIGRlcGVuZGluZyBvblxuICogb3B0aW9uc1xuICogQHBhcmFtIHtDZXJ0T3B0aW9uc30gb3B0c1xuICogQHRocm93cyB7RXJyb3J9IGlmIHRoZSBjdXJyZW50IFNESyB2ZXJzaW9uIGRvZXMgbm90IHN1cHBvcnQgdGhlIGNvbW1hbmRcbiAqIG9yIHRoZXJlIHdhcyBhbiBlcnJvciB3aGlsZSBhZGRpbmcgdGhlIGNlcnRpZmljYXRlXG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIGB1ZGlkYCBpbnN0YW5jZSBwcm9wZXJ0eSBpcyB1bnNldFxuICovXG5jb21tYW5kcy5hZGRSb290Q2VydGlmaWNhdGUgPSBhc3luYyBmdW5jdGlvbiBhZGRSb290Q2VydGlmaWNhdGUgKGNlcnQsIG9wdHMgPSB7fSkge1xuICBjb25zdCB7XG4gICAgcmF3ID0gZmFsc2UsXG4gIH0gPSBvcHRzO1xuICBjb25zdCBleGVjTWV0aG9kID0gYXN5bmMgKGNlcnRQYXRoKSA9PiBhd2FpdCB0aGlzLmV4ZWMoJ2tleWNoYWluJywge1xuICAgIGFyZ3M6IFt0aGlzLnJlcXVpcmVVZGlkKCdrZXljaGFpbiBhZGQtcm9vdC1jZXJ0JyksICdhZGQtcm9vdC1jZXJ0JywgY2VydFBhdGhdLFxuICB9KTtcbiAgaWYgKHJhdykge1xuICAgIGF3YWl0IGhhbmRsZVJhd1BheWxvYWQoY2VydCwgZXhlY01ldGhvZCk7XG4gIH0gZWxzZSB7XG4gICAgYXdhaXQgZXhlY01ldGhvZChjZXJ0KTtcbiAgfVxufTtcblxuLyoqXG4gKiBBZGRzIHRoZSBnaXZlbiBjZXJ0aWZpY2F0ZSB0byB0aGUgS2V5Y2hhaW4gU3RvcmUgb24gdGhlIHNpbXVsYXRvclxuICpcbiAqIEBzaW5jZSBYY29kZSAxMS40IFNES1xuICogQHBhcmFtIHtzdHJpbmd9IGNlcnQgdGhlIGZ1bGwgcGF0aCB0byBhIHZhbGlkIC5jZXJ0IGZpbGUgY29udGFpbmluZ1xuICogdGhlIGNlcnRpZmljYXRlIGNvbnRlbnQgb3IgdGhlIGNlcnRpZmljYXRlIGNvbnRlbnQgaXRzZWxmLCBkZXBlbmRpbmcgb25cbiAqIG9wdGlvbnNcbiAqIEBwYXJhbSB7Q2VydE9wdGlvbnN9IG9wdHNcbiAqIEB0aHJvd3Mge0Vycm9yfSBpZiB0aGUgY3VycmVudCBTREsgdmVyc2lvbiBkb2VzIG5vdCBzdXBwb3J0IHRoZSBjb21tYW5kXG4gKiBvciB0aGVyZSB3YXMgYW4gZXJyb3Igd2hpbGUgYWRkaW5nIHRoZSBjZXJ0aWZpY2F0ZVxuICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBgdWRpZGAgaW5zdGFuY2UgcHJvcGVydHkgaXMgdW5zZXRcbiAqL1xuY29tbWFuZHMuYWRkQ2VydGlmaWNhdGUgPSBhc3luYyBmdW5jdGlvbiBhZGRDZXJ0aWZpY2F0ZSAoY2VydCwgb3B0cyA9IHt9KSB7XG4gIGNvbnN0IHtcbiAgICByYXcgPSBmYWxzZSxcbiAgfSA9IG9wdHM7XG4gIGNvbnN0IGV4ZWNNZXRob2QgPSBhc3luYyAoY2VydFBhdGgpID0+IGF3YWl0IHRoaXMuZXhlYygna2V5Y2hhaW4nLCB7XG4gICAgYXJnczogW3RoaXMucmVxdWlyZVVkaWQoJ2tleWNoYWluIGFkZC1jZXJ0JyksICdhZGQtY2VydCcsIGNlcnRQYXRoXSxcbiAgfSk7XG4gIGlmIChyYXcpIHtcbiAgICBhd2FpdCBoYW5kbGVSYXdQYXlsb2FkKGNlcnQsIGV4ZWNNZXRob2QpO1xuICB9IGVsc2Uge1xuICAgIGF3YWl0IGV4ZWNNZXRob2QoY2VydCk7XG4gIH1cbn07XG5cbi8qKlxuICogUmVzZXRzIHRoZSBzaW11bGF0b3Iga2V5Y2hhaW5cbiAqXG4gKiBAc2luY2UgWGNvZGUgMTEuNCBTREtcbiAqIEB0aHJvd3Mge0Vycm9yfSBpZiB0aGUgY3VycmVudCBTREsgdmVyc2lvbiBkb2VzIG5vdCBzdXBwb3J0IHRoZSBjb21tYW5kXG4gKiBvciB0aGVyZSB3YXMgYW4gZXJyb3Igd2hpbGUgcmVzZXR0aW5nIHRoZSBrZXljaGFpblxuICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBgdWRpZGAgaW5zdGFuY2UgcHJvcGVydHkgaXMgdW5zZXRcbiAqL1xuY29tbWFuZHMucmVzZXRLZXljaGFpbiA9IGFzeW5jIGZ1bmN0aW9uIHJlc2V0S2V5Y2hhaW4gKCkge1xuICBhd2FpdCB0aGlzLmV4ZWMoJ2tleWNoYWluJywge1xuICAgIGFyZ3M6IFt0aGlzLnJlcXVpcmVVZGlkKCdrZXljaGFpbiByZXNldCcpLCAncmVzZXQnXSxcbiAgfSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjb21tYW5kcztcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQSxJQUFBQSxHQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxTQUFBLEdBQUFGLHNCQUFBLENB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